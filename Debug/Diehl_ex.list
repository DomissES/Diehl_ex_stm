
Diehl_ex.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b50  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  08005d50  08005d50  00015d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061b4  080061b4  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  080061b4  080061b4  000161b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080061bc  080061bc  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061bc  080061bc  000161bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061c0  080061c0  000161c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  080061c4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  200000d0  08006294  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  08006294  000202f0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000aa8a  00000000  00000000  00020141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d11  00000000  00000000  0002abcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000870  00000000  00000000  0002c8e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000065a  00000000  00000000  0002d150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000281ce  00000000  00000000  0002d7aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c29c  00000000  00000000  00055978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f2e7f  00000000  00000000  00061c14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003074  00000000  00000000  00154a94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  00157b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200000d0 	.word	0x200000d0
 800021c:	00000000 	.word	0x00000000
 8000220:	08005d38 	.word	0x08005d38

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200000d4 	.word	0x200000d4
 800023c:	08005d38 	.word	0x08005d38

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_ldivmod>:
 8000310:	b97b      	cbnz	r3, 8000332 <__aeabi_ldivmod+0x22>
 8000312:	b972      	cbnz	r2, 8000332 <__aeabi_ldivmod+0x22>
 8000314:	2900      	cmp	r1, #0
 8000316:	bfbe      	ittt	lt
 8000318:	2000      	movlt	r0, #0
 800031a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800031e:	e006      	blt.n	800032e <__aeabi_ldivmod+0x1e>
 8000320:	bf08      	it	eq
 8000322:	2800      	cmpeq	r0, #0
 8000324:	bf1c      	itt	ne
 8000326:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800032a:	f04f 30ff 	movne.w	r0, #4294967295
 800032e:	f000 b9bb 	b.w	80006a8 <__aeabi_idiv0>
 8000332:	f1ad 0c08 	sub.w	ip, sp, #8
 8000336:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033a:	2900      	cmp	r1, #0
 800033c:	db09      	blt.n	8000352 <__aeabi_ldivmod+0x42>
 800033e:	2b00      	cmp	r3, #0
 8000340:	db1a      	blt.n	8000378 <__aeabi_ldivmod+0x68>
 8000342:	f000 f84d 	bl	80003e0 <__udivmoddi4>
 8000346:	f8dd e004 	ldr.w	lr, [sp, #4]
 800034a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034e:	b004      	add	sp, #16
 8000350:	4770      	bx	lr
 8000352:	4240      	negs	r0, r0
 8000354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000358:	2b00      	cmp	r3, #0
 800035a:	db1b      	blt.n	8000394 <__aeabi_ldivmod+0x84>
 800035c:	f000 f840 	bl	80003e0 <__udivmoddi4>
 8000360:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000368:	b004      	add	sp, #16
 800036a:	4240      	negs	r0, r0
 800036c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000370:	4252      	negs	r2, r2
 8000372:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000376:	4770      	bx	lr
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	f000 f82f 	bl	80003e0 <__udivmoddi4>
 8000382:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000386:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038a:	b004      	add	sp, #16
 800038c:	4240      	negs	r0, r0
 800038e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000392:	4770      	bx	lr
 8000394:	4252      	negs	r2, r2
 8000396:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800039a:	f000 f821 	bl	80003e0 <__udivmoddi4>
 800039e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003a6:	b004      	add	sp, #16
 80003a8:	4252      	negs	r2, r2
 80003aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b970 	b.w	80006a8 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9e08      	ldr	r6, [sp, #32]
 80003e6:	460d      	mov	r5, r1
 80003e8:	4604      	mov	r4, r0
 80003ea:	460f      	mov	r7, r1
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d14a      	bne.n	8000486 <__udivmoddi4+0xa6>
 80003f0:	428a      	cmp	r2, r1
 80003f2:	4694      	mov	ip, r2
 80003f4:	d965      	bls.n	80004c2 <__udivmoddi4+0xe2>
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	b143      	cbz	r3, 800040e <__udivmoddi4+0x2e>
 80003fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000400:	f1c3 0220 	rsb	r2, r3, #32
 8000404:	409f      	lsls	r7, r3
 8000406:	fa20 f202 	lsr.w	r2, r0, r2
 800040a:	4317      	orrs	r7, r2
 800040c:	409c      	lsls	r4, r3
 800040e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000412:	fa1f f58c 	uxth.w	r5, ip
 8000416:	fbb7 f1fe 	udiv	r1, r7, lr
 800041a:	0c22      	lsrs	r2, r4, #16
 800041c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000420:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000424:	fb01 f005 	mul.w	r0, r1, r5
 8000428:	4290      	cmp	r0, r2
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x62>
 800042c:	eb1c 0202 	adds.w	r2, ip, r2
 8000430:	f101 37ff 	add.w	r7, r1, #4294967295
 8000434:	f080 811c 	bcs.w	8000670 <__udivmoddi4+0x290>
 8000438:	4290      	cmp	r0, r2
 800043a:	f240 8119 	bls.w	8000670 <__udivmoddi4+0x290>
 800043e:	3902      	subs	r1, #2
 8000440:	4462      	add	r2, ip
 8000442:	1a12      	subs	r2, r2, r0
 8000444:	b2a4      	uxth	r4, r4
 8000446:	fbb2 f0fe 	udiv	r0, r2, lr
 800044a:	fb0e 2210 	mls	r2, lr, r0, r2
 800044e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000452:	fb00 f505 	mul.w	r5, r0, r5
 8000456:	42a5      	cmp	r5, r4
 8000458:	d90a      	bls.n	8000470 <__udivmoddi4+0x90>
 800045a:	eb1c 0404 	adds.w	r4, ip, r4
 800045e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000462:	f080 8107 	bcs.w	8000674 <__udivmoddi4+0x294>
 8000466:	42a5      	cmp	r5, r4
 8000468:	f240 8104 	bls.w	8000674 <__udivmoddi4+0x294>
 800046c:	4464      	add	r4, ip
 800046e:	3802      	subs	r0, #2
 8000470:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000474:	1b64      	subs	r4, r4, r5
 8000476:	2100      	movs	r1, #0
 8000478:	b11e      	cbz	r6, 8000482 <__udivmoddi4+0xa2>
 800047a:	40dc      	lsrs	r4, r3
 800047c:	2300      	movs	r3, #0
 800047e:	e9c6 4300 	strd	r4, r3, [r6]
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	428b      	cmp	r3, r1
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0xbc>
 800048a:	2e00      	cmp	r6, #0
 800048c:	f000 80ed 	beq.w	800066a <__udivmoddi4+0x28a>
 8000490:	2100      	movs	r1, #0
 8000492:	e9c6 0500 	strd	r0, r5, [r6]
 8000496:	4608      	mov	r0, r1
 8000498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049c:	fab3 f183 	clz	r1, r3
 80004a0:	2900      	cmp	r1, #0
 80004a2:	d149      	bne.n	8000538 <__udivmoddi4+0x158>
 80004a4:	42ab      	cmp	r3, r5
 80004a6:	d302      	bcc.n	80004ae <__udivmoddi4+0xce>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	f200 80f8 	bhi.w	800069e <__udivmoddi4+0x2be>
 80004ae:	1a84      	subs	r4, r0, r2
 80004b0:	eb65 0203 	sbc.w	r2, r5, r3
 80004b4:	2001      	movs	r0, #1
 80004b6:	4617      	mov	r7, r2
 80004b8:	2e00      	cmp	r6, #0
 80004ba:	d0e2      	beq.n	8000482 <__udivmoddi4+0xa2>
 80004bc:	e9c6 4700 	strd	r4, r7, [r6]
 80004c0:	e7df      	b.n	8000482 <__udivmoddi4+0xa2>
 80004c2:	b902      	cbnz	r2, 80004c6 <__udivmoddi4+0xe6>
 80004c4:	deff      	udf	#255	; 0xff
 80004c6:	fab2 f382 	clz	r3, r2
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	f040 8090 	bne.w	80005f0 <__udivmoddi4+0x210>
 80004d0:	1a8a      	subs	r2, r1, r2
 80004d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d6:	fa1f fe8c 	uxth.w	lr, ip
 80004da:	2101      	movs	r1, #1
 80004dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004e0:	fb07 2015 	mls	r0, r7, r5, r2
 80004e4:	0c22      	lsrs	r2, r4, #16
 80004e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ea:	fb0e f005 	mul.w	r0, lr, r5
 80004ee:	4290      	cmp	r0, r2
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x124>
 80004f2:	eb1c 0202 	adds.w	r2, ip, r2
 80004f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x122>
 80004fc:	4290      	cmp	r0, r2
 80004fe:	f200 80cb 	bhi.w	8000698 <__udivmoddi4+0x2b8>
 8000502:	4645      	mov	r5, r8
 8000504:	1a12      	subs	r2, r2, r0
 8000506:	b2a4      	uxth	r4, r4
 8000508:	fbb2 f0f7 	udiv	r0, r2, r7
 800050c:	fb07 2210 	mls	r2, r7, r0, r2
 8000510:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000514:	fb0e fe00 	mul.w	lr, lr, r0
 8000518:	45a6      	cmp	lr, r4
 800051a:	d908      	bls.n	800052e <__udivmoddi4+0x14e>
 800051c:	eb1c 0404 	adds.w	r4, ip, r4
 8000520:	f100 32ff 	add.w	r2, r0, #4294967295
 8000524:	d202      	bcs.n	800052c <__udivmoddi4+0x14c>
 8000526:	45a6      	cmp	lr, r4
 8000528:	f200 80bb 	bhi.w	80006a2 <__udivmoddi4+0x2c2>
 800052c:	4610      	mov	r0, r2
 800052e:	eba4 040e 	sub.w	r4, r4, lr
 8000532:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000536:	e79f      	b.n	8000478 <__udivmoddi4+0x98>
 8000538:	f1c1 0720 	rsb	r7, r1, #32
 800053c:	408b      	lsls	r3, r1
 800053e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000542:	ea4c 0c03 	orr.w	ip, ip, r3
 8000546:	fa05 f401 	lsl.w	r4, r5, r1
 800054a:	fa20 f307 	lsr.w	r3, r0, r7
 800054e:	40fd      	lsrs	r5, r7
 8000550:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000554:	4323      	orrs	r3, r4
 8000556:	fbb5 f8f9 	udiv	r8, r5, r9
 800055a:	fa1f fe8c 	uxth.w	lr, ip
 800055e:	fb09 5518 	mls	r5, r9, r8, r5
 8000562:	0c1c      	lsrs	r4, r3, #16
 8000564:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000568:	fb08 f50e 	mul.w	r5, r8, lr
 800056c:	42a5      	cmp	r5, r4
 800056e:	fa02 f201 	lsl.w	r2, r2, r1
 8000572:	fa00 f001 	lsl.w	r0, r0, r1
 8000576:	d90b      	bls.n	8000590 <__udivmoddi4+0x1b0>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000580:	f080 8088 	bcs.w	8000694 <__udivmoddi4+0x2b4>
 8000584:	42a5      	cmp	r5, r4
 8000586:	f240 8085 	bls.w	8000694 <__udivmoddi4+0x2b4>
 800058a:	f1a8 0802 	sub.w	r8, r8, #2
 800058e:	4464      	add	r4, ip
 8000590:	1b64      	subs	r4, r4, r5
 8000592:	b29d      	uxth	r5, r3
 8000594:	fbb4 f3f9 	udiv	r3, r4, r9
 8000598:	fb09 4413 	mls	r4, r9, r3, r4
 800059c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80005a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80005a4:	45a6      	cmp	lr, r4
 80005a6:	d908      	bls.n	80005ba <__udivmoddi4+0x1da>
 80005a8:	eb1c 0404 	adds.w	r4, ip, r4
 80005ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80005b0:	d26c      	bcs.n	800068c <__udivmoddi4+0x2ac>
 80005b2:	45a6      	cmp	lr, r4
 80005b4:	d96a      	bls.n	800068c <__udivmoddi4+0x2ac>
 80005b6:	3b02      	subs	r3, #2
 80005b8:	4464      	add	r4, ip
 80005ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005be:	fba3 9502 	umull	r9, r5, r3, r2
 80005c2:	eba4 040e 	sub.w	r4, r4, lr
 80005c6:	42ac      	cmp	r4, r5
 80005c8:	46c8      	mov	r8, r9
 80005ca:	46ae      	mov	lr, r5
 80005cc:	d356      	bcc.n	800067c <__udivmoddi4+0x29c>
 80005ce:	d053      	beq.n	8000678 <__udivmoddi4+0x298>
 80005d0:	b156      	cbz	r6, 80005e8 <__udivmoddi4+0x208>
 80005d2:	ebb0 0208 	subs.w	r2, r0, r8
 80005d6:	eb64 040e 	sbc.w	r4, r4, lr
 80005da:	fa04 f707 	lsl.w	r7, r4, r7
 80005de:	40ca      	lsrs	r2, r1
 80005e0:	40cc      	lsrs	r4, r1
 80005e2:	4317      	orrs	r7, r2
 80005e4:	e9c6 7400 	strd	r7, r4, [r6]
 80005e8:	4618      	mov	r0, r3
 80005ea:	2100      	movs	r1, #0
 80005ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005f0:	f1c3 0120 	rsb	r1, r3, #32
 80005f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005f8:	fa20 f201 	lsr.w	r2, r0, r1
 80005fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000600:	409d      	lsls	r5, r3
 8000602:	432a      	orrs	r2, r5
 8000604:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000608:	fa1f fe8c 	uxth.w	lr, ip
 800060c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000610:	fb07 1510 	mls	r5, r7, r0, r1
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800061a:	fb00 f50e 	mul.w	r5, r0, lr
 800061e:	428d      	cmp	r5, r1
 8000620:	fa04 f403 	lsl.w	r4, r4, r3
 8000624:	d908      	bls.n	8000638 <__udivmoddi4+0x258>
 8000626:	eb1c 0101 	adds.w	r1, ip, r1
 800062a:	f100 38ff 	add.w	r8, r0, #4294967295
 800062e:	d22f      	bcs.n	8000690 <__udivmoddi4+0x2b0>
 8000630:	428d      	cmp	r5, r1
 8000632:	d92d      	bls.n	8000690 <__udivmoddi4+0x2b0>
 8000634:	3802      	subs	r0, #2
 8000636:	4461      	add	r1, ip
 8000638:	1b49      	subs	r1, r1, r5
 800063a:	b292      	uxth	r2, r2
 800063c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000640:	fb07 1115 	mls	r1, r7, r5, r1
 8000644:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000648:	fb05 f10e 	mul.w	r1, r5, lr
 800064c:	4291      	cmp	r1, r2
 800064e:	d908      	bls.n	8000662 <__udivmoddi4+0x282>
 8000650:	eb1c 0202 	adds.w	r2, ip, r2
 8000654:	f105 38ff 	add.w	r8, r5, #4294967295
 8000658:	d216      	bcs.n	8000688 <__udivmoddi4+0x2a8>
 800065a:	4291      	cmp	r1, r2
 800065c:	d914      	bls.n	8000688 <__udivmoddi4+0x2a8>
 800065e:	3d02      	subs	r5, #2
 8000660:	4462      	add	r2, ip
 8000662:	1a52      	subs	r2, r2, r1
 8000664:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000668:	e738      	b.n	80004dc <__udivmoddi4+0xfc>
 800066a:	4631      	mov	r1, r6
 800066c:	4630      	mov	r0, r6
 800066e:	e708      	b.n	8000482 <__udivmoddi4+0xa2>
 8000670:	4639      	mov	r1, r7
 8000672:	e6e6      	b.n	8000442 <__udivmoddi4+0x62>
 8000674:	4610      	mov	r0, r2
 8000676:	e6fb      	b.n	8000470 <__udivmoddi4+0x90>
 8000678:	4548      	cmp	r0, r9
 800067a:	d2a9      	bcs.n	80005d0 <__udivmoddi4+0x1f0>
 800067c:	ebb9 0802 	subs.w	r8, r9, r2
 8000680:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000684:	3b01      	subs	r3, #1
 8000686:	e7a3      	b.n	80005d0 <__udivmoddi4+0x1f0>
 8000688:	4645      	mov	r5, r8
 800068a:	e7ea      	b.n	8000662 <__udivmoddi4+0x282>
 800068c:	462b      	mov	r3, r5
 800068e:	e794      	b.n	80005ba <__udivmoddi4+0x1da>
 8000690:	4640      	mov	r0, r8
 8000692:	e7d1      	b.n	8000638 <__udivmoddi4+0x258>
 8000694:	46d0      	mov	r8, sl
 8000696:	e77b      	b.n	8000590 <__udivmoddi4+0x1b0>
 8000698:	3d02      	subs	r5, #2
 800069a:	4462      	add	r2, ip
 800069c:	e732      	b.n	8000504 <__udivmoddi4+0x124>
 800069e:	4608      	mov	r0, r1
 80006a0:	e70a      	b.n	80004b8 <__udivmoddi4+0xd8>
 80006a2:	4464      	add	r4, ip
 80006a4:	3802      	subs	r0, #2
 80006a6:	e742      	b.n	800052e <__udivmoddi4+0x14e>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b08a      	sub	sp, #40	; 0x28
 80006b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b2:	f107 0314 	add.w	r3, r7, #20
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	605a      	str	r2, [r3, #4]
 80006bc:	609a      	str	r2, [r3, #8]
 80006be:	60da      	str	r2, [r3, #12]
 80006c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006c2:	4b31      	ldr	r3, [pc, #196]	; (8000788 <MX_GPIO_Init+0xdc>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	4a30      	ldr	r2, [pc, #192]	; (8000788 <MX_GPIO_Init+0xdc>)
 80006c8:	f043 0304 	orr.w	r3, r3, #4
 80006cc:	6313      	str	r3, [r2, #48]	; 0x30
 80006ce:	4b2e      	ldr	r3, [pc, #184]	; (8000788 <MX_GPIO_Init+0xdc>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	f003 0304 	and.w	r3, r3, #4
 80006d6:	613b      	str	r3, [r7, #16]
 80006d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006da:	4b2b      	ldr	r3, [pc, #172]	; (8000788 <MX_GPIO_Init+0xdc>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a2a      	ldr	r2, [pc, #168]	; (8000788 <MX_GPIO_Init+0xdc>)
 80006e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
 80006e6:	4b28      	ldr	r3, [pc, #160]	; (8000788 <MX_GPIO_Init+0xdc>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f2:	4b25      	ldr	r3, [pc, #148]	; (8000788 <MX_GPIO_Init+0xdc>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	4a24      	ldr	r2, [pc, #144]	; (8000788 <MX_GPIO_Init+0xdc>)
 80006f8:	f043 0302 	orr.w	r3, r3, #2
 80006fc:	6313      	str	r3, [r2, #48]	; 0x30
 80006fe:	4b22      	ldr	r3, [pc, #136]	; (8000788 <MX_GPIO_Init+0xdc>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	f003 0302 	and.w	r3, r3, #2
 8000706:	60bb      	str	r3, [r7, #8]
 8000708:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800070a:	4b1f      	ldr	r3, [pc, #124]	; (8000788 <MX_GPIO_Init+0xdc>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	4a1e      	ldr	r2, [pc, #120]	; (8000788 <MX_GPIO_Init+0xdc>)
 8000710:	f043 0308 	orr.w	r3, r3, #8
 8000714:	6313      	str	r3, [r2, #48]	; 0x30
 8000716:	4b1c      	ldr	r3, [pc, #112]	; (8000788 <MX_GPIO_Init+0xdc>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	f003 0308 	and.w	r3, r3, #8
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000722:	4b19      	ldr	r3, [pc, #100]	; (8000788 <MX_GPIO_Init+0xdc>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a18      	ldr	r2, [pc, #96]	; (8000788 <MX_GPIO_Init+0xdc>)
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b16      	ldr	r3, [pc, #88]	; (8000788 <MX_GPIO_Init+0xdc>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	603b      	str	r3, [r7, #0]
 8000738:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800073a:	2200      	movs	r2, #0
 800073c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000740:	4812      	ldr	r0, [pc, #72]	; (800078c <MX_GPIO_Init+0xe0>)
 8000742:	f001 f96d 	bl	8001a20 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PC5 */
  GPIO_InitStruct.Pin = USER_Btn_Pin|GPIO_PIN_5;
 8000746:	f242 0320 	movw	r3, #8224	; 0x2020
 800074a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800074c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000750:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000752:	2300      	movs	r3, #0
 8000754:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000756:	f107 0314 	add.w	r3, r7, #20
 800075a:	4619      	mov	r1, r3
 800075c:	480c      	ldr	r0, [pc, #48]	; (8000790 <MX_GPIO_Init+0xe4>)
 800075e:	f000 ffb3 	bl	80016c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000762:	f244 0381 	movw	r3, #16513	; 0x4081
 8000766:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000768:	2301      	movs	r3, #1
 800076a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076c:	2300      	movs	r3, #0
 800076e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000770:	2300      	movs	r3, #0
 8000772:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000774:	f107 0314 	add.w	r3, r7, #20
 8000778:	4619      	mov	r1, r3
 800077a:	4804      	ldr	r0, [pc, #16]	; (800078c <MX_GPIO_Init+0xe0>)
 800077c:	f000 ffa4 	bl	80016c8 <HAL_GPIO_Init>

}
 8000780:	bf00      	nop
 8000782:	3728      	adds	r7, #40	; 0x28
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	40023800 	.word	0x40023800
 800078c:	40020400 	.word	0x40020400
 8000790:	40020800 	.word	0x40020800

08000794 <convertDateTypes>:

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

bool convertDateTypes(date_t *myDate, const struct tm *libDate) //convert from struct tm to date_t
{
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
 800079c:	6039      	str	r1, [r7, #0]
    myDate->Year = (uint8_t)libDate->tm_year - 70;
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	695b      	ldr	r3, [r3, #20]
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	3b46      	subs	r3, #70	; 0x46
 80007a6:	b2da      	uxtb	r2, r3
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	715a      	strb	r2, [r3, #5]
    myDate->Month = (uint8_t)libDate->tm_mon;
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	691b      	ldr	r3, [r3, #16]
 80007b0:	b2da      	uxtb	r2, r3
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	711a      	strb	r2, [r3, #4]
    myDate->Day = (uint8_t)libDate->tm_mday;
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	68db      	ldr	r3, [r3, #12]
 80007ba:	b2da      	uxtb	r2, r3
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	70da      	strb	r2, [r3, #3]

    myDate->Hour = (uint8_t)libDate->tm_hour;
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	689b      	ldr	r3, [r3, #8]
 80007c4:	b2da      	uxtb	r2, r3
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	701a      	strb	r2, [r3, #0]
    myDate->Minutes = (uint8_t)libDate->tm_min;
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	685b      	ldr	r3, [r3, #4]
 80007ce:	b2da      	uxtb	r2, r3
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	705a      	strb	r2, [r3, #1]
    myDate->Seconds = (uint8_t)libDate->tm_sec;
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	b2da      	uxtb	r2, r3
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	709a      	strb	r2, [r3, #2]

    return true;
 80007de:	2301      	movs	r3, #1

}
 80007e0:	4618      	mov	r0, r3
 80007e2:	370c      	adds	r7, #12
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr

080007ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007ec:	b5b0      	push	{r4, r5, r7, lr}
 80007ee:	b0ae      	sub	sp, #184	; 0xb8
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007f2:	f000 fe02 	bl	80013fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f6:	f000 f9c1 	bl	8000b7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007fa:	f7ff ff57 	bl	80006ac <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80007fe:	f000 fd43 	bl	8001288 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  char uartStr[64];
  char *uartStr_ptr = &uartStr;
 8000802:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000806:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  char tempStr[64];
  char *tempStr_ptr = &tempStr;
 800080a:	f107 0318 	add.w	r3, r7, #24
 800080e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

  date_t myDate;
  struct tm *libDate;

  timestamp_t lastTimestamp;
  timestamp_t myTimestampA = TEST_TIMESTAMP;
 8000812:	4bce      	ldr	r3, [pc, #824]	; (8000b4c <main+0x360>)
 8000814:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  timestamp_t myTimestampB = TEST_TIMESTAMP2;
 8000818:	4bcd      	ldr	r3, [pc, #820]	; (8000b50 <main+0x364>)
 800081a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  weekday_t day;
  uint16_t elapsedDays;

  bool ReturnValue;
  bool isOk = true;
 800081e:	2301      	movs	r3, #1
 8000820:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

  //test sending NULLs

  ReturnValue = timeToDate(myTimestampA, NULL);
 8000824:	2100      	movs	r1, #0
 8000826:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 800082a:	f000 fa9b 	bl	8000d64 <timeToDate>
 800082e:	4603      	mov	r3, r0
 8000830:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
  if(ReturnValue != 0) isOk = false;
 8000834:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000838:	2b00      	cmp	r3, #0
 800083a:	d002      	beq.n	8000842 <main+0x56>
 800083c:	2300      	movs	r3, #0
 800083e:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

  ReturnValue = dateToTime(NULL, NULL);
 8000842:	2100      	movs	r1, #0
 8000844:	2000      	movs	r0, #0
 8000846:	f000 fb3d 	bl	8000ec4 <dateToTime>
 800084a:	4603      	mov	r3, r0
 800084c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
  if(ReturnValue != 0) isOk = false;
 8000850:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000854:	2b00      	cmp	r3, #0
 8000856:	d002      	beq.n	800085e <main+0x72>
 8000858:	2300      	movs	r3, #0
 800085a:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

  ReturnValue = dateToTime(&myDate, NULL);
 800085e:	f107 0310 	add.w	r3, r7, #16
 8000862:	2100      	movs	r1, #0
 8000864:	4618      	mov	r0, r3
 8000866:	f000 fb2d 	bl	8000ec4 <dateToTime>
 800086a:	4603      	mov	r3, r0
 800086c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
  if(ReturnValue != 0) isOk = false;
 8000870:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000874:	2b00      	cmp	r3, #0
 8000876:	d002      	beq.n	800087e <main+0x92>
 8000878:	2300      	movs	r3, #0
 800087a:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

  ReturnValue = dateToTime(NULL, myTimestampA);
 800087e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000882:	4619      	mov	r1, r3
 8000884:	2000      	movs	r0, #0
 8000886:	f000 fb1d 	bl	8000ec4 <dateToTime>
 800088a:	4603      	mov	r3, r0
 800088c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
  if(ReturnValue != 0) isOk = false;
 8000890:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000894:	2b00      	cmp	r3, #0
 8000896:	d002      	beq.n	800089e <main+0xb2>
 8000898:	2300      	movs	r3, #0
 800089a:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

  ReturnValue = timeToWeekday(myTimestampA, NULL);
 800089e:	2100      	movs	r1, #0
 80008a0:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 80008a4:	f000 fada 	bl	8000e5c <timeToWeekday>
 80008a8:	4603      	mov	r3, r0
 80008aa:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
  if(ReturnValue != 0) isOk = false;
 80008ae:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d002      	beq.n	80008bc <main+0xd0>
 80008b6:	2300      	movs	r3, #0
 80008b8:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

  ReturnValue = dayBetweenTimes(myTimestampA, myTimestampB, NULL);
 80008bc:	2200      	movs	r2, #0
 80008be:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80008c2:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 80008c6:	f000 fb95 	bl	8000ff4 <dayBetweenTimes>
 80008ca:	4603      	mov	r3, r0
 80008cc:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
  if(ReturnValue != 0) isOk = false;
 80008d0:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d002      	beq.n	80008de <main+0xf2>
 80008d8:	2300      	movs	r3, #0
 80008da:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

  sprintf(uartStr_ptr, "isOk value for NULL tests: %d\n", (uint8_t)isOk);
 80008de:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80008e2:	461a      	mov	r2, r3
 80008e4:	499b      	ldr	r1, [pc, #620]	; (8000b54 <main+0x368>)
 80008e6:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 80008ea:	f002 ff9b 	bl	8003824 <siprintf>
  HAL_UART_Transmit(&huart3, uartStr_ptr, strlen(uartStr_ptr), 500);
 80008ee:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 80008f2:	f7ff fcaf 	bl	8000254 <strlen>
 80008f6:	4603      	mov	r3, r0
 80008f8:	b29a      	uxth	r2, r3
 80008fa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80008fe:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8000902:	4895      	ldr	r0, [pc, #596]	; (8000b58 <main+0x36c>)
 8000904:	f002 fa40 	bl	8002d88 <HAL_UART_Transmit>
    /* USER CODE BEGIN 3 */


	  //test sending TIMESTAMP

	  if(myTimestampA != lastTimestamp)
 8000908:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800090c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000910:	429a      	cmp	r2, r3
 8000912:	f000 810f 	beq.w	8000b34 <main+0x348>
	  {
		  //time to date
		   ReturnValue = timeToDate(myTimestampA, tempStr_ptr);
 8000916:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800091a:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 800091e:	f000 fa21 	bl	8000d64 <timeToDate>
 8000922:	4603      	mov	r3, r0
 8000924:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		   sprintf(uartStr_ptr, "timestamp A time is: %s\n", tempStr_ptr);
 8000928:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800092c:	498b      	ldr	r1, [pc, #556]	; (8000b5c <main+0x370>)
 800092e:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8000932:	f002 ff77 	bl	8003824 <siprintf>
		   HAL_UART_Transmit(&huart3, uartStr_ptr, strlen(uartStr_ptr), 500);
 8000936:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800093a:	f7ff fc8b 	bl	8000254 <strlen>
 800093e:	4603      	mov	r3, r0
 8000940:	b29a      	uxth	r2, r3
 8000942:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000946:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 800094a:	4883      	ldr	r0, [pc, #524]	; (8000b58 <main+0x36c>)
 800094c:	f002 fa1c 	bl	8002d88 <HAL_UART_Transmit>
		   if(ReturnValue == 0) isOk = false;
 8000950:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000954:	f083 0301 	eor.w	r3, r3, #1
 8000958:	b2db      	uxtb	r3, r3
 800095a:	2b00      	cmp	r3, #0
 800095c:	d002      	beq.n	8000964 <main+0x178>
 800095e:	2300      	movs	r3, #0
 8000960:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

		   ReturnValue = timeToDate(myTimestampB, tempStr_ptr);
 8000964:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8000968:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800096c:	f000 f9fa 	bl	8000d64 <timeToDate>
 8000970:	4603      	mov	r3, r0
 8000972:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		   sprintf(uartStr_ptr, "timestamp B time is: %s\n", tempStr_ptr);
 8000976:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800097a:	4979      	ldr	r1, [pc, #484]	; (8000b60 <main+0x374>)
 800097c:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8000980:	f002 ff50 	bl	8003824 <siprintf>
		   HAL_UART_Transmit(&huart3, uartStr_ptr, strlen(uartStr_ptr), 500);
 8000984:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8000988:	f7ff fc64 	bl	8000254 <strlen>
 800098c:	4603      	mov	r3, r0
 800098e:	b29a      	uxth	r2, r3
 8000990:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000994:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8000998:	486f      	ldr	r0, [pc, #444]	; (8000b58 <main+0x36c>)
 800099a:	f002 f9f5 	bl	8002d88 <HAL_UART_Transmit>
		   if(ReturnValue == 0) isOk = false;
 800099e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80009a2:	f083 0301 	eor.w	r3, r3, #1
 80009a6:	b2db      	uxtb	r3, r3
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d002      	beq.n	80009b2 <main+0x1c6>
 80009ac:	2300      	movs	r3, #0
 80009ae:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf


		   //date to time
		   time_t temp = (time_t)myTimestampA;
 80009b2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80009b6:	2200      	movs	r2, #0
 80009b8:	461c      	mov	r4, r3
 80009ba:	4615      	mov	r5, r2
 80009bc:	e9c7 4500 	strd	r4, r5, [r7]
		   libDate = localtime(&temp); //convert from timestamp to struct tm
 80009c0:	463b      	mov	r3, r7
 80009c2:	4618      	mov	r0, r3
 80009c4:	f002 ff9c 	bl	8003900 <localtime>
 80009c8:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
		   convertDateTypes(&myDate, libDate); //convert from struct tm to  date_t
 80009cc:	f107 0310 	add.w	r3, r7, #16
 80009d0:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff fedd 	bl	8000794 <convertDateTypes>

		   sprintf(uartStr_ptr, "timestamp A value is: %d\n", myTimestampA);
 80009da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80009de:	4961      	ldr	r1, [pc, #388]	; (8000b64 <main+0x378>)
 80009e0:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 80009e4:	f002 ff1e 	bl	8003824 <siprintf>
		   HAL_UART_Transmit(&huart3, uartStr_ptr, strlen(uartStr_ptr), 500);
 80009e8:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 80009ec:	f7ff fc32 	bl	8000254 <strlen>
 80009f0:	4603      	mov	r3, r0
 80009f2:	b29a      	uxth	r2, r3
 80009f4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80009f8:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80009fc:	4856      	ldr	r0, [pc, #344]	; (8000b58 <main+0x36c>)
 80009fe:	f002 f9c3 	bl	8002d88 <HAL_UART_Transmit>

		   ReturnValue = dateToTime(&myDate, &myTimestampC);
 8000a02:	f107 020c 	add.w	r2, r7, #12
 8000a06:	f107 0310 	add.w	r3, r7, #16
 8000a0a:	4611      	mov	r1, r2
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f000 fa59 	bl	8000ec4 <dateToTime>
 8000a12:	4603      	mov	r3, r0
 8000a14:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		   sprintf(uartStr_ptr, "dateToTime value is: %d\n", myTimestampC);
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	4952      	ldr	r1, [pc, #328]	; (8000b68 <main+0x37c>)
 8000a1e:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8000a22:	f002 feff 	bl	8003824 <siprintf>
		   HAL_UART_Transmit(&huart3, uartStr_ptr, strlen(uartStr_ptr), 500);
 8000a26:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8000a2a:	f7ff fc13 	bl	8000254 <strlen>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	b29a      	uxth	r2, r3
 8000a32:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000a36:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8000a3a:	4847      	ldr	r0, [pc, #284]	; (8000b58 <main+0x36c>)
 8000a3c:	f002 f9a4 	bl	8002d88 <HAL_UART_Transmit>

		   if((ReturnValue == 0) || ((myTimestampC - myTimestampA) != 0)) isOk = false;
 8000a40:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000a44:	f083 0301 	eor.w	r3, r3, #1
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d104      	bne.n	8000a58 <main+0x26c>
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d002      	beq.n	8000a5e <main+0x272>
 8000a58:	2300      	movs	r3, #0
 8000a5a:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

		   //time to weekday
		   ReturnValue = timeToWeekday(myTimestampA, &day);
 8000a5e:	f107 030b 	add.w	r3, r7, #11
 8000a62:	4619      	mov	r1, r3
 8000a64:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8000a68:	f000 f9f8 	bl	8000e5c <timeToWeekday>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		   sprintf(uartStr_ptr, "for timestamp A date current day is %d\n", (uint8_t)day);
 8000a72:	7afb      	ldrb	r3, [r7, #11]
 8000a74:	461a      	mov	r2, r3
 8000a76:	493d      	ldr	r1, [pc, #244]	; (8000b6c <main+0x380>)
 8000a78:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8000a7c:	f002 fed2 	bl	8003824 <siprintf>
		   HAL_UART_Transmit(&huart3, uartStr_ptr, strlen(uartStr_ptr), 500);
 8000a80:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8000a84:	f7ff fbe6 	bl	8000254 <strlen>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	b29a      	uxth	r2, r3
 8000a8c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000a90:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8000a94:	4830      	ldr	r0, [pc, #192]	; (8000b58 <main+0x36c>)
 8000a96:	f002 f977 	bl	8002d88 <HAL_UART_Transmit>
		   if(ReturnValue == 0) isOk = false;
 8000a9a:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000a9e:	f083 0301 	eor.w	r3, r3, #1
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d002      	beq.n	8000aae <main+0x2c2>
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

		  //days between times
		  ReturnValue = dayBetweenTimes(myTimestampA, myTimestampB, &elapsedDays);
 8000aae:	f107 0308 	add.w	r3, r7, #8
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8000ab8:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8000abc:	f000 fa9a 	bl	8000ff4 <dayBetweenTimes>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		  sprintf(uartStr_ptr, "elapsed days between timestamp A and B are: %d\n", elapsedDays);
 8000ac6:	893b      	ldrh	r3, [r7, #8]
 8000ac8:	461a      	mov	r2, r3
 8000aca:	4929      	ldr	r1, [pc, #164]	; (8000b70 <main+0x384>)
 8000acc:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8000ad0:	f002 fea8 	bl	8003824 <siprintf>
		  HAL_UART_Transmit(&huart3, uartStr_ptr, strlen(uartStr_ptr), 500);
 8000ad4:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8000ad8:	f7ff fbbc 	bl	8000254 <strlen>
 8000adc:	4603      	mov	r3, r0
 8000ade:	b29a      	uxth	r2, r3
 8000ae0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ae4:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8000ae8:	481b      	ldr	r0, [pc, #108]	; (8000b58 <main+0x36c>)
 8000aea:	f002 f94d 	bl	8002d88 <HAL_UART_Transmit>
		  if(ReturnValue == 0) isOk = false;
 8000aee:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000af2:	f083 0301 	eor.w	r3, r3, #1
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d002      	beq.n	8000b02 <main+0x316>
 8000afc:	2300      	movs	r3, #0
 8000afe:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

		  sprintf(uartStr_ptr, "isOk value for upper tests is: %d\n\n", (uint8_t)isOk);
 8000b02:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8000b06:	461a      	mov	r2, r3
 8000b08:	491a      	ldr	r1, [pc, #104]	; (8000b74 <main+0x388>)
 8000b0a:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8000b0e:	f002 fe89 	bl	8003824 <siprintf>
		  HAL_UART_Transmit(&huart3, uartStr_ptr, strlen(uartStr_ptr), 500);
 8000b12:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8000b16:	f7ff fb9d 	bl	8000254 <strlen>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	b29a      	uxth	r2, r3
 8000b1e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000b22:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8000b26:	480c      	ldr	r0, [pc, #48]	; (8000b58 <main+0x36c>)
 8000b28:	f002 f92e 	bl	8002d88 <HAL_UART_Transmit>

		  lastTimestamp = myTimestampA;
 8000b2c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000b30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	  }


	  HAL_Delay(800);
 8000b34:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000b38:	f000 fcbc 	bl	80014b4 <HAL_Delay>
	  myTimestampA += 86000; //not whole day
 8000b3c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8000b40:	4b0d      	ldr	r3, [pc, #52]	; (8000b78 <main+0x38c>)
 8000b42:	4413      	add	r3, r2
 8000b44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	  if(myTimestampA != lastTimestamp)
 8000b48:	e6de      	b.n	8000908 <main+0x11c>
 8000b4a:	bf00      	nop
 8000b4c:	6592007b 	.word	0x6592007b
 8000b50:	65ae573a 	.word	0x65ae573a
 8000b54:	08005d50 	.word	0x08005d50
 8000b58:	200000f4 	.word	0x200000f4
 8000b5c:	08005d70 	.word	0x08005d70
 8000b60:	08005d8c 	.word	0x08005d8c
 8000b64:	08005da8 	.word	0x08005da8
 8000b68:	08005dc4 	.word	0x08005dc4
 8000b6c:	08005de0 	.word	0x08005de0
 8000b70:	08005e08 	.word	0x08005e08
 8000b74:	08005e38 	.word	0x08005e38
 8000b78:	00014ff0 	.word	0x00014ff0

08000b7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b094      	sub	sp, #80	; 0x50
 8000b80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b82:	f107 031c 	add.w	r3, r7, #28
 8000b86:	2234      	movs	r2, #52	; 0x34
 8000b88:	2100      	movs	r1, #0
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f002 feaf 	bl	80038ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b90:	f107 0308 	add.w	r3, r7, #8
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba0:	4b2b      	ldr	r3, [pc, #172]	; (8000c50 <SystemClock_Config+0xd4>)
 8000ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba4:	4a2a      	ldr	r2, [pc, #168]	; (8000c50 <SystemClock_Config+0xd4>)
 8000ba6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000baa:	6413      	str	r3, [r2, #64]	; 0x40
 8000bac:	4b28      	ldr	r3, [pc, #160]	; (8000c50 <SystemClock_Config+0xd4>)
 8000bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bb4:	607b      	str	r3, [r7, #4]
 8000bb6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bb8:	4b26      	ldr	r3, [pc, #152]	; (8000c54 <SystemClock_Config+0xd8>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a25      	ldr	r2, [pc, #148]	; (8000c54 <SystemClock_Config+0xd8>)
 8000bbe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000bc2:	6013      	str	r3, [r2, #0]
 8000bc4:	4b23      	ldr	r3, [pc, #140]	; (8000c54 <SystemClock_Config+0xd8>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bcc:	603b      	str	r3, [r7, #0]
 8000bce:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bd4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bd8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bde:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000be2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000be4:	2304      	movs	r3, #4
 8000be6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000be8:	23d8      	movs	r3, #216	; 0xd8
 8000bea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bec:	2302      	movs	r3, #2
 8000bee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000bf0:	2304      	movs	r3, #4
 8000bf2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bf8:	f107 031c 	add.w	r3, r7, #28
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f000 ff79 	bl	8001af4 <HAL_RCC_OscConfig>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000c08:	f000 f826 	bl	8000c58 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000c0c:	f000 ff22 	bl	8001a54 <HAL_PWREx_EnableOverDrive>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000c16:	f000 f81f 	bl	8000c58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c1a:	230f      	movs	r3, #15
 8000c1c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c22:	2300      	movs	r3, #0
 8000c24:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c26:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c2a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c30:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000c32:	f107 0308 	add.w	r3, r7, #8
 8000c36:	2107      	movs	r1, #7
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f001 fa09 	bl	8002050 <HAL_RCC_ClockConfig>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000c44:	f000 f808 	bl	8000c58 <Error_Handler>
  }
}
 8000c48:	bf00      	nop
 8000c4a:	3750      	adds	r7, #80	; 0x50
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	40023800 	.word	0x40023800
 8000c54:	40007000 	.word	0x40007000

08000c58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c5c:	b672      	cpsid	i
}
 8000c5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c60:	e7fe      	b.n	8000c60 <Error_Handler+0x8>
	...

08000c64 <timeToYear>:
//====================== PRIVATE UFNCTIONS ========================

//Calculate how much years is in *timePtr
//substract years*seconds from *timePtr
static uint8_t timeToYear(timestamp_t *timePtr)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b087      	sub	sp, #28
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
    const uint32_t oneYearSeconds = 365 * ONE_DAY;
 8000c6c:	4b23      	ldr	r3, [pc, #140]	; (8000cfc <timeToYear+0x98>)
 8000c6e:	60fb      	str	r3, [r7, #12]
    uint16_t year = 1970;
 8000c70:	f240 73b2 	movw	r3, #1970	; 0x7b2
 8000c74:	82fb      	strh	r3, [r7, #22]

    while(*timePtr > (365 * ONE_DAY)) //is enough seconds for one year
 8000c76:	e031      	b.n	8000cdc <timeToYear+0x78>
    {
        uint32_t secondsToSubstract = oneYearSeconds;
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	613b      	str	r3, [r7, #16]

        if(((year % 4) == 0) && !((year % 100) == 0)) //divided by 4 and no divided by 100
 8000c7c:	8afb      	ldrh	r3, [r7, #22]
 8000c7e:	f003 0303 	and.w	r3, r3, #3
 8000c82:	b29b      	uxth	r3, r3
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d10f      	bne.n	8000ca8 <timeToYear+0x44>
 8000c88:	8afb      	ldrh	r3, [r7, #22]
 8000c8a:	4a1d      	ldr	r2, [pc, #116]	; (8000d00 <timeToYear+0x9c>)
 8000c8c:	fba2 1203 	umull	r1, r2, r2, r3
 8000c90:	0952      	lsrs	r2, r2, #5
 8000c92:	2164      	movs	r1, #100	; 0x64
 8000c94:	fb01 f202 	mul.w	r2, r1, r2
 8000c98:	1a9b      	subs	r3, r3, r2
 8000c9a:	b29b      	uxth	r3, r3
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d003      	beq.n	8000ca8 <timeToYear+0x44>
        {
            secondsToSubstract += ONE_DAY;
 8000ca0:	693a      	ldr	r2, [r7, #16]
 8000ca2:	4b18      	ldr	r3, [pc, #96]	; (8000d04 <timeToYear+0xa0>)
 8000ca4:	4413      	add	r3, r2
 8000ca6:	613b      	str	r3, [r7, #16]
        }
        if((year % 400) == 0) //divided by 400
 8000ca8:	8afb      	ldrh	r3, [r7, #22]
 8000caa:	4a15      	ldr	r2, [pc, #84]	; (8000d00 <timeToYear+0x9c>)
 8000cac:	fba2 1203 	umull	r1, r2, r2, r3
 8000cb0:	09d2      	lsrs	r2, r2, #7
 8000cb2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000cb6:	fb01 f202 	mul.w	r2, r1, r2
 8000cba:	1a9b      	subs	r3, r3, r2
 8000cbc:	b29b      	uxth	r3, r3
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d103      	bne.n	8000cca <timeToYear+0x66>
        {
            secondsToSubstract += ONE_DAY;
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	4b0f      	ldr	r3, [pc, #60]	; (8000d04 <timeToYear+0xa0>)
 8000cc6:	4413      	add	r3, r2
 8000cc8:	613b      	str	r3, [r7, #16]
        }

        *timePtr -= secondsToSubstract;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	693b      	ldr	r3, [r7, #16]
 8000cd0:	1ad2      	subs	r2, r2, r3
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	601a      	str	r2, [r3, #0]
        year++;
 8000cd6:	8afb      	ldrh	r3, [r7, #22]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	82fb      	strh	r3, [r7, #22]
    while(*timePtr > (365 * ONE_DAY)) //is enough seconds for one year
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a06      	ldr	r2, [pc, #24]	; (8000cfc <timeToYear+0x98>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d8c8      	bhi.n	8000c78 <timeToYear+0x14>
    }

    return year - 1970;
 8000ce6:	8afb      	ldrh	r3, [r7, #22]
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	334e      	adds	r3, #78	; 0x4e
 8000cec:	b2db      	uxtb	r3, r3
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	371c      	adds	r7, #28
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	01e13380 	.word	0x01e13380
 8000d00:	51eb851f 	.word	0x51eb851f
 8000d04:	00015180 	.word	0x00015180

08000d08 <timeToMonth>:

//calculate how much months in in *timePtr
//substract months*seconds from *timePtr
static uint8_t timeToMonth(timestamp_t *timePtr)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b085      	sub	sp, #20
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
    uint8_t month = 0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	73fb      	strb	r3, [r7, #15]
    while(*timePtr > (dayInMonth[month] * ONE_DAY))
 8000d14:	e010      	b.n	8000d38 <timeToMonth+0x30>
    {
        uint32_t secondsToSubstract = dayInMonth[month] * ONE_DAY;
 8000d16:	7bfb      	ldrb	r3, [r7, #15]
 8000d18:	4a10      	ldr	r2, [pc, #64]	; (8000d5c <timeToMonth+0x54>)
 8000d1a:	5cd3      	ldrb	r3, [r2, r3]
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	4b10      	ldr	r3, [pc, #64]	; (8000d60 <timeToMonth+0x58>)
 8000d20:	fb02 f303 	mul.w	r3, r2, r3
 8000d24:	60bb      	str	r3, [r7, #8]
        month++;
 8000d26:	7bfb      	ldrb	r3, [r7, #15]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	73fb      	strb	r3, [r7, #15]
        *timePtr -= secondsToSubstract;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	1ad2      	subs	r2, r2, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	601a      	str	r2, [r3, #0]
    while(*timePtr > (dayInMonth[month] * ONE_DAY))
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	7bfa      	ldrb	r2, [r7, #15]
 8000d3e:	4907      	ldr	r1, [pc, #28]	; (8000d5c <timeToMonth+0x54>)
 8000d40:	5c8a      	ldrb	r2, [r1, r2]
 8000d42:	4611      	mov	r1, r2
 8000d44:	4a06      	ldr	r2, [pc, #24]	; (8000d60 <timeToMonth+0x58>)
 8000d46:	fb01 f202 	mul.w	r2, r1, r2
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d8e3      	bhi.n	8000d16 <timeToMonth+0xe>
    }

    return month;
 8000d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3714      	adds	r7, #20
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	08005eb4 	.word	0x08005eb4
 8000d60:	00015180 	.word	0x00015180

08000d64 <timeToDate>:


//============== PUBLIC FUNCTIONS ==========================

bool timeToDate(timestamp_t timestamp, char *dateStr)
{
 8000d64:	b5b0      	push	{r4, r5, r7, lr}
 8000d66:	b08a      	sub	sp, #40	; 0x28
 8000d68:	af04      	add	r7, sp, #16
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	6039      	str	r1, [r7, #0]
    date_t date;
    int isOk;

    timestamp = timestamp + (GMT_REGION * ONE_HOUR); //correction for GMT
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	f503 6361 	add.w	r3, r3, #3600	; 0xe10
 8000d74:	607b      	str	r3, [r7, #4]

    if(dateStr == NULL) return false;
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d101      	bne.n	8000d80 <timeToDate+0x1c>
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	e05d      	b.n	8000e3c <timeToDate+0xd8>

    date.Year = timeToYear(&timestamp);
 8000d80:	1d3b      	adds	r3, r7, #4
 8000d82:	4618      	mov	r0, r3
 8000d84:	f7ff ff6e 	bl	8000c64 <timeToYear>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	737b      	strb	r3, [r7, #13]
    date.Month = timeToMonth(&timestamp);
 8000d8c:	1d3b      	adds	r3, r7, #4
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff ffba 	bl	8000d08 <timeToMonth>
 8000d94:	4603      	mov	r3, r0
 8000d96:	733b      	strb	r3, [r7, #12]

   //calculate day
    uint8_t day = timestamp / ONE_DAY;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	4a2a      	ldr	r2, [pc, #168]	; (8000e44 <timeToDate+0xe0>)
 8000d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8000da0:	0c1b      	lsrs	r3, r3, #16
 8000da2:	75fb      	strb	r3, [r7, #23]
    date.Day = day + 1 ; //days are starting from 1st
 8000da4:	7dfb      	ldrb	r3, [r7, #23]
 8000da6:	3301      	adds	r3, #1
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	72fb      	strb	r3, [r7, #11]
    timestamp -= day * ONE_DAY;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	7dfa      	ldrb	r2, [r7, #23]
 8000db0:	4925      	ldr	r1, [pc, #148]	; (8000e48 <timeToDate+0xe4>)
 8000db2:	fb01 f202 	mul.w	r2, r1, r2
 8000db6:	1a9b      	subs	r3, r3, r2
 8000db8:	607b      	str	r3, [r7, #4]

    //calculate hour
    uint8_t hour = timestamp / ONE_HOUR;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4a23      	ldr	r2, [pc, #140]	; (8000e4c <timeToDate+0xe8>)
 8000dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8000dc2:	0adb      	lsrs	r3, r3, #11
 8000dc4:	75bb      	strb	r3, [r7, #22]
    date.Hour = hour;
 8000dc6:	7dbb      	ldrb	r3, [r7, #22]
 8000dc8:	723b      	strb	r3, [r7, #8]
    timestamp -= hour * ONE_HOUR;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	7dba      	ldrb	r2, [r7, #22]
 8000dce:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8000dd2:	fb01 f202 	mul.w	r2, r1, r2
 8000dd6:	1a9b      	subs	r3, r3, r2
 8000dd8:	607b      	str	r3, [r7, #4]

    //calculate minute
    uint8_t minute = timestamp / 60;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4a1c      	ldr	r2, [pc, #112]	; (8000e50 <timeToDate+0xec>)
 8000dde:	fba2 2303 	umull	r2, r3, r2, r3
 8000de2:	095b      	lsrs	r3, r3, #5
 8000de4:	757b      	strb	r3, [r7, #21]
    date.Minutes = minute;
 8000de6:	7d7b      	ldrb	r3, [r7, #21]
 8000de8:	727b      	strb	r3, [r7, #9]
    timestamp -= minute * 60;
 8000dea:	6879      	ldr	r1, [r7, #4]
 8000dec:	7d7a      	ldrb	r2, [r7, #21]
 8000dee:	4613      	mov	r3, r2
 8000df0:	011b      	lsls	r3, r3, #4
 8000df2:	1a9b      	subs	r3, r3, r2
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	1acb      	subs	r3, r1, r3
 8000df8:	607b      	str	r3, [r7, #4]

    //seconds
    date.Seconds = timestamp;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	72bb      	strb	r3, [r7, #10]


    isOk = sprintf(dateStr, "%02d %s %4d %02d:%02d:%02d", date.Day , monthNames[date.Month], date.Year + 1970, date.Hour, date.Minutes, date.Seconds); //we are starting from 1st day
 8000e00:	7afb      	ldrb	r3, [r7, #11]
 8000e02:	461d      	mov	r5, r3
 8000e04:	7b3b      	ldrb	r3, [r7, #12]
 8000e06:	461a      	mov	r2, r3
 8000e08:	4b12      	ldr	r3, [pc, #72]	; (8000e54 <timeToDate+0xf0>)
 8000e0a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000e0e:	7b7b      	ldrb	r3, [r7, #13]
 8000e10:	f203 73b2 	addw	r3, r3, #1970	; 0x7b2
 8000e14:	7a39      	ldrb	r1, [r7, #8]
 8000e16:	7a78      	ldrb	r0, [r7, #9]
 8000e18:	7abc      	ldrb	r4, [r7, #10]
 8000e1a:	9403      	str	r4, [sp, #12]
 8000e1c:	9002      	str	r0, [sp, #8]
 8000e1e:	9101      	str	r1, [sp, #4]
 8000e20:	9300      	str	r3, [sp, #0]
 8000e22:	4613      	mov	r3, r2
 8000e24:	462a      	mov	r2, r5
 8000e26:	490c      	ldr	r1, [pc, #48]	; (8000e58 <timeToDate+0xf4>)
 8000e28:	6838      	ldr	r0, [r7, #0]
 8000e2a:	f002 fcfb 	bl	8003824 <siprintf>
 8000e2e:	6138      	str	r0, [r7, #16]

    if(isOk == 0) return false;
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d101      	bne.n	8000e3a <timeToDate+0xd6>
 8000e36:	2300      	movs	r3, #0
 8000e38:	e000      	b.n	8000e3c <timeToDate+0xd8>

    return true;
 8000e3a:	2301      	movs	r3, #1
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3718      	adds	r7, #24
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bdb0      	pop	{r4, r5, r7, pc}
 8000e44:	c22e4507 	.word	0xc22e4507
 8000e48:	00015180 	.word	0x00015180
 8000e4c:	91a2b3c5 	.word	0x91a2b3c5
 8000e50:	88888889 	.word	0x88888889
 8000e54:	08005ec0 	.word	0x08005ec0
 8000e58:	08005e8c 	.word	0x08005e8c

08000e5c <timeToWeekday>:

bool timeToWeekday(timestamp_t timestamp, weekday_t *day)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	6039      	str	r1, [r7, #0]
	uint32_t current = 3; // 1st Jan 1970 was thursday
 8000e66:	2303      	movs	r3, #3
 8000e68:	60fb      	str	r3, [r7, #12]

	timestamp = timestamp + (GMT_REGION * ONE_HOUR); //correction for GMT
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	f503 6361 	add.w	r3, r3, #3600	; 0xe10
 8000e70:	607b      	str	r3, [r7, #4]

	uint32_t days = timestamp / ONE_DAY;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a11      	ldr	r2, [pc, #68]	; (8000ebc <timeToWeekday+0x60>)
 8000e76:	fba2 2303 	umull	r2, r3, r2, r3
 8000e7a:	0c1b      	lsrs	r3, r3, #16
 8000e7c:	60bb      	str	r3, [r7, #8]
	current = (current + days)%7;
 8000e7e:	68fa      	ldr	r2, [r7, #12]
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	441a      	add	r2, r3
 8000e84:	4b0e      	ldr	r3, [pc, #56]	; (8000ec0 <timeToWeekday+0x64>)
 8000e86:	fba3 1302 	umull	r1, r3, r3, r2
 8000e8a:	1ad1      	subs	r1, r2, r3
 8000e8c:	0849      	lsrs	r1, r1, #1
 8000e8e:	440b      	add	r3, r1
 8000e90:	0899      	lsrs	r1, r3, #2
 8000e92:	460b      	mov	r3, r1
 8000e94:	00db      	lsls	r3, r3, #3
 8000e96:	1a5b      	subs	r3, r3, r1
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	60fb      	str	r3, [r7, #12]

	if(day == NULL) return false;
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d101      	bne.n	8000ea6 <timeToWeekday+0x4a>
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	e004      	b.n	8000eb0 <timeToWeekday+0x54>
	*day = (weekday_t)current;
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	b2da      	uxtb	r2, r3
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	701a      	strb	r2, [r3, #0]

    return true;
 8000eae:	2301      	movs	r3, #1
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3714      	adds	r7, #20
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	c22e4507 	.word	0xc22e4507
 8000ec0:	24924925 	.word	0x24924925

08000ec4 <dateToTime>:

bool dateToTime(const date_t *date, timestamp_t *timestamp)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b087      	sub	sp, #28
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6039      	str	r1, [r7, #0]
    timestamp_t seconds = 0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	617b      	str	r3, [r7, #20]

    if((date == NULL) || (timestamp == NULL)) return false;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d002      	beq.n	8000ede <dateToTime+0x1a>
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d101      	bne.n	8000ee2 <dateToTime+0x1e>
 8000ede:	2300      	movs	r3, #0
 8000ee0:	e07a      	b.n	8000fd8 <dateToTime+0x114>

    //year
    uint32_t secondsInYear = 365 * ONE_DAY;
 8000ee2:	4b40      	ldr	r3, [pc, #256]	; (8000fe4 <dateToTime+0x120>)
 8000ee4:	60fb      	str	r3, [r7, #12]

    for(uint16_t i = 1970; i < (date->Year + 1970); i++)
 8000ee6:	f240 73b2 	movw	r3, #1970	; 0x7b2
 8000eea:	827b      	strh	r3, [r7, #18]
 8000eec:	e02d      	b.n	8000f4a <dateToTime+0x86>
    {
        if(((i % 4) == 0) && !((i % 100) == 0)) //divided by 4 and no divided by 100
 8000eee:	8a7b      	ldrh	r3, [r7, #18]
 8000ef0:	f003 0303 	and.w	r3, r3, #3
 8000ef4:	b29b      	uxth	r3, r3
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d10f      	bne.n	8000f1a <dateToTime+0x56>
 8000efa:	8a7b      	ldrh	r3, [r7, #18]
 8000efc:	4a3a      	ldr	r2, [pc, #232]	; (8000fe8 <dateToTime+0x124>)
 8000efe:	fba2 1203 	umull	r1, r2, r2, r3
 8000f02:	0952      	lsrs	r2, r2, #5
 8000f04:	2164      	movs	r1, #100	; 0x64
 8000f06:	fb01 f202 	mul.w	r2, r1, r2
 8000f0a:	1a9b      	subs	r3, r3, r2
 8000f0c:	b29b      	uxth	r3, r3
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d003      	beq.n	8000f1a <dateToTime+0x56>
        {
            seconds += ONE_DAY;
 8000f12:	697a      	ldr	r2, [r7, #20]
 8000f14:	4b35      	ldr	r3, [pc, #212]	; (8000fec <dateToTime+0x128>)
 8000f16:	4413      	add	r3, r2
 8000f18:	617b      	str	r3, [r7, #20]
        }
        if((i % 400) == 0) //divided by 400
 8000f1a:	8a7b      	ldrh	r3, [r7, #18]
 8000f1c:	4a32      	ldr	r2, [pc, #200]	; (8000fe8 <dateToTime+0x124>)
 8000f1e:	fba2 1203 	umull	r1, r2, r2, r3
 8000f22:	09d2      	lsrs	r2, r2, #7
 8000f24:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000f28:	fb01 f202 	mul.w	r2, r1, r2
 8000f2c:	1a9b      	subs	r3, r3, r2
 8000f2e:	b29b      	uxth	r3, r3
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d103      	bne.n	8000f3c <dateToTime+0x78>
        {
            seconds += ONE_DAY;
 8000f34:	697a      	ldr	r2, [r7, #20]
 8000f36:	4b2d      	ldr	r3, [pc, #180]	; (8000fec <dateToTime+0x128>)
 8000f38:	4413      	add	r3, r2
 8000f3a:	617b      	str	r3, [r7, #20]
        }
        seconds += secondsInYear;
 8000f3c:	697a      	ldr	r2, [r7, #20]
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	4413      	add	r3, r2
 8000f42:	617b      	str	r3, [r7, #20]
    for(uint16_t i = 1970; i < (date->Year + 1970); i++)
 8000f44:	8a7b      	ldrh	r3, [r7, #18]
 8000f46:	3301      	adds	r3, #1
 8000f48:	827b      	strh	r3, [r7, #18]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	795b      	ldrb	r3, [r3, #5]
 8000f4e:	f203 72b1 	addw	r2, r3, #1969	; 0x7b1
 8000f52:	8a7b      	ldrh	r3, [r7, #18]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	daca      	bge.n	8000eee <dateToTime+0x2a>
    }

    //months
    for(uint8_t i = 0; i < date->Month; i++)
 8000f58:	2300      	movs	r3, #0
 8000f5a:	747b      	strb	r3, [r7, #17]
 8000f5c:	e00d      	b.n	8000f7a <dateToTime+0xb6>
    {
        seconds += dayInMonth[i] * ONE_DAY;
 8000f5e:	7c7b      	ldrb	r3, [r7, #17]
 8000f60:	4a23      	ldr	r2, [pc, #140]	; (8000ff0 <dateToTime+0x12c>)
 8000f62:	5cd3      	ldrb	r3, [r2, r3]
 8000f64:	461a      	mov	r2, r3
 8000f66:	4b21      	ldr	r3, [pc, #132]	; (8000fec <dateToTime+0x128>)
 8000f68:	fb02 f303 	mul.w	r3, r2, r3
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	4413      	add	r3, r2
 8000f72:	617b      	str	r3, [r7, #20]
    for(uint8_t i = 0; i < date->Month; i++)
 8000f74:	7c7b      	ldrb	r3, [r7, #17]
 8000f76:	3301      	adds	r3, #1
 8000f78:	747b      	strb	r3, [r7, #17]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	791b      	ldrb	r3, [r3, #4]
 8000f7e:	7c7a      	ldrb	r2, [r7, #17]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d3ec      	bcc.n	8000f5e <dateToTime+0x9a>
    }

    //days
    seconds += date->Day * ONE_DAY - ONE_DAY; //date.day is counted from 1st
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	78db      	ldrb	r3, [r3, #3]
 8000f88:	3b01      	subs	r3, #1
 8000f8a:	4a18      	ldr	r2, [pc, #96]	; (8000fec <dateToTime+0x128>)
 8000f8c:	fb02 f303 	mul.w	r3, r2, r3
 8000f90:	461a      	mov	r2, r3
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	4413      	add	r3, r2
 8000f96:	617b      	str	r3, [r7, #20]
    //hours
    seconds += date->Hour * ONE_HOUR;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8000fa2:	fb02 f303 	mul.w	r3, r2, r3
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	4413      	add	r3, r2
 8000fac:	617b      	str	r3, [r7, #20]
    //minutes
    seconds += date->Minutes * 60;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	785b      	ldrb	r3, [r3, #1]
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	011b      	lsls	r3, r3, #4
 8000fb8:	1a9b      	subs	r3, r3, r2
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	617b      	str	r3, [r7, #20]
    //seconds
    seconds += date->Seconds;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	789b      	ldrb	r3, [r3, #2]
 8000fc8:	461a      	mov	r2, r3
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	4413      	add	r3, r2
 8000fce:	617b      	str	r3, [r7, #20]
    *timestamp = seconds;
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	697a      	ldr	r2, [r7, #20]
 8000fd4:	601a      	str	r2, [r3, #0]

    return true;
 8000fd6:	2301      	movs	r3, #1
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	371c      	adds	r7, #28
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	01e13380 	.word	0x01e13380
 8000fe8:	51eb851f 	.word	0x51eb851f
 8000fec:	00015180 	.word	0x00015180
 8000ff0:	08005eb4 	.word	0x08005eb4

08000ff4 <dayBetweenTimes>:

bool dayBetweenTimes(timestamp_t time_A, timestamp_t time_B, uint16_t *days)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b087      	sub	sp, #28
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	607a      	str	r2, [r7, #4]
	if(days == NULL) return false;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d101      	bne.n	800100a <dayBetweenTimes+0x16>
 8001006:	2300      	movs	r3, #0
 8001008:	e00f      	b.n	800102a <dayBetweenTimes+0x36>

	uint32_t delta = abs((int)(time_A - time_B));
 800100a:	68fa      	ldr	r2, [r7, #12]
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	1ad3      	subs	r3, r2, r3
 8001010:	2b00      	cmp	r3, #0
 8001012:	bfb8      	it	lt
 8001014:	425b      	neglt	r3, r3
 8001016:	617b      	str	r3, [r7, #20]

	*days = delta / ONE_DAY;
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	4a07      	ldr	r2, [pc, #28]	; (8001038 <dayBetweenTimes+0x44>)
 800101c:	fba2 2303 	umull	r2, r3, r2, r3
 8001020:	0c1b      	lsrs	r3, r3, #16
 8001022:	b29a      	uxth	r2, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	801a      	strh	r2, [r3, #0]
    return true;
 8001028:	2301      	movs	r3, #1
}
 800102a:	4618      	mov	r0, r3
 800102c:	371c      	adds	r7, #28
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	c22e4507 	.word	0xc22e4507

0800103c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001042:	4b0f      	ldr	r3, [pc, #60]	; (8001080 <HAL_MspInit+0x44>)
 8001044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001046:	4a0e      	ldr	r2, [pc, #56]	; (8001080 <HAL_MspInit+0x44>)
 8001048:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800104c:	6413      	str	r3, [r2, #64]	; 0x40
 800104e:	4b0c      	ldr	r3, [pc, #48]	; (8001080 <HAL_MspInit+0x44>)
 8001050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001056:	607b      	str	r3, [r7, #4]
 8001058:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105a:	4b09      	ldr	r3, [pc, #36]	; (8001080 <HAL_MspInit+0x44>)
 800105c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105e:	4a08      	ldr	r2, [pc, #32]	; (8001080 <HAL_MspInit+0x44>)
 8001060:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001064:	6453      	str	r3, [r2, #68]	; 0x44
 8001066:	4b06      	ldr	r3, [pc, #24]	; (8001080 <HAL_MspInit+0x44>)
 8001068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800106e:	603b      	str	r3, [r7, #0]
 8001070:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001072:	bf00      	nop
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	40023800 	.word	0x40023800

08001084 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001088:	e7fe      	b.n	8001088 <NMI_Handler+0x4>

0800108a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800108a:	b480      	push	{r7}
 800108c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800108e:	e7fe      	b.n	800108e <HardFault_Handler+0x4>

08001090 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001094:	e7fe      	b.n	8001094 <MemManage_Handler+0x4>

08001096 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001096:	b480      	push	{r7}
 8001098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800109a:	e7fe      	b.n	800109a <BusFault_Handler+0x4>

0800109c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010a0:	e7fe      	b.n	80010a0 <UsageFault_Handler+0x4>

080010a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010a2:	b480      	push	{r7}
 80010a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010be:	b480      	push	{r7}
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010d0:	f000 f9d0 	bl	8001474 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  return 1;
 80010dc:	2301      	movs	r3, #1
}
 80010de:	4618      	mov	r0, r3
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <_kill>:

int _kill(int pid, int sig)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80010f2:	f003 f837 	bl	8004164 <__errno>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2216      	movs	r2, #22
 80010fa:	601a      	str	r2, [r3, #0]
  return -1;
 80010fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001100:	4618      	mov	r0, r3
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <_exit>:

void _exit (int status)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001110:	f04f 31ff 	mov.w	r1, #4294967295
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f7ff ffe7 	bl	80010e8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800111a:	e7fe      	b.n	800111a <_exit+0x12>

0800111c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001128:	2300      	movs	r3, #0
 800112a:	617b      	str	r3, [r7, #20]
 800112c:	e00a      	b.n	8001144 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800112e:	f3af 8000 	nop.w
 8001132:	4601      	mov	r1, r0
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	1c5a      	adds	r2, r3, #1
 8001138:	60ba      	str	r2, [r7, #8]
 800113a:	b2ca      	uxtb	r2, r1
 800113c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	3301      	adds	r3, #1
 8001142:	617b      	str	r3, [r7, #20]
 8001144:	697a      	ldr	r2, [r7, #20]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	429a      	cmp	r2, r3
 800114a:	dbf0      	blt.n	800112e <_read+0x12>
  }

  return len;
 800114c:	687b      	ldr	r3, [r7, #4]
}
 800114e:	4618      	mov	r0, r3
 8001150:	3718      	adds	r7, #24
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b086      	sub	sp, #24
 800115a:	af00      	add	r7, sp, #0
 800115c:	60f8      	str	r0, [r7, #12]
 800115e:	60b9      	str	r1, [r7, #8]
 8001160:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001162:	2300      	movs	r3, #0
 8001164:	617b      	str	r3, [r7, #20]
 8001166:	e009      	b.n	800117c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	1c5a      	adds	r2, r3, #1
 800116c:	60ba      	str	r2, [r7, #8]
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	4618      	mov	r0, r3
 8001172:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	3301      	adds	r3, #1
 800117a:	617b      	str	r3, [r7, #20]
 800117c:	697a      	ldr	r2, [r7, #20]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	429a      	cmp	r2, r3
 8001182:	dbf1      	blt.n	8001168 <_write+0x12>
  }
  return len;
 8001184:	687b      	ldr	r3, [r7, #4]
}
 8001186:	4618      	mov	r0, r3
 8001188:	3718      	adds	r7, #24
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <_close>:

int _close(int file)
{
 800118e:	b480      	push	{r7}
 8001190:	b083      	sub	sp, #12
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001196:	f04f 33ff 	mov.w	r3, #4294967295
}
 800119a:	4618      	mov	r0, r3
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr

080011a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011a6:	b480      	push	{r7}
 80011a8:	b083      	sub	sp, #12
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
 80011ae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011b6:	605a      	str	r2, [r3, #4]
  return 0;
 80011b8:	2300      	movs	r3, #0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr

080011c6 <_isatty>:

int _isatty(int file)
{
 80011c6:	b480      	push	{r7}
 80011c8:	b083      	sub	sp, #12
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011ce:	2301      	movs	r3, #1
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3714      	adds	r7, #20
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
	...

080011f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001200:	4a14      	ldr	r2, [pc, #80]	; (8001254 <_sbrk+0x5c>)
 8001202:	4b15      	ldr	r3, [pc, #84]	; (8001258 <_sbrk+0x60>)
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800120c:	4b13      	ldr	r3, [pc, #76]	; (800125c <_sbrk+0x64>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d102      	bne.n	800121a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001214:	4b11      	ldr	r3, [pc, #68]	; (800125c <_sbrk+0x64>)
 8001216:	4a12      	ldr	r2, [pc, #72]	; (8001260 <_sbrk+0x68>)
 8001218:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800121a:	4b10      	ldr	r3, [pc, #64]	; (800125c <_sbrk+0x64>)
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4413      	add	r3, r2
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	429a      	cmp	r2, r3
 8001226:	d207      	bcs.n	8001238 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001228:	f002 ff9c 	bl	8004164 <__errno>
 800122c:	4603      	mov	r3, r0
 800122e:	220c      	movs	r2, #12
 8001230:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001232:	f04f 33ff 	mov.w	r3, #4294967295
 8001236:	e009      	b.n	800124c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001238:	4b08      	ldr	r3, [pc, #32]	; (800125c <_sbrk+0x64>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800123e:	4b07      	ldr	r3, [pc, #28]	; (800125c <_sbrk+0x64>)
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4413      	add	r3, r2
 8001246:	4a05      	ldr	r2, [pc, #20]	; (800125c <_sbrk+0x64>)
 8001248:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800124a:	68fb      	ldr	r3, [r7, #12]
}
 800124c:	4618      	mov	r0, r3
 800124e:	3718      	adds	r7, #24
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	20080000 	.word	0x20080000
 8001258:	00000400 	.word	0x00000400
 800125c:	200000f0 	.word	0x200000f0
 8001260:	200002f0 	.word	0x200002f0

08001264 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001268:	4b06      	ldr	r3, [pc, #24]	; (8001284 <SystemInit+0x20>)
 800126a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800126e:	4a05      	ldr	r2, [pc, #20]	; (8001284 <SystemInit+0x20>)
 8001270:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001274:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	e000ed00 	.word	0xe000ed00

08001288 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800128c:	4b14      	ldr	r3, [pc, #80]	; (80012e0 <MX_USART3_UART_Init+0x58>)
 800128e:	4a15      	ldr	r2, [pc, #84]	; (80012e4 <MX_USART3_UART_Init+0x5c>)
 8001290:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001292:	4b13      	ldr	r3, [pc, #76]	; (80012e0 <MX_USART3_UART_Init+0x58>)
 8001294:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001298:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800129a:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <MX_USART3_UART_Init+0x58>)
 800129c:	2200      	movs	r2, #0
 800129e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012a0:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <MX_USART3_UART_Init+0x58>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012a6:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <MX_USART3_UART_Init+0x58>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012ac:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <MX_USART3_UART_Init+0x58>)
 80012ae:	220c      	movs	r2, #12
 80012b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012b2:	4b0b      	ldr	r3, [pc, #44]	; (80012e0 <MX_USART3_UART_Init+0x58>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012b8:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <MX_USART3_UART_Init+0x58>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012be:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <MX_USART3_UART_Init+0x58>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012c4:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <MX_USART3_UART_Init+0x58>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80012ca:	4805      	ldr	r0, [pc, #20]	; (80012e0 <MX_USART3_UART_Init+0x58>)
 80012cc:	f001 fd0e 	bl	8002cec <HAL_UART_Init>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80012d6:	f7ff fcbf 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	200000f4 	.word	0x200000f4
 80012e4:	40004800 	.word	0x40004800

080012e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b0ae      	sub	sp, #184	; 0xb8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]
 80012fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001300:	f107 0314 	add.w	r3, r7, #20
 8001304:	2290      	movs	r2, #144	; 0x90
 8001306:	2100      	movs	r1, #0
 8001308:	4618      	mov	r0, r3
 800130a:	f002 faf0 	bl	80038ee <memset>
  if(uartHandle->Instance==USART3)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a22      	ldr	r2, [pc, #136]	; (800139c <HAL_UART_MspInit+0xb4>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d13c      	bne.n	8001392 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001318:	f44f 7380 	mov.w	r3, #256	; 0x100
 800131c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800131e:	2300      	movs	r3, #0
 8001320:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001322:	f107 0314 	add.w	r3, r7, #20
 8001326:	4618      	mov	r0, r3
 8001328:	f001 f8b8 	bl	800249c <HAL_RCCEx_PeriphCLKConfig>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001332:	f7ff fc91 	bl	8000c58 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001336:	4b1a      	ldr	r3, [pc, #104]	; (80013a0 <HAL_UART_MspInit+0xb8>)
 8001338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133a:	4a19      	ldr	r2, [pc, #100]	; (80013a0 <HAL_UART_MspInit+0xb8>)
 800133c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001340:	6413      	str	r3, [r2, #64]	; 0x40
 8001342:	4b17      	ldr	r3, [pc, #92]	; (80013a0 <HAL_UART_MspInit+0xb8>)
 8001344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001346:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800134a:	613b      	str	r3, [r7, #16]
 800134c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800134e:	4b14      	ldr	r3, [pc, #80]	; (80013a0 <HAL_UART_MspInit+0xb8>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	4a13      	ldr	r2, [pc, #76]	; (80013a0 <HAL_UART_MspInit+0xb8>)
 8001354:	f043 0308 	orr.w	r3, r3, #8
 8001358:	6313      	str	r3, [r2, #48]	; 0x30
 800135a:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <HAL_UART_MspInit+0xb8>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	f003 0308 	and.w	r3, r3, #8
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001366:	f44f 7340 	mov.w	r3, #768	; 0x300
 800136a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136e:	2302      	movs	r3, #2
 8001370:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800137a:	2303      	movs	r3, #3
 800137c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001380:	2307      	movs	r3, #7
 8001382:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001386:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800138a:	4619      	mov	r1, r3
 800138c:	4805      	ldr	r0, [pc, #20]	; (80013a4 <HAL_UART_MspInit+0xbc>)
 800138e:	f000 f99b 	bl	80016c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001392:	bf00      	nop
 8001394:	37b8      	adds	r7, #184	; 0xb8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40004800 	.word	0x40004800
 80013a0:	40023800 	.word	0x40023800
 80013a4:	40020c00 	.word	0x40020c00

080013a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013ac:	480d      	ldr	r0, [pc, #52]	; (80013e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013ae:	490e      	ldr	r1, [pc, #56]	; (80013e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013b0:	4a0e      	ldr	r2, [pc, #56]	; (80013ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013b4:	e002      	b.n	80013bc <LoopCopyDataInit>

080013b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ba:	3304      	adds	r3, #4

080013bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013c0:	d3f9      	bcc.n	80013b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013c2:	4a0b      	ldr	r2, [pc, #44]	; (80013f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013c4:	4c0b      	ldr	r4, [pc, #44]	; (80013f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80013c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013c8:	e001      	b.n	80013ce <LoopFillZerobss>

080013ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013cc:	3204      	adds	r2, #4

080013ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013d0:	d3fb      	bcc.n	80013ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013d2:	f7ff ff47 	bl	8001264 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013d6:	f002 fecb 	bl	8004170 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013da:	f7ff fa07 	bl	80007ec <main>
  bx  lr    
 80013de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013e0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80013e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013e8:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 80013ec:	080061c4 	.word	0x080061c4
  ldr r2, =_sbss
 80013f0:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 80013f4:	200002f0 	.word	0x200002f0

080013f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013f8:	e7fe      	b.n	80013f8 <ADC_IRQHandler>

080013fa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013fe:	2003      	movs	r0, #3
 8001400:	f000 f92e 	bl	8001660 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001404:	2000      	movs	r0, #0
 8001406:	f000 f805 	bl	8001414 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800140a:	f7ff fe17 	bl	800103c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800140e:	2300      	movs	r3, #0
}
 8001410:	4618      	mov	r0, r3
 8001412:	bd80      	pop	{r7, pc}

08001414 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800141c:	4b12      	ldr	r3, [pc, #72]	; (8001468 <HAL_InitTick+0x54>)
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	4b12      	ldr	r3, [pc, #72]	; (800146c <HAL_InitTick+0x58>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	4619      	mov	r1, r3
 8001426:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800142a:	fbb3 f3f1 	udiv	r3, r3, r1
 800142e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001432:	4618      	mov	r0, r3
 8001434:	f000 f93b 	bl	80016ae <HAL_SYSTICK_Config>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e00e      	b.n	8001460 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2b0f      	cmp	r3, #15
 8001446:	d80a      	bhi.n	800145e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001448:	2200      	movs	r2, #0
 800144a:	6879      	ldr	r1, [r7, #4]
 800144c:	f04f 30ff 	mov.w	r0, #4294967295
 8001450:	f000 f911 	bl	8001676 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001454:	4a06      	ldr	r2, [pc, #24]	; (8001470 <HAL_InitTick+0x5c>)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800145a:	2300      	movs	r3, #0
 800145c:	e000      	b.n	8001460 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
}
 8001460:	4618      	mov	r0, r3
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	20000004 	.word	0x20000004
 800146c:	2000000c 	.word	0x2000000c
 8001470:	20000008 	.word	0x20000008

08001474 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001478:	4b06      	ldr	r3, [pc, #24]	; (8001494 <HAL_IncTick+0x20>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	461a      	mov	r2, r3
 800147e:	4b06      	ldr	r3, [pc, #24]	; (8001498 <HAL_IncTick+0x24>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4413      	add	r3, r2
 8001484:	4a04      	ldr	r2, [pc, #16]	; (8001498 <HAL_IncTick+0x24>)
 8001486:	6013      	str	r3, [r2, #0]
}
 8001488:	bf00      	nop
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	2000000c 	.word	0x2000000c
 8001498:	2000017c 	.word	0x2000017c

0800149c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  return uwTick;
 80014a0:	4b03      	ldr	r3, [pc, #12]	; (80014b0 <HAL_GetTick+0x14>)
 80014a2:	681b      	ldr	r3, [r3, #0]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	2000017c 	.word	0x2000017c

080014b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014bc:	f7ff ffee 	bl	800149c <HAL_GetTick>
 80014c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014cc:	d005      	beq.n	80014da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014ce:	4b0a      	ldr	r3, [pc, #40]	; (80014f8 <HAL_Delay+0x44>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	461a      	mov	r2, r3
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	4413      	add	r3, r2
 80014d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014da:	bf00      	nop
 80014dc:	f7ff ffde 	bl	800149c <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	68fa      	ldr	r2, [r7, #12]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d8f7      	bhi.n	80014dc <HAL_Delay+0x28>
  {
  }
}
 80014ec:	bf00      	nop
 80014ee:	bf00      	nop
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	2000000c 	.word	0x2000000c

080014fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f003 0307 	and.w	r3, r3, #7
 800150a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800150c:	4b0b      	ldr	r3, [pc, #44]	; (800153c <__NVIC_SetPriorityGrouping+0x40>)
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001512:	68ba      	ldr	r2, [r7, #8]
 8001514:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001518:	4013      	ands	r3, r2
 800151a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001524:	4b06      	ldr	r3, [pc, #24]	; (8001540 <__NVIC_SetPriorityGrouping+0x44>)
 8001526:	4313      	orrs	r3, r2
 8001528:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800152a:	4a04      	ldr	r2, [pc, #16]	; (800153c <__NVIC_SetPriorityGrouping+0x40>)
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	60d3      	str	r3, [r2, #12]
}
 8001530:	bf00      	nop
 8001532:	3714      	adds	r7, #20
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	e000ed00 	.word	0xe000ed00
 8001540:	05fa0000 	.word	0x05fa0000

08001544 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001548:	4b04      	ldr	r3, [pc, #16]	; (800155c <__NVIC_GetPriorityGrouping+0x18>)
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	0a1b      	lsrs	r3, r3, #8
 800154e:	f003 0307 	and.w	r3, r3, #7
}
 8001552:	4618      	mov	r0, r3
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	e000ed00 	.word	0xe000ed00

08001560 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	6039      	str	r1, [r7, #0]
 800156a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800156c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001570:	2b00      	cmp	r3, #0
 8001572:	db0a      	blt.n	800158a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	b2da      	uxtb	r2, r3
 8001578:	490c      	ldr	r1, [pc, #48]	; (80015ac <__NVIC_SetPriority+0x4c>)
 800157a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157e:	0112      	lsls	r2, r2, #4
 8001580:	b2d2      	uxtb	r2, r2
 8001582:	440b      	add	r3, r1
 8001584:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001588:	e00a      	b.n	80015a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	b2da      	uxtb	r2, r3
 800158e:	4908      	ldr	r1, [pc, #32]	; (80015b0 <__NVIC_SetPriority+0x50>)
 8001590:	79fb      	ldrb	r3, [r7, #7]
 8001592:	f003 030f 	and.w	r3, r3, #15
 8001596:	3b04      	subs	r3, #4
 8001598:	0112      	lsls	r2, r2, #4
 800159a:	b2d2      	uxtb	r2, r2
 800159c:	440b      	add	r3, r1
 800159e:	761a      	strb	r2, [r3, #24]
}
 80015a0:	bf00      	nop
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr
 80015ac:	e000e100 	.word	0xe000e100
 80015b0:	e000ed00 	.word	0xe000ed00

080015b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b089      	sub	sp, #36	; 0x24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f003 0307 	and.w	r3, r3, #7
 80015c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	f1c3 0307 	rsb	r3, r3, #7
 80015ce:	2b04      	cmp	r3, #4
 80015d0:	bf28      	it	cs
 80015d2:	2304      	movcs	r3, #4
 80015d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	3304      	adds	r3, #4
 80015da:	2b06      	cmp	r3, #6
 80015dc:	d902      	bls.n	80015e4 <NVIC_EncodePriority+0x30>
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	3b03      	subs	r3, #3
 80015e2:	e000      	b.n	80015e6 <NVIC_EncodePriority+0x32>
 80015e4:	2300      	movs	r3, #0
 80015e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e8:	f04f 32ff 	mov.w	r2, #4294967295
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	fa02 f303 	lsl.w	r3, r2, r3
 80015f2:	43da      	mvns	r2, r3
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	401a      	ands	r2, r3
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	fa01 f303 	lsl.w	r3, r1, r3
 8001606:	43d9      	mvns	r1, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800160c:	4313      	orrs	r3, r2
         );
}
 800160e:	4618      	mov	r0, r3
 8001610:	3724      	adds	r7, #36	; 0x24
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
	...

0800161c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	3b01      	subs	r3, #1
 8001628:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800162c:	d301      	bcc.n	8001632 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800162e:	2301      	movs	r3, #1
 8001630:	e00f      	b.n	8001652 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001632:	4a0a      	ldr	r2, [pc, #40]	; (800165c <SysTick_Config+0x40>)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	3b01      	subs	r3, #1
 8001638:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800163a:	210f      	movs	r1, #15
 800163c:	f04f 30ff 	mov.w	r0, #4294967295
 8001640:	f7ff ff8e 	bl	8001560 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001644:	4b05      	ldr	r3, [pc, #20]	; (800165c <SysTick_Config+0x40>)
 8001646:	2200      	movs	r2, #0
 8001648:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800164a:	4b04      	ldr	r3, [pc, #16]	; (800165c <SysTick_Config+0x40>)
 800164c:	2207      	movs	r2, #7
 800164e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	e000e010 	.word	0xe000e010

08001660 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f7ff ff47 	bl	80014fc <__NVIC_SetPriorityGrouping>
}
 800166e:	bf00      	nop
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001676:	b580      	push	{r7, lr}
 8001678:	b086      	sub	sp, #24
 800167a:	af00      	add	r7, sp, #0
 800167c:	4603      	mov	r3, r0
 800167e:	60b9      	str	r1, [r7, #8]
 8001680:	607a      	str	r2, [r7, #4]
 8001682:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001684:	2300      	movs	r3, #0
 8001686:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001688:	f7ff ff5c 	bl	8001544 <__NVIC_GetPriorityGrouping>
 800168c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	68b9      	ldr	r1, [r7, #8]
 8001692:	6978      	ldr	r0, [r7, #20]
 8001694:	f7ff ff8e 	bl	80015b4 <NVIC_EncodePriority>
 8001698:	4602      	mov	r2, r0
 800169a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800169e:	4611      	mov	r1, r2
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff ff5d 	bl	8001560 <__NVIC_SetPriority>
}
 80016a6:	bf00      	nop
 80016a8:	3718      	adds	r7, #24
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b082      	sub	sp, #8
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f7ff ffb0 	bl	800161c <SysTick_Config>
 80016bc:	4603      	mov	r3, r0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
	...

080016c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b089      	sub	sp, #36	; 0x24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80016d2:	2300      	movs	r3, #0
 80016d4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80016d6:	2300      	movs	r3, #0
 80016d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80016da:	2300      	movs	r3, #0
 80016dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80016de:	2300      	movs	r3, #0
 80016e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80016e2:	2300      	movs	r3, #0
 80016e4:	61fb      	str	r3, [r7, #28]
 80016e6:	e175      	b.n	80019d4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80016e8:	2201      	movs	r2, #1
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	697a      	ldr	r2, [r7, #20]
 80016f8:	4013      	ands	r3, r2
 80016fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016fc:	693a      	ldr	r2, [r7, #16]
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	429a      	cmp	r2, r3
 8001702:	f040 8164 	bne.w	80019ce <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f003 0303 	and.w	r3, r3, #3
 800170e:	2b01      	cmp	r3, #1
 8001710:	d005      	beq.n	800171e <HAL_GPIO_Init+0x56>
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f003 0303 	and.w	r3, r3, #3
 800171a:	2b02      	cmp	r3, #2
 800171c:	d130      	bne.n	8001780 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	2203      	movs	r2, #3
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	43db      	mvns	r3, r3
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	4013      	ands	r3, r2
 8001734:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	68da      	ldr	r2, [r3, #12]
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	4313      	orrs	r3, r2
 8001746:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	69ba      	ldr	r2, [r7, #24]
 800174c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001754:	2201      	movs	r2, #1
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	43db      	mvns	r3, r3
 800175e:	69ba      	ldr	r2, [r7, #24]
 8001760:	4013      	ands	r3, r2
 8001762:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	091b      	lsrs	r3, r3, #4
 800176a:	f003 0201 	and.w	r2, r3, #1
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	4313      	orrs	r3, r2
 8001778:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f003 0303 	and.w	r3, r3, #3
 8001788:	2b03      	cmp	r3, #3
 800178a:	d017      	beq.n	80017bc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	2203      	movs	r2, #3
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	43db      	mvns	r3, r3
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	4013      	ands	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	689a      	ldr	r2, [r3, #8]
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f003 0303 	and.w	r3, r3, #3
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d123      	bne.n	8001810 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	08da      	lsrs	r2, r3, #3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	3208      	adds	r2, #8
 80017d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	f003 0307 	and.w	r3, r3, #7
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	220f      	movs	r2, #15
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	43db      	mvns	r3, r3
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	4013      	ands	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	691a      	ldr	r2, [r3, #16]
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	f003 0307 	and.w	r3, r3, #7
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	4313      	orrs	r3, r2
 8001800:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	08da      	lsrs	r2, r3, #3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	3208      	adds	r2, #8
 800180a:	69b9      	ldr	r1, [r7, #24]
 800180c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	2203      	movs	r2, #3
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	43db      	mvns	r3, r3
 8001822:	69ba      	ldr	r2, [r7, #24]
 8001824:	4013      	ands	r3, r2
 8001826:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f003 0203 	and.w	r2, r3, #3
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	4313      	orrs	r3, r2
 800183c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800184c:	2b00      	cmp	r3, #0
 800184e:	f000 80be 	beq.w	80019ce <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001852:	4b66      	ldr	r3, [pc, #408]	; (80019ec <HAL_GPIO_Init+0x324>)
 8001854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001856:	4a65      	ldr	r2, [pc, #404]	; (80019ec <HAL_GPIO_Init+0x324>)
 8001858:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800185c:	6453      	str	r3, [r2, #68]	; 0x44
 800185e:	4b63      	ldr	r3, [pc, #396]	; (80019ec <HAL_GPIO_Init+0x324>)
 8001860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001862:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800186a:	4a61      	ldr	r2, [pc, #388]	; (80019f0 <HAL_GPIO_Init+0x328>)
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	089b      	lsrs	r3, r3, #2
 8001870:	3302      	adds	r3, #2
 8001872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001876:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	f003 0303 	and.w	r3, r3, #3
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	220f      	movs	r2, #15
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	43db      	mvns	r3, r3
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	4013      	ands	r3, r2
 800188c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a58      	ldr	r2, [pc, #352]	; (80019f4 <HAL_GPIO_Init+0x32c>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d037      	beq.n	8001906 <HAL_GPIO_Init+0x23e>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a57      	ldr	r2, [pc, #348]	; (80019f8 <HAL_GPIO_Init+0x330>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d031      	beq.n	8001902 <HAL_GPIO_Init+0x23a>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a56      	ldr	r2, [pc, #344]	; (80019fc <HAL_GPIO_Init+0x334>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d02b      	beq.n	80018fe <HAL_GPIO_Init+0x236>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a55      	ldr	r2, [pc, #340]	; (8001a00 <HAL_GPIO_Init+0x338>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d025      	beq.n	80018fa <HAL_GPIO_Init+0x232>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a54      	ldr	r2, [pc, #336]	; (8001a04 <HAL_GPIO_Init+0x33c>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d01f      	beq.n	80018f6 <HAL_GPIO_Init+0x22e>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a53      	ldr	r2, [pc, #332]	; (8001a08 <HAL_GPIO_Init+0x340>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d019      	beq.n	80018f2 <HAL_GPIO_Init+0x22a>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a52      	ldr	r2, [pc, #328]	; (8001a0c <HAL_GPIO_Init+0x344>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d013      	beq.n	80018ee <HAL_GPIO_Init+0x226>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4a51      	ldr	r2, [pc, #324]	; (8001a10 <HAL_GPIO_Init+0x348>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d00d      	beq.n	80018ea <HAL_GPIO_Init+0x222>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4a50      	ldr	r2, [pc, #320]	; (8001a14 <HAL_GPIO_Init+0x34c>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d007      	beq.n	80018e6 <HAL_GPIO_Init+0x21e>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a4f      	ldr	r2, [pc, #316]	; (8001a18 <HAL_GPIO_Init+0x350>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d101      	bne.n	80018e2 <HAL_GPIO_Init+0x21a>
 80018de:	2309      	movs	r3, #9
 80018e0:	e012      	b.n	8001908 <HAL_GPIO_Init+0x240>
 80018e2:	230a      	movs	r3, #10
 80018e4:	e010      	b.n	8001908 <HAL_GPIO_Init+0x240>
 80018e6:	2308      	movs	r3, #8
 80018e8:	e00e      	b.n	8001908 <HAL_GPIO_Init+0x240>
 80018ea:	2307      	movs	r3, #7
 80018ec:	e00c      	b.n	8001908 <HAL_GPIO_Init+0x240>
 80018ee:	2306      	movs	r3, #6
 80018f0:	e00a      	b.n	8001908 <HAL_GPIO_Init+0x240>
 80018f2:	2305      	movs	r3, #5
 80018f4:	e008      	b.n	8001908 <HAL_GPIO_Init+0x240>
 80018f6:	2304      	movs	r3, #4
 80018f8:	e006      	b.n	8001908 <HAL_GPIO_Init+0x240>
 80018fa:	2303      	movs	r3, #3
 80018fc:	e004      	b.n	8001908 <HAL_GPIO_Init+0x240>
 80018fe:	2302      	movs	r3, #2
 8001900:	e002      	b.n	8001908 <HAL_GPIO_Init+0x240>
 8001902:	2301      	movs	r3, #1
 8001904:	e000      	b.n	8001908 <HAL_GPIO_Init+0x240>
 8001906:	2300      	movs	r3, #0
 8001908:	69fa      	ldr	r2, [r7, #28]
 800190a:	f002 0203 	and.w	r2, r2, #3
 800190e:	0092      	lsls	r2, r2, #2
 8001910:	4093      	lsls	r3, r2
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	4313      	orrs	r3, r2
 8001916:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001918:	4935      	ldr	r1, [pc, #212]	; (80019f0 <HAL_GPIO_Init+0x328>)
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	089b      	lsrs	r3, r3, #2
 800191e:	3302      	adds	r3, #2
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001926:	4b3d      	ldr	r3, [pc, #244]	; (8001a1c <HAL_GPIO_Init+0x354>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	43db      	mvns	r3, r3
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	4013      	ands	r3, r2
 8001934:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d003      	beq.n	800194a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	4313      	orrs	r3, r2
 8001948:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800194a:	4a34      	ldr	r2, [pc, #208]	; (8001a1c <HAL_GPIO_Init+0x354>)
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001950:	4b32      	ldr	r3, [pc, #200]	; (8001a1c <HAL_GPIO_Init+0x354>)
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	43db      	mvns	r3, r3
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	4013      	ands	r3, r2
 800195e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d003      	beq.n	8001974 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	4313      	orrs	r3, r2
 8001972:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001974:	4a29      	ldr	r2, [pc, #164]	; (8001a1c <HAL_GPIO_Init+0x354>)
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800197a:	4b28      	ldr	r3, [pc, #160]	; (8001a1c <HAL_GPIO_Init+0x354>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	43db      	mvns	r3, r3
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	4013      	ands	r3, r2
 8001988:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d003      	beq.n	800199e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	4313      	orrs	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800199e:	4a1f      	ldr	r2, [pc, #124]	; (8001a1c <HAL_GPIO_Init+0x354>)
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019a4:	4b1d      	ldr	r3, [pc, #116]	; (8001a1c <HAL_GPIO_Init+0x354>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	43db      	mvns	r3, r3
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	4013      	ands	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d003      	beq.n	80019c8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019c8:	4a14      	ldr	r2, [pc, #80]	; (8001a1c <HAL_GPIO_Init+0x354>)
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	3301      	adds	r3, #1
 80019d2:	61fb      	str	r3, [r7, #28]
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	2b0f      	cmp	r3, #15
 80019d8:	f67f ae86 	bls.w	80016e8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80019dc:	bf00      	nop
 80019de:	bf00      	nop
 80019e0:	3724      	adds	r7, #36	; 0x24
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	40023800 	.word	0x40023800
 80019f0:	40013800 	.word	0x40013800
 80019f4:	40020000 	.word	0x40020000
 80019f8:	40020400 	.word	0x40020400
 80019fc:	40020800 	.word	0x40020800
 8001a00:	40020c00 	.word	0x40020c00
 8001a04:	40021000 	.word	0x40021000
 8001a08:	40021400 	.word	0x40021400
 8001a0c:	40021800 	.word	0x40021800
 8001a10:	40021c00 	.word	0x40021c00
 8001a14:	40022000 	.word	0x40022000
 8001a18:	40022400 	.word	0x40022400
 8001a1c:	40013c00 	.word	0x40013c00

08001a20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	460b      	mov	r3, r1
 8001a2a:	807b      	strh	r3, [r7, #2]
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a30:	787b      	ldrb	r3, [r7, #1]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d003      	beq.n	8001a3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a36:	887a      	ldrh	r2, [r7, #2]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001a3c:	e003      	b.n	8001a46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001a3e:	887b      	ldrh	r3, [r7, #2]
 8001a40:	041a      	lsls	r2, r3, #16
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	619a      	str	r2, [r3, #24]
}
 8001a46:	bf00      	nop
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
	...

08001a54 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001a5e:	4b23      	ldr	r3, [pc, #140]	; (8001aec <HAL_PWREx_EnableOverDrive+0x98>)
 8001a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a62:	4a22      	ldr	r2, [pc, #136]	; (8001aec <HAL_PWREx_EnableOverDrive+0x98>)
 8001a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a68:	6413      	str	r3, [r2, #64]	; 0x40
 8001a6a:	4b20      	ldr	r3, [pc, #128]	; (8001aec <HAL_PWREx_EnableOverDrive+0x98>)
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a72:	603b      	str	r3, [r7, #0]
 8001a74:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001a76:	4b1e      	ldr	r3, [pc, #120]	; (8001af0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a1d      	ldr	r2, [pc, #116]	; (8001af0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a80:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a82:	f7ff fd0b 	bl	800149c <HAL_GetTick>
 8001a86:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001a88:	e009      	b.n	8001a9e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001a8a:	f7ff fd07 	bl	800149c <HAL_GetTick>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a98:	d901      	bls.n	8001a9e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e022      	b.n	8001ae4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001a9e:	4b14      	ldr	r3, [pc, #80]	; (8001af0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aaa:	d1ee      	bne.n	8001a8a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001aac:	4b10      	ldr	r3, [pc, #64]	; (8001af0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a0f      	ldr	r2, [pc, #60]	; (8001af0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ab2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ab6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ab8:	f7ff fcf0 	bl	800149c <HAL_GetTick>
 8001abc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001abe:	e009      	b.n	8001ad4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001ac0:	f7ff fcec 	bl	800149c <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ace:	d901      	bls.n	8001ad4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e007      	b.n	8001ae4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001ad4:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001adc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001ae0:	d1ee      	bne.n	8001ac0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001ae2:	2300      	movs	r3, #0
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3708      	adds	r7, #8
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	40023800 	.word	0x40023800
 8001af0:	40007000 	.word	0x40007000

08001af4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b086      	sub	sp, #24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001afc:	2300      	movs	r3, #0
 8001afe:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d101      	bne.n	8001b0a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e29b      	b.n	8002042 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	f000 8087 	beq.w	8001c26 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b18:	4b96      	ldr	r3, [pc, #600]	; (8001d74 <HAL_RCC_OscConfig+0x280>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f003 030c 	and.w	r3, r3, #12
 8001b20:	2b04      	cmp	r3, #4
 8001b22:	d00c      	beq.n	8001b3e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b24:	4b93      	ldr	r3, [pc, #588]	; (8001d74 <HAL_RCC_OscConfig+0x280>)
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f003 030c 	and.w	r3, r3, #12
 8001b2c:	2b08      	cmp	r3, #8
 8001b2e:	d112      	bne.n	8001b56 <HAL_RCC_OscConfig+0x62>
 8001b30:	4b90      	ldr	r3, [pc, #576]	; (8001d74 <HAL_RCC_OscConfig+0x280>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b3c:	d10b      	bne.n	8001b56 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b3e:	4b8d      	ldr	r3, [pc, #564]	; (8001d74 <HAL_RCC_OscConfig+0x280>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d06c      	beq.n	8001c24 <HAL_RCC_OscConfig+0x130>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d168      	bne.n	8001c24 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e275      	b.n	8002042 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b5e:	d106      	bne.n	8001b6e <HAL_RCC_OscConfig+0x7a>
 8001b60:	4b84      	ldr	r3, [pc, #528]	; (8001d74 <HAL_RCC_OscConfig+0x280>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a83      	ldr	r2, [pc, #524]	; (8001d74 <HAL_RCC_OscConfig+0x280>)
 8001b66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b6a:	6013      	str	r3, [r2, #0]
 8001b6c:	e02e      	b.n	8001bcc <HAL_RCC_OscConfig+0xd8>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d10c      	bne.n	8001b90 <HAL_RCC_OscConfig+0x9c>
 8001b76:	4b7f      	ldr	r3, [pc, #508]	; (8001d74 <HAL_RCC_OscConfig+0x280>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a7e      	ldr	r2, [pc, #504]	; (8001d74 <HAL_RCC_OscConfig+0x280>)
 8001b7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b80:	6013      	str	r3, [r2, #0]
 8001b82:	4b7c      	ldr	r3, [pc, #496]	; (8001d74 <HAL_RCC_OscConfig+0x280>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a7b      	ldr	r2, [pc, #492]	; (8001d74 <HAL_RCC_OscConfig+0x280>)
 8001b88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b8c:	6013      	str	r3, [r2, #0]
 8001b8e:	e01d      	b.n	8001bcc <HAL_RCC_OscConfig+0xd8>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b98:	d10c      	bne.n	8001bb4 <HAL_RCC_OscConfig+0xc0>
 8001b9a:	4b76      	ldr	r3, [pc, #472]	; (8001d74 <HAL_RCC_OscConfig+0x280>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a75      	ldr	r2, [pc, #468]	; (8001d74 <HAL_RCC_OscConfig+0x280>)
 8001ba0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ba4:	6013      	str	r3, [r2, #0]
 8001ba6:	4b73      	ldr	r3, [pc, #460]	; (8001d74 <HAL_RCC_OscConfig+0x280>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a72      	ldr	r2, [pc, #456]	; (8001d74 <HAL_RCC_OscConfig+0x280>)
 8001bac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bb0:	6013      	str	r3, [r2, #0]
 8001bb2:	e00b      	b.n	8001bcc <HAL_RCC_OscConfig+0xd8>
 8001bb4:	4b6f      	ldr	r3, [pc, #444]	; (8001d74 <HAL_RCC_OscConfig+0x280>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a6e      	ldr	r2, [pc, #440]	; (8001d74 <HAL_RCC_OscConfig+0x280>)
 8001bba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bbe:	6013      	str	r3, [r2, #0]
 8001bc0:	4b6c      	ldr	r3, [pc, #432]	; (8001d74 <HAL_RCC_OscConfig+0x280>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a6b      	ldr	r2, [pc, #428]	; (8001d74 <HAL_RCC_OscConfig+0x280>)
 8001bc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d013      	beq.n	8001bfc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd4:	f7ff fc62 	bl	800149c <HAL_GetTick>
 8001bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bda:	e008      	b.n	8001bee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bdc:	f7ff fc5e 	bl	800149c <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b64      	cmp	r3, #100	; 0x64
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e229      	b.n	8002042 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bee:	4b61      	ldr	r3, [pc, #388]	; (8001d74 <HAL_RCC_OscConfig+0x280>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d0f0      	beq.n	8001bdc <HAL_RCC_OscConfig+0xe8>
 8001bfa:	e014      	b.n	8001c26 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bfc:	f7ff fc4e 	bl	800149c <HAL_GetTick>
 8001c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c02:	e008      	b.n	8001c16 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c04:	f7ff fc4a 	bl	800149c <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b64      	cmp	r3, #100	; 0x64
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e215      	b.n	8002042 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c16:	4b57      	ldr	r3, [pc, #348]	; (8001d74 <HAL_RCC_OscConfig+0x280>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1f0      	bne.n	8001c04 <HAL_RCC_OscConfig+0x110>
 8001c22:	e000      	b.n	8001c26 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d069      	beq.n	8001d06 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c32:	4b50      	ldr	r3, [pc, #320]	; (8001d74 <HAL_RCC_OscConfig+0x280>)
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f003 030c 	and.w	r3, r3, #12
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d00b      	beq.n	8001c56 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c3e:	4b4d      	ldr	r3, [pc, #308]	; (8001d74 <HAL_RCC_OscConfig+0x280>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f003 030c 	and.w	r3, r3, #12
 8001c46:	2b08      	cmp	r3, #8
 8001c48:	d11c      	bne.n	8001c84 <HAL_RCC_OscConfig+0x190>
 8001c4a:	4b4a      	ldr	r3, [pc, #296]	; (8001d74 <HAL_RCC_OscConfig+0x280>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d116      	bne.n	8001c84 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c56:	4b47      	ldr	r3, [pc, #284]	; (8001d74 <HAL_RCC_OscConfig+0x280>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d005      	beq.n	8001c6e <HAL_RCC_OscConfig+0x17a>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d001      	beq.n	8001c6e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e1e9      	b.n	8002042 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c6e:	4b41      	ldr	r3, [pc, #260]	; (8001d74 <HAL_RCC_OscConfig+0x280>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	00db      	lsls	r3, r3, #3
 8001c7c:	493d      	ldr	r1, [pc, #244]	; (8001d74 <HAL_RCC_OscConfig+0x280>)
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c82:	e040      	b.n	8001d06 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d023      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c8c:	4b39      	ldr	r3, [pc, #228]	; (8001d74 <HAL_RCC_OscConfig+0x280>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a38      	ldr	r2, [pc, #224]	; (8001d74 <HAL_RCC_OscConfig+0x280>)
 8001c92:	f043 0301 	orr.w	r3, r3, #1
 8001c96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c98:	f7ff fc00 	bl	800149c <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ca0:	f7ff fbfc 	bl	800149c <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e1c7      	b.n	8002042 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cb2:	4b30      	ldr	r3, [pc, #192]	; (8001d74 <HAL_RCC_OscConfig+0x280>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d0f0      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cbe:	4b2d      	ldr	r3, [pc, #180]	; (8001d74 <HAL_RCC_OscConfig+0x280>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	00db      	lsls	r3, r3, #3
 8001ccc:	4929      	ldr	r1, [pc, #164]	; (8001d74 <HAL_RCC_OscConfig+0x280>)
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	600b      	str	r3, [r1, #0]
 8001cd2:	e018      	b.n	8001d06 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cd4:	4b27      	ldr	r3, [pc, #156]	; (8001d74 <HAL_RCC_OscConfig+0x280>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a26      	ldr	r2, [pc, #152]	; (8001d74 <HAL_RCC_OscConfig+0x280>)
 8001cda:	f023 0301 	bic.w	r3, r3, #1
 8001cde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce0:	f7ff fbdc 	bl	800149c <HAL_GetTick>
 8001ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ce6:	e008      	b.n	8001cfa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ce8:	f7ff fbd8 	bl	800149c <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e1a3      	b.n	8002042 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cfa:	4b1e      	ldr	r3, [pc, #120]	; (8001d74 <HAL_RCC_OscConfig+0x280>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d1f0      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0308 	and.w	r3, r3, #8
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d038      	beq.n	8001d84 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	695b      	ldr	r3, [r3, #20]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d019      	beq.n	8001d4e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d1a:	4b16      	ldr	r3, [pc, #88]	; (8001d74 <HAL_RCC_OscConfig+0x280>)
 8001d1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d1e:	4a15      	ldr	r2, [pc, #84]	; (8001d74 <HAL_RCC_OscConfig+0x280>)
 8001d20:	f043 0301 	orr.w	r3, r3, #1
 8001d24:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d26:	f7ff fbb9 	bl	800149c <HAL_GetTick>
 8001d2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d2c:	e008      	b.n	8001d40 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d2e:	f7ff fbb5 	bl	800149c <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d901      	bls.n	8001d40 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e180      	b.n	8002042 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d40:	4b0c      	ldr	r3, [pc, #48]	; (8001d74 <HAL_RCC_OscConfig+0x280>)
 8001d42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d44:	f003 0302 	and.w	r3, r3, #2
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d0f0      	beq.n	8001d2e <HAL_RCC_OscConfig+0x23a>
 8001d4c:	e01a      	b.n	8001d84 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d4e:	4b09      	ldr	r3, [pc, #36]	; (8001d74 <HAL_RCC_OscConfig+0x280>)
 8001d50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d52:	4a08      	ldr	r2, [pc, #32]	; (8001d74 <HAL_RCC_OscConfig+0x280>)
 8001d54:	f023 0301 	bic.w	r3, r3, #1
 8001d58:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d5a:	f7ff fb9f 	bl	800149c <HAL_GetTick>
 8001d5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d60:	e00a      	b.n	8001d78 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d62:	f7ff fb9b 	bl	800149c <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d903      	bls.n	8001d78 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e166      	b.n	8002042 <HAL_RCC_OscConfig+0x54e>
 8001d74:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d78:	4b92      	ldr	r3, [pc, #584]	; (8001fc4 <HAL_RCC_OscConfig+0x4d0>)
 8001d7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d1ee      	bne.n	8001d62 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0304 	and.w	r3, r3, #4
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	f000 80a4 	beq.w	8001eda <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d92:	4b8c      	ldr	r3, [pc, #560]	; (8001fc4 <HAL_RCC_OscConfig+0x4d0>)
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d10d      	bne.n	8001dba <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d9e:	4b89      	ldr	r3, [pc, #548]	; (8001fc4 <HAL_RCC_OscConfig+0x4d0>)
 8001da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da2:	4a88      	ldr	r2, [pc, #544]	; (8001fc4 <HAL_RCC_OscConfig+0x4d0>)
 8001da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001da8:	6413      	str	r3, [r2, #64]	; 0x40
 8001daa:	4b86      	ldr	r3, [pc, #536]	; (8001fc4 <HAL_RCC_OscConfig+0x4d0>)
 8001dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db2:	60bb      	str	r3, [r7, #8]
 8001db4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001db6:	2301      	movs	r3, #1
 8001db8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dba:	4b83      	ldr	r3, [pc, #524]	; (8001fc8 <HAL_RCC_OscConfig+0x4d4>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d118      	bne.n	8001df8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001dc6:	4b80      	ldr	r3, [pc, #512]	; (8001fc8 <HAL_RCC_OscConfig+0x4d4>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a7f      	ldr	r2, [pc, #508]	; (8001fc8 <HAL_RCC_OscConfig+0x4d4>)
 8001dcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dd2:	f7ff fb63 	bl	800149c <HAL_GetTick>
 8001dd6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dd8:	e008      	b.n	8001dec <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dda:	f7ff fb5f 	bl	800149c <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	2b64      	cmp	r3, #100	; 0x64
 8001de6:	d901      	bls.n	8001dec <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e12a      	b.n	8002042 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dec:	4b76      	ldr	r3, [pc, #472]	; (8001fc8 <HAL_RCC_OscConfig+0x4d4>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d0f0      	beq.n	8001dda <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d106      	bne.n	8001e0e <HAL_RCC_OscConfig+0x31a>
 8001e00:	4b70      	ldr	r3, [pc, #448]	; (8001fc4 <HAL_RCC_OscConfig+0x4d0>)
 8001e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e04:	4a6f      	ldr	r2, [pc, #444]	; (8001fc4 <HAL_RCC_OscConfig+0x4d0>)
 8001e06:	f043 0301 	orr.w	r3, r3, #1
 8001e0a:	6713      	str	r3, [r2, #112]	; 0x70
 8001e0c:	e02d      	b.n	8001e6a <HAL_RCC_OscConfig+0x376>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d10c      	bne.n	8001e30 <HAL_RCC_OscConfig+0x33c>
 8001e16:	4b6b      	ldr	r3, [pc, #428]	; (8001fc4 <HAL_RCC_OscConfig+0x4d0>)
 8001e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e1a:	4a6a      	ldr	r2, [pc, #424]	; (8001fc4 <HAL_RCC_OscConfig+0x4d0>)
 8001e1c:	f023 0301 	bic.w	r3, r3, #1
 8001e20:	6713      	str	r3, [r2, #112]	; 0x70
 8001e22:	4b68      	ldr	r3, [pc, #416]	; (8001fc4 <HAL_RCC_OscConfig+0x4d0>)
 8001e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e26:	4a67      	ldr	r2, [pc, #412]	; (8001fc4 <HAL_RCC_OscConfig+0x4d0>)
 8001e28:	f023 0304 	bic.w	r3, r3, #4
 8001e2c:	6713      	str	r3, [r2, #112]	; 0x70
 8001e2e:	e01c      	b.n	8001e6a <HAL_RCC_OscConfig+0x376>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	2b05      	cmp	r3, #5
 8001e36:	d10c      	bne.n	8001e52 <HAL_RCC_OscConfig+0x35e>
 8001e38:	4b62      	ldr	r3, [pc, #392]	; (8001fc4 <HAL_RCC_OscConfig+0x4d0>)
 8001e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e3c:	4a61      	ldr	r2, [pc, #388]	; (8001fc4 <HAL_RCC_OscConfig+0x4d0>)
 8001e3e:	f043 0304 	orr.w	r3, r3, #4
 8001e42:	6713      	str	r3, [r2, #112]	; 0x70
 8001e44:	4b5f      	ldr	r3, [pc, #380]	; (8001fc4 <HAL_RCC_OscConfig+0x4d0>)
 8001e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e48:	4a5e      	ldr	r2, [pc, #376]	; (8001fc4 <HAL_RCC_OscConfig+0x4d0>)
 8001e4a:	f043 0301 	orr.w	r3, r3, #1
 8001e4e:	6713      	str	r3, [r2, #112]	; 0x70
 8001e50:	e00b      	b.n	8001e6a <HAL_RCC_OscConfig+0x376>
 8001e52:	4b5c      	ldr	r3, [pc, #368]	; (8001fc4 <HAL_RCC_OscConfig+0x4d0>)
 8001e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e56:	4a5b      	ldr	r2, [pc, #364]	; (8001fc4 <HAL_RCC_OscConfig+0x4d0>)
 8001e58:	f023 0301 	bic.w	r3, r3, #1
 8001e5c:	6713      	str	r3, [r2, #112]	; 0x70
 8001e5e:	4b59      	ldr	r3, [pc, #356]	; (8001fc4 <HAL_RCC_OscConfig+0x4d0>)
 8001e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e62:	4a58      	ldr	r2, [pc, #352]	; (8001fc4 <HAL_RCC_OscConfig+0x4d0>)
 8001e64:	f023 0304 	bic.w	r3, r3, #4
 8001e68:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d015      	beq.n	8001e9e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e72:	f7ff fb13 	bl	800149c <HAL_GetTick>
 8001e76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e78:	e00a      	b.n	8001e90 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e7a:	f7ff fb0f 	bl	800149c <HAL_GetTick>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d901      	bls.n	8001e90 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e0d8      	b.n	8002042 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e90:	4b4c      	ldr	r3, [pc, #304]	; (8001fc4 <HAL_RCC_OscConfig+0x4d0>)
 8001e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e94:	f003 0302 	and.w	r3, r3, #2
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d0ee      	beq.n	8001e7a <HAL_RCC_OscConfig+0x386>
 8001e9c:	e014      	b.n	8001ec8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e9e:	f7ff fafd 	bl	800149c <HAL_GetTick>
 8001ea2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ea4:	e00a      	b.n	8001ebc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ea6:	f7ff faf9 	bl	800149c <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d901      	bls.n	8001ebc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e0c2      	b.n	8002042 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ebc:	4b41      	ldr	r3, [pc, #260]	; (8001fc4 <HAL_RCC_OscConfig+0x4d0>)
 8001ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ec0:	f003 0302 	and.w	r3, r3, #2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d1ee      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ec8:	7dfb      	ldrb	r3, [r7, #23]
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d105      	bne.n	8001eda <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ece:	4b3d      	ldr	r3, [pc, #244]	; (8001fc4 <HAL_RCC_OscConfig+0x4d0>)
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed2:	4a3c      	ldr	r2, [pc, #240]	; (8001fc4 <HAL_RCC_OscConfig+0x4d0>)
 8001ed4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ed8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	699b      	ldr	r3, [r3, #24]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	f000 80ae 	beq.w	8002040 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ee4:	4b37      	ldr	r3, [pc, #220]	; (8001fc4 <HAL_RCC_OscConfig+0x4d0>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f003 030c 	and.w	r3, r3, #12
 8001eec:	2b08      	cmp	r3, #8
 8001eee:	d06d      	beq.n	8001fcc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d14b      	bne.n	8001f90 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ef8:	4b32      	ldr	r3, [pc, #200]	; (8001fc4 <HAL_RCC_OscConfig+0x4d0>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a31      	ldr	r2, [pc, #196]	; (8001fc4 <HAL_RCC_OscConfig+0x4d0>)
 8001efe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f04:	f7ff faca 	bl	800149c <HAL_GetTick>
 8001f08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f0a:	e008      	b.n	8001f1e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f0c:	f7ff fac6 	bl	800149c <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e091      	b.n	8002042 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f1e:	4b29      	ldr	r3, [pc, #164]	; (8001fc4 <HAL_RCC_OscConfig+0x4d0>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1f0      	bne.n	8001f0c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	69da      	ldr	r2, [r3, #28]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a1b      	ldr	r3, [r3, #32]
 8001f32:	431a      	orrs	r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f38:	019b      	lsls	r3, r3, #6
 8001f3a:	431a      	orrs	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f40:	085b      	lsrs	r3, r3, #1
 8001f42:	3b01      	subs	r3, #1
 8001f44:	041b      	lsls	r3, r3, #16
 8001f46:	431a      	orrs	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f4c:	061b      	lsls	r3, r3, #24
 8001f4e:	431a      	orrs	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f54:	071b      	lsls	r3, r3, #28
 8001f56:	491b      	ldr	r1, [pc, #108]	; (8001fc4 <HAL_RCC_OscConfig+0x4d0>)
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f5c:	4b19      	ldr	r3, [pc, #100]	; (8001fc4 <HAL_RCC_OscConfig+0x4d0>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a18      	ldr	r2, [pc, #96]	; (8001fc4 <HAL_RCC_OscConfig+0x4d0>)
 8001f62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f68:	f7ff fa98 	bl	800149c <HAL_GetTick>
 8001f6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f6e:	e008      	b.n	8001f82 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f70:	f7ff fa94 	bl	800149c <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e05f      	b.n	8002042 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f82:	4b10      	ldr	r3, [pc, #64]	; (8001fc4 <HAL_RCC_OscConfig+0x4d0>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d0f0      	beq.n	8001f70 <HAL_RCC_OscConfig+0x47c>
 8001f8e:	e057      	b.n	8002040 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f90:	4b0c      	ldr	r3, [pc, #48]	; (8001fc4 <HAL_RCC_OscConfig+0x4d0>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a0b      	ldr	r2, [pc, #44]	; (8001fc4 <HAL_RCC_OscConfig+0x4d0>)
 8001f96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f9c:	f7ff fa7e 	bl	800149c <HAL_GetTick>
 8001fa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fa2:	e008      	b.n	8001fb6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fa4:	f7ff fa7a 	bl	800149c <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e045      	b.n	8002042 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fb6:	4b03      	ldr	r3, [pc, #12]	; (8001fc4 <HAL_RCC_OscConfig+0x4d0>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1f0      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x4b0>
 8001fc2:	e03d      	b.n	8002040 <HAL_RCC_OscConfig+0x54c>
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001fcc:	4b1f      	ldr	r3, [pc, #124]	; (800204c <HAL_RCC_OscConfig+0x558>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d030      	beq.n	800203c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d129      	bne.n	800203c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d122      	bne.n	800203c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002002:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002004:	4293      	cmp	r3, r2
 8002006:	d119      	bne.n	800203c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002012:	085b      	lsrs	r3, r3, #1
 8002014:	3b01      	subs	r3, #1
 8002016:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002018:	429a      	cmp	r2, r3
 800201a:	d10f      	bne.n	800203c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002026:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002028:	429a      	cmp	r2, r3
 800202a:	d107      	bne.n	800203c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002036:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002038:	429a      	cmp	r2, r3
 800203a:	d001      	beq.n	8002040 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e000      	b.n	8002042 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3718      	adds	r7, #24
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	40023800 	.word	0x40023800

08002050 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800205a:	2300      	movs	r3, #0
 800205c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d101      	bne.n	8002068 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e0d0      	b.n	800220a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002068:	4b6a      	ldr	r3, [pc, #424]	; (8002214 <HAL_RCC_ClockConfig+0x1c4>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 030f 	and.w	r3, r3, #15
 8002070:	683a      	ldr	r2, [r7, #0]
 8002072:	429a      	cmp	r2, r3
 8002074:	d910      	bls.n	8002098 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002076:	4b67      	ldr	r3, [pc, #412]	; (8002214 <HAL_RCC_ClockConfig+0x1c4>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f023 020f 	bic.w	r2, r3, #15
 800207e:	4965      	ldr	r1, [pc, #404]	; (8002214 <HAL_RCC_ClockConfig+0x1c4>)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	4313      	orrs	r3, r2
 8002084:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002086:	4b63      	ldr	r3, [pc, #396]	; (8002214 <HAL_RCC_ClockConfig+0x1c4>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 030f 	and.w	r3, r3, #15
 800208e:	683a      	ldr	r2, [r7, #0]
 8002090:	429a      	cmp	r2, r3
 8002092:	d001      	beq.n	8002098 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e0b8      	b.n	800220a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0302 	and.w	r3, r3, #2
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d020      	beq.n	80020e6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0304 	and.w	r3, r3, #4
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d005      	beq.n	80020bc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020b0:	4b59      	ldr	r3, [pc, #356]	; (8002218 <HAL_RCC_ClockConfig+0x1c8>)
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	4a58      	ldr	r2, [pc, #352]	; (8002218 <HAL_RCC_ClockConfig+0x1c8>)
 80020b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80020ba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0308 	and.w	r3, r3, #8
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d005      	beq.n	80020d4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020c8:	4b53      	ldr	r3, [pc, #332]	; (8002218 <HAL_RCC_ClockConfig+0x1c8>)
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	4a52      	ldr	r2, [pc, #328]	; (8002218 <HAL_RCC_ClockConfig+0x1c8>)
 80020ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80020d2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020d4:	4b50      	ldr	r3, [pc, #320]	; (8002218 <HAL_RCC_ClockConfig+0x1c8>)
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	494d      	ldr	r1, [pc, #308]	; (8002218 <HAL_RCC_ClockConfig+0x1c8>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d040      	beq.n	8002174 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d107      	bne.n	800210a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020fa:	4b47      	ldr	r3, [pc, #284]	; (8002218 <HAL_RCC_ClockConfig+0x1c8>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d115      	bne.n	8002132 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e07f      	b.n	800220a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	2b02      	cmp	r3, #2
 8002110:	d107      	bne.n	8002122 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002112:	4b41      	ldr	r3, [pc, #260]	; (8002218 <HAL_RCC_ClockConfig+0x1c8>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d109      	bne.n	8002132 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e073      	b.n	800220a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002122:	4b3d      	ldr	r3, [pc, #244]	; (8002218 <HAL_RCC_ClockConfig+0x1c8>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d101      	bne.n	8002132 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e06b      	b.n	800220a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002132:	4b39      	ldr	r3, [pc, #228]	; (8002218 <HAL_RCC_ClockConfig+0x1c8>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f023 0203 	bic.w	r2, r3, #3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	4936      	ldr	r1, [pc, #216]	; (8002218 <HAL_RCC_ClockConfig+0x1c8>)
 8002140:	4313      	orrs	r3, r2
 8002142:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002144:	f7ff f9aa 	bl	800149c <HAL_GetTick>
 8002148:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800214a:	e00a      	b.n	8002162 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800214c:	f7ff f9a6 	bl	800149c <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	f241 3288 	movw	r2, #5000	; 0x1388
 800215a:	4293      	cmp	r3, r2
 800215c:	d901      	bls.n	8002162 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e053      	b.n	800220a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002162:	4b2d      	ldr	r3, [pc, #180]	; (8002218 <HAL_RCC_ClockConfig+0x1c8>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f003 020c 	and.w	r2, r3, #12
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	429a      	cmp	r2, r3
 8002172:	d1eb      	bne.n	800214c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002174:	4b27      	ldr	r3, [pc, #156]	; (8002214 <HAL_RCC_ClockConfig+0x1c4>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 030f 	and.w	r3, r3, #15
 800217c:	683a      	ldr	r2, [r7, #0]
 800217e:	429a      	cmp	r2, r3
 8002180:	d210      	bcs.n	80021a4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002182:	4b24      	ldr	r3, [pc, #144]	; (8002214 <HAL_RCC_ClockConfig+0x1c4>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f023 020f 	bic.w	r2, r3, #15
 800218a:	4922      	ldr	r1, [pc, #136]	; (8002214 <HAL_RCC_ClockConfig+0x1c4>)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	4313      	orrs	r3, r2
 8002190:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002192:	4b20      	ldr	r3, [pc, #128]	; (8002214 <HAL_RCC_ClockConfig+0x1c4>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 030f 	and.w	r3, r3, #15
 800219a:	683a      	ldr	r2, [r7, #0]
 800219c:	429a      	cmp	r2, r3
 800219e:	d001      	beq.n	80021a4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e032      	b.n	800220a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0304 	and.w	r3, r3, #4
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d008      	beq.n	80021c2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021b0:	4b19      	ldr	r3, [pc, #100]	; (8002218 <HAL_RCC_ClockConfig+0x1c8>)
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	4916      	ldr	r1, [pc, #88]	; (8002218 <HAL_RCC_ClockConfig+0x1c8>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0308 	and.w	r3, r3, #8
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d009      	beq.n	80021e2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021ce:	4b12      	ldr	r3, [pc, #72]	; (8002218 <HAL_RCC_ClockConfig+0x1c8>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	490e      	ldr	r1, [pc, #56]	; (8002218 <HAL_RCC_ClockConfig+0x1c8>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021e2:	f000 f821 	bl	8002228 <HAL_RCC_GetSysClockFreq>
 80021e6:	4602      	mov	r2, r0
 80021e8:	4b0b      	ldr	r3, [pc, #44]	; (8002218 <HAL_RCC_ClockConfig+0x1c8>)
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	091b      	lsrs	r3, r3, #4
 80021ee:	f003 030f 	and.w	r3, r3, #15
 80021f2:	490a      	ldr	r1, [pc, #40]	; (800221c <HAL_RCC_ClockConfig+0x1cc>)
 80021f4:	5ccb      	ldrb	r3, [r1, r3]
 80021f6:	fa22 f303 	lsr.w	r3, r2, r3
 80021fa:	4a09      	ldr	r2, [pc, #36]	; (8002220 <HAL_RCC_ClockConfig+0x1d0>)
 80021fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021fe:	4b09      	ldr	r3, [pc, #36]	; (8002224 <HAL_RCC_ClockConfig+0x1d4>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4618      	mov	r0, r3
 8002204:	f7ff f906 	bl	8001414 <HAL_InitTick>

  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3710      	adds	r7, #16
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	40023c00 	.word	0x40023c00
 8002218:	40023800 	.word	0x40023800
 800221c:	08005ef0 	.word	0x08005ef0
 8002220:	20000004 	.word	0x20000004
 8002224:	20000008 	.word	0x20000008

08002228 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002228:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800222c:	b094      	sub	sp, #80	; 0x50
 800222e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002230:	2300      	movs	r3, #0
 8002232:	647b      	str	r3, [r7, #68]	; 0x44
 8002234:	2300      	movs	r3, #0
 8002236:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002238:	2300      	movs	r3, #0
 800223a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800223c:	2300      	movs	r3, #0
 800223e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002240:	4b79      	ldr	r3, [pc, #484]	; (8002428 <HAL_RCC_GetSysClockFreq+0x200>)
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f003 030c 	and.w	r3, r3, #12
 8002248:	2b08      	cmp	r3, #8
 800224a:	d00d      	beq.n	8002268 <HAL_RCC_GetSysClockFreq+0x40>
 800224c:	2b08      	cmp	r3, #8
 800224e:	f200 80e1 	bhi.w	8002414 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002252:	2b00      	cmp	r3, #0
 8002254:	d002      	beq.n	800225c <HAL_RCC_GetSysClockFreq+0x34>
 8002256:	2b04      	cmp	r3, #4
 8002258:	d003      	beq.n	8002262 <HAL_RCC_GetSysClockFreq+0x3a>
 800225a:	e0db      	b.n	8002414 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800225c:	4b73      	ldr	r3, [pc, #460]	; (800242c <HAL_RCC_GetSysClockFreq+0x204>)
 800225e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002260:	e0db      	b.n	800241a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002262:	4b73      	ldr	r3, [pc, #460]	; (8002430 <HAL_RCC_GetSysClockFreq+0x208>)
 8002264:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002266:	e0d8      	b.n	800241a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002268:	4b6f      	ldr	r3, [pc, #444]	; (8002428 <HAL_RCC_GetSysClockFreq+0x200>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002270:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002272:	4b6d      	ldr	r3, [pc, #436]	; (8002428 <HAL_RCC_GetSysClockFreq+0x200>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d063      	beq.n	8002346 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800227e:	4b6a      	ldr	r3, [pc, #424]	; (8002428 <HAL_RCC_GetSysClockFreq+0x200>)
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	099b      	lsrs	r3, r3, #6
 8002284:	2200      	movs	r2, #0
 8002286:	63bb      	str	r3, [r7, #56]	; 0x38
 8002288:	63fa      	str	r2, [r7, #60]	; 0x3c
 800228a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800228c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002290:	633b      	str	r3, [r7, #48]	; 0x30
 8002292:	2300      	movs	r3, #0
 8002294:	637b      	str	r3, [r7, #52]	; 0x34
 8002296:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800229a:	4622      	mov	r2, r4
 800229c:	462b      	mov	r3, r5
 800229e:	f04f 0000 	mov.w	r0, #0
 80022a2:	f04f 0100 	mov.w	r1, #0
 80022a6:	0159      	lsls	r1, r3, #5
 80022a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022ac:	0150      	lsls	r0, r2, #5
 80022ae:	4602      	mov	r2, r0
 80022b0:	460b      	mov	r3, r1
 80022b2:	4621      	mov	r1, r4
 80022b4:	1a51      	subs	r1, r2, r1
 80022b6:	6139      	str	r1, [r7, #16]
 80022b8:	4629      	mov	r1, r5
 80022ba:	eb63 0301 	sbc.w	r3, r3, r1
 80022be:	617b      	str	r3, [r7, #20]
 80022c0:	f04f 0200 	mov.w	r2, #0
 80022c4:	f04f 0300 	mov.w	r3, #0
 80022c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80022cc:	4659      	mov	r1, fp
 80022ce:	018b      	lsls	r3, r1, #6
 80022d0:	4651      	mov	r1, sl
 80022d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022d6:	4651      	mov	r1, sl
 80022d8:	018a      	lsls	r2, r1, #6
 80022da:	4651      	mov	r1, sl
 80022dc:	ebb2 0801 	subs.w	r8, r2, r1
 80022e0:	4659      	mov	r1, fp
 80022e2:	eb63 0901 	sbc.w	r9, r3, r1
 80022e6:	f04f 0200 	mov.w	r2, #0
 80022ea:	f04f 0300 	mov.w	r3, #0
 80022ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80022f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80022f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80022fa:	4690      	mov	r8, r2
 80022fc:	4699      	mov	r9, r3
 80022fe:	4623      	mov	r3, r4
 8002300:	eb18 0303 	adds.w	r3, r8, r3
 8002304:	60bb      	str	r3, [r7, #8]
 8002306:	462b      	mov	r3, r5
 8002308:	eb49 0303 	adc.w	r3, r9, r3
 800230c:	60fb      	str	r3, [r7, #12]
 800230e:	f04f 0200 	mov.w	r2, #0
 8002312:	f04f 0300 	mov.w	r3, #0
 8002316:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800231a:	4629      	mov	r1, r5
 800231c:	024b      	lsls	r3, r1, #9
 800231e:	4621      	mov	r1, r4
 8002320:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002324:	4621      	mov	r1, r4
 8002326:	024a      	lsls	r2, r1, #9
 8002328:	4610      	mov	r0, r2
 800232a:	4619      	mov	r1, r3
 800232c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800232e:	2200      	movs	r2, #0
 8002330:	62bb      	str	r3, [r7, #40]	; 0x28
 8002332:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002334:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002338:	f7fe f83a 	bl	80003b0 <__aeabi_uldivmod>
 800233c:	4602      	mov	r2, r0
 800233e:	460b      	mov	r3, r1
 8002340:	4613      	mov	r3, r2
 8002342:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002344:	e058      	b.n	80023f8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002346:	4b38      	ldr	r3, [pc, #224]	; (8002428 <HAL_RCC_GetSysClockFreq+0x200>)
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	099b      	lsrs	r3, r3, #6
 800234c:	2200      	movs	r2, #0
 800234e:	4618      	mov	r0, r3
 8002350:	4611      	mov	r1, r2
 8002352:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002356:	623b      	str	r3, [r7, #32]
 8002358:	2300      	movs	r3, #0
 800235a:	627b      	str	r3, [r7, #36]	; 0x24
 800235c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002360:	4642      	mov	r2, r8
 8002362:	464b      	mov	r3, r9
 8002364:	f04f 0000 	mov.w	r0, #0
 8002368:	f04f 0100 	mov.w	r1, #0
 800236c:	0159      	lsls	r1, r3, #5
 800236e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002372:	0150      	lsls	r0, r2, #5
 8002374:	4602      	mov	r2, r0
 8002376:	460b      	mov	r3, r1
 8002378:	4641      	mov	r1, r8
 800237a:	ebb2 0a01 	subs.w	sl, r2, r1
 800237e:	4649      	mov	r1, r9
 8002380:	eb63 0b01 	sbc.w	fp, r3, r1
 8002384:	f04f 0200 	mov.w	r2, #0
 8002388:	f04f 0300 	mov.w	r3, #0
 800238c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002390:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002394:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002398:	ebb2 040a 	subs.w	r4, r2, sl
 800239c:	eb63 050b 	sbc.w	r5, r3, fp
 80023a0:	f04f 0200 	mov.w	r2, #0
 80023a4:	f04f 0300 	mov.w	r3, #0
 80023a8:	00eb      	lsls	r3, r5, #3
 80023aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023ae:	00e2      	lsls	r2, r4, #3
 80023b0:	4614      	mov	r4, r2
 80023b2:	461d      	mov	r5, r3
 80023b4:	4643      	mov	r3, r8
 80023b6:	18e3      	adds	r3, r4, r3
 80023b8:	603b      	str	r3, [r7, #0]
 80023ba:	464b      	mov	r3, r9
 80023bc:	eb45 0303 	adc.w	r3, r5, r3
 80023c0:	607b      	str	r3, [r7, #4]
 80023c2:	f04f 0200 	mov.w	r2, #0
 80023c6:	f04f 0300 	mov.w	r3, #0
 80023ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023ce:	4629      	mov	r1, r5
 80023d0:	028b      	lsls	r3, r1, #10
 80023d2:	4621      	mov	r1, r4
 80023d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023d8:	4621      	mov	r1, r4
 80023da:	028a      	lsls	r2, r1, #10
 80023dc:	4610      	mov	r0, r2
 80023de:	4619      	mov	r1, r3
 80023e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023e2:	2200      	movs	r2, #0
 80023e4:	61bb      	str	r3, [r7, #24]
 80023e6:	61fa      	str	r2, [r7, #28]
 80023e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023ec:	f7fd ffe0 	bl	80003b0 <__aeabi_uldivmod>
 80023f0:	4602      	mov	r2, r0
 80023f2:	460b      	mov	r3, r1
 80023f4:	4613      	mov	r3, r2
 80023f6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80023f8:	4b0b      	ldr	r3, [pc, #44]	; (8002428 <HAL_RCC_GetSysClockFreq+0x200>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	0c1b      	lsrs	r3, r3, #16
 80023fe:	f003 0303 	and.w	r3, r3, #3
 8002402:	3301      	adds	r3, #1
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002408:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800240a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800240c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002410:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002412:	e002      	b.n	800241a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002414:	4b05      	ldr	r3, [pc, #20]	; (800242c <HAL_RCC_GetSysClockFreq+0x204>)
 8002416:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002418:	bf00      	nop
    }
  }
  return sysclockfreq;
 800241a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800241c:	4618      	mov	r0, r3
 800241e:	3750      	adds	r7, #80	; 0x50
 8002420:	46bd      	mov	sp, r7
 8002422:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002426:	bf00      	nop
 8002428:	40023800 	.word	0x40023800
 800242c:	00f42400 	.word	0x00f42400
 8002430:	007a1200 	.word	0x007a1200

08002434 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002438:	4b03      	ldr	r3, [pc, #12]	; (8002448 <HAL_RCC_GetHCLKFreq+0x14>)
 800243a:	681b      	ldr	r3, [r3, #0]
}
 800243c:	4618      	mov	r0, r3
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	20000004 	.word	0x20000004

0800244c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002450:	f7ff fff0 	bl	8002434 <HAL_RCC_GetHCLKFreq>
 8002454:	4602      	mov	r2, r0
 8002456:	4b05      	ldr	r3, [pc, #20]	; (800246c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	0a9b      	lsrs	r3, r3, #10
 800245c:	f003 0307 	and.w	r3, r3, #7
 8002460:	4903      	ldr	r1, [pc, #12]	; (8002470 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002462:	5ccb      	ldrb	r3, [r1, r3]
 8002464:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002468:	4618      	mov	r0, r3
 800246a:	bd80      	pop	{r7, pc}
 800246c:	40023800 	.word	0x40023800
 8002470:	08005f00 	.word	0x08005f00

08002474 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002478:	f7ff ffdc 	bl	8002434 <HAL_RCC_GetHCLKFreq>
 800247c:	4602      	mov	r2, r0
 800247e:	4b05      	ldr	r3, [pc, #20]	; (8002494 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	0b5b      	lsrs	r3, r3, #13
 8002484:	f003 0307 	and.w	r3, r3, #7
 8002488:	4903      	ldr	r1, [pc, #12]	; (8002498 <HAL_RCC_GetPCLK2Freq+0x24>)
 800248a:	5ccb      	ldrb	r3, [r1, r3]
 800248c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002490:	4618      	mov	r0, r3
 8002492:	bd80      	pop	{r7, pc}
 8002494:	40023800 	.word	0x40023800
 8002498:	08005f00 	.word	0x08005f00

0800249c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b088      	sub	sp, #32
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80024a4:	2300      	movs	r3, #0
 80024a6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80024a8:	2300      	movs	r3, #0
 80024aa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80024ac:	2300      	movs	r3, #0
 80024ae:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80024b0:	2300      	movs	r3, #0
 80024b2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80024b4:	2300      	movs	r3, #0
 80024b6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0301 	and.w	r3, r3, #1
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d012      	beq.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80024c4:	4b69      	ldr	r3, [pc, #420]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	4a68      	ldr	r2, [pc, #416]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024ca:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80024ce:	6093      	str	r3, [r2, #8]
 80024d0:	4b66      	ldr	r3, [pc, #408]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024d2:	689a      	ldr	r2, [r3, #8]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024d8:	4964      	ldr	r1, [pc, #400]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d101      	bne.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80024e6:	2301      	movs	r3, #1
 80024e8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d017      	beq.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024f6:	4b5d      	ldr	r3, [pc, #372]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002504:	4959      	ldr	r1, [pc, #356]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002506:	4313      	orrs	r3, r2
 8002508:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002510:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002514:	d101      	bne.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002516:	2301      	movs	r3, #1
 8002518:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800251e:	2b00      	cmp	r3, #0
 8002520:	d101      	bne.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002522:	2301      	movs	r3, #1
 8002524:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d017      	beq.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002532:	4b4e      	ldr	r3, [pc, #312]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002534:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002538:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002540:	494a      	ldr	r1, [pc, #296]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002542:	4313      	orrs	r3, r2
 8002544:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002550:	d101      	bne.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002552:	2301      	movs	r3, #1
 8002554:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	2b00      	cmp	r3, #0
 800255c:	d101      	bne.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800255e:	2301      	movs	r3, #1
 8002560:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800256e:	2301      	movs	r3, #1
 8002570:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0320 	and.w	r3, r3, #32
 800257a:	2b00      	cmp	r3, #0
 800257c:	f000 808b 	beq.w	8002696 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002580:	4b3a      	ldr	r3, [pc, #232]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002584:	4a39      	ldr	r2, [pc, #228]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002586:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800258a:	6413      	str	r3, [r2, #64]	; 0x40
 800258c:	4b37      	ldr	r3, [pc, #220]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800258e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002594:	60bb      	str	r3, [r7, #8]
 8002596:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002598:	4b35      	ldr	r3, [pc, #212]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a34      	ldr	r2, [pc, #208]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800259e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025a4:	f7fe ff7a 	bl	800149c <HAL_GetTick>
 80025a8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80025aa:	e008      	b.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025ac:	f7fe ff76 	bl	800149c <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b64      	cmp	r3, #100	; 0x64
 80025b8:	d901      	bls.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e38f      	b.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80025be:	4b2c      	ldr	r3, [pc, #176]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d0f0      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80025ca:	4b28      	ldr	r3, [pc, #160]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025d2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d035      	beq.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d02e      	beq.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80025e8:	4b20      	ldr	r3, [pc, #128]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025f0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80025f2:	4b1e      	ldr	r3, [pc, #120]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f6:	4a1d      	ldr	r2, [pc, #116]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025fc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80025fe:	4b1b      	ldr	r3, [pc, #108]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002602:	4a1a      	ldr	r2, [pc, #104]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002604:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002608:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800260a:	4a18      	ldr	r2, [pc, #96]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002610:	4b16      	ldr	r3, [pc, #88]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002614:	f003 0301 	and.w	r3, r3, #1
 8002618:	2b01      	cmp	r3, #1
 800261a:	d114      	bne.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800261c:	f7fe ff3e 	bl	800149c <HAL_GetTick>
 8002620:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002622:	e00a      	b.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002624:	f7fe ff3a 	bl	800149c <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002632:	4293      	cmp	r3, r2
 8002634:	d901      	bls.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e351      	b.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800263a:	4b0c      	ldr	r3, [pc, #48]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800263c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d0ee      	beq.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800264e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002652:	d111      	bne.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002654:	4b05      	ldr	r3, [pc, #20]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002660:	4b04      	ldr	r3, [pc, #16]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002662:	400b      	ands	r3, r1
 8002664:	4901      	ldr	r1, [pc, #4]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002666:	4313      	orrs	r3, r2
 8002668:	608b      	str	r3, [r1, #8]
 800266a:	e00b      	b.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800266c:	40023800 	.word	0x40023800
 8002670:	40007000 	.word	0x40007000
 8002674:	0ffffcff 	.word	0x0ffffcff
 8002678:	4bac      	ldr	r3, [pc, #688]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	4aab      	ldr	r2, [pc, #684]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800267e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002682:	6093      	str	r3, [r2, #8]
 8002684:	4ba9      	ldr	r3, [pc, #676]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002686:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002690:	49a6      	ldr	r1, [pc, #664]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002692:	4313      	orrs	r3, r2
 8002694:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0310 	and.w	r3, r3, #16
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d010      	beq.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80026a2:	4ba2      	ldr	r3, [pc, #648]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026a8:	4aa0      	ldr	r2, [pc, #640]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026ae:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80026b2:	4b9e      	ldr	r3, [pc, #632]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026b4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026bc:	499b      	ldr	r1, [pc, #620]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d00a      	beq.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026d0:	4b96      	ldr	r3, [pc, #600]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026d6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026de:	4993      	ldr	r1, [pc, #588]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00a      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80026f2:	4b8e      	ldr	r3, [pc, #568]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026f8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002700:	498a      	ldr	r1, [pc, #552]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002702:	4313      	orrs	r3, r2
 8002704:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d00a      	beq.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002714:	4b85      	ldr	r3, [pc, #532]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800271a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002722:	4982      	ldr	r1, [pc, #520]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002724:	4313      	orrs	r3, r2
 8002726:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d00a      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002736:	4b7d      	ldr	r3, [pc, #500]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002738:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800273c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002744:	4979      	ldr	r1, [pc, #484]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002746:	4313      	orrs	r3, r2
 8002748:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002754:	2b00      	cmp	r3, #0
 8002756:	d00a      	beq.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002758:	4b74      	ldr	r3, [pc, #464]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800275a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800275e:	f023 0203 	bic.w	r2, r3, #3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002766:	4971      	ldr	r1, [pc, #452]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002768:	4313      	orrs	r3, r2
 800276a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002776:	2b00      	cmp	r3, #0
 8002778:	d00a      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800277a:	4b6c      	ldr	r3, [pc, #432]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800277c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002780:	f023 020c 	bic.w	r2, r3, #12
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002788:	4968      	ldr	r1, [pc, #416]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800278a:	4313      	orrs	r3, r2
 800278c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002798:	2b00      	cmp	r3, #0
 800279a:	d00a      	beq.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800279c:	4b63      	ldr	r3, [pc, #396]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800279e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027a2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027aa:	4960      	ldr	r1, [pc, #384]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d00a      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80027be:	4b5b      	ldr	r3, [pc, #364]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027c4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027cc:	4957      	ldr	r1, [pc, #348]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d00a      	beq.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80027e0:	4b52      	ldr	r3, [pc, #328]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ee:	494f      	ldr	r1, [pc, #316]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d00a      	beq.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002802:	4b4a      	ldr	r3, [pc, #296]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002808:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002810:	4946      	ldr	r1, [pc, #280]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002812:	4313      	orrs	r3, r2
 8002814:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d00a      	beq.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002824:	4b41      	ldr	r3, [pc, #260]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800282a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002832:	493e      	ldr	r1, [pc, #248]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002834:	4313      	orrs	r3, r2
 8002836:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d00a      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002846:	4b39      	ldr	r3, [pc, #228]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800284c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002854:	4935      	ldr	r1, [pc, #212]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002856:	4313      	orrs	r3, r2
 8002858:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d00a      	beq.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002868:	4b30      	ldr	r3, [pc, #192]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800286a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800286e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002876:	492d      	ldr	r1, [pc, #180]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002878:	4313      	orrs	r3, r2
 800287a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d011      	beq.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800288a:	4b28      	ldr	r3, [pc, #160]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800288c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002890:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002898:	4924      	ldr	r1, [pc, #144]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800289a:	4313      	orrs	r3, r2
 800289c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028a8:	d101      	bne.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80028aa:	2301      	movs	r3, #1
 80028ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0308 	and.w	r3, r3, #8
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80028ba:	2301      	movs	r3, #1
 80028bc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00a      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028ca:	4b18      	ldr	r3, [pc, #96]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028d0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028d8:	4914      	ldr	r1, [pc, #80]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d00b      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80028ec:	4b0f      	ldr	r3, [pc, #60]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028f2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028fc:	490b      	ldr	r1, [pc, #44]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d00f      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002910:	4b06      	ldr	r3, [pc, #24]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002916:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002920:	4902      	ldr	r1, [pc, #8]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002922:	4313      	orrs	r3, r2
 8002924:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002928:	e002      	b.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800292a:	bf00      	nop
 800292c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d00b      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800293c:	4b8a      	ldr	r3, [pc, #552]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800293e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002942:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800294c:	4986      	ldr	r1, [pc, #536]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800294e:	4313      	orrs	r3, r2
 8002950:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d00b      	beq.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002960:	4b81      	ldr	r3, [pc, #516]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002962:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002966:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002970:	497d      	ldr	r1, [pc, #500]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002972:	4313      	orrs	r3, r2
 8002974:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	2b01      	cmp	r3, #1
 800297c:	d006      	beq.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002986:	2b00      	cmp	r3, #0
 8002988:	f000 80d6 	beq.w	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800298c:	4b76      	ldr	r3, [pc, #472]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a75      	ldr	r2, [pc, #468]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002992:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002996:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002998:	f7fe fd80 	bl	800149c <HAL_GetTick>
 800299c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800299e:	e008      	b.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80029a0:	f7fe fd7c 	bl	800149c <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b64      	cmp	r3, #100	; 0x64
 80029ac:	d901      	bls.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e195      	b.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80029b2:	4b6d      	ldr	r3, [pc, #436]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1f0      	bne.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d021      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x572>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d11d      	bne.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80029d2:	4b65      	ldr	r3, [pc, #404]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029d8:	0c1b      	lsrs	r3, r3, #16
 80029da:	f003 0303 	and.w	r3, r3, #3
 80029de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80029e0:	4b61      	ldr	r3, [pc, #388]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029e6:	0e1b      	lsrs	r3, r3, #24
 80029e8:	f003 030f 	and.w	r3, r3, #15
 80029ec:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	019a      	lsls	r2, r3, #6
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	041b      	lsls	r3, r3, #16
 80029f8:	431a      	orrs	r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	061b      	lsls	r3, r3, #24
 80029fe:	431a      	orrs	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	071b      	lsls	r3, r3, #28
 8002a06:	4958      	ldr	r1, [pc, #352]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d004      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a22:	d00a      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d02e      	beq.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a38:	d129      	bne.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002a3a:	4b4b      	ldr	r3, [pc, #300]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a40:	0c1b      	lsrs	r3, r3, #16
 8002a42:	f003 0303 	and.w	r3, r3, #3
 8002a46:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002a48:	4b47      	ldr	r3, [pc, #284]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a4e:	0f1b      	lsrs	r3, r3, #28
 8002a50:	f003 0307 	and.w	r3, r3, #7
 8002a54:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	019a      	lsls	r2, r3, #6
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	041b      	lsls	r3, r3, #16
 8002a60:	431a      	orrs	r2, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	061b      	lsls	r3, r3, #24
 8002a68:	431a      	orrs	r2, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	071b      	lsls	r3, r3, #28
 8002a6e:	493e      	ldr	r1, [pc, #248]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002a76:	4b3c      	ldr	r3, [pc, #240]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a7c:	f023 021f 	bic.w	r2, r3, #31
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a84:	3b01      	subs	r3, #1
 8002a86:	4938      	ldr	r1, [pc, #224]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d01d      	beq.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002a9a:	4b33      	ldr	r3, [pc, #204]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002aa0:	0e1b      	lsrs	r3, r3, #24
 8002aa2:	f003 030f 	and.w	r3, r3, #15
 8002aa6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002aa8:	4b2f      	ldr	r3, [pc, #188]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002aaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002aae:	0f1b      	lsrs	r3, r3, #28
 8002ab0:	f003 0307 	and.w	r3, r3, #7
 8002ab4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	019a      	lsls	r2, r3, #6
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	691b      	ldr	r3, [r3, #16]
 8002ac0:	041b      	lsls	r3, r3, #16
 8002ac2:	431a      	orrs	r2, r3
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	061b      	lsls	r3, r3, #24
 8002ac8:	431a      	orrs	r2, r3
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	071b      	lsls	r3, r3, #28
 8002ace:	4926      	ldr	r1, [pc, #152]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d011      	beq.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	019a      	lsls	r2, r3, #6
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	691b      	ldr	r3, [r3, #16]
 8002aec:	041b      	lsls	r3, r3, #16
 8002aee:	431a      	orrs	r2, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	061b      	lsls	r3, r3, #24
 8002af6:	431a      	orrs	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	071b      	lsls	r3, r3, #28
 8002afe:	491a      	ldr	r1, [pc, #104]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002b06:	4b18      	ldr	r3, [pc, #96]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a17      	ldr	r2, [pc, #92]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b0c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b12:	f7fe fcc3 	bl	800149c <HAL_GetTick>
 8002b16:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b18:	e008      	b.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002b1a:	f7fe fcbf 	bl	800149c <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	2b64      	cmp	r3, #100	; 0x64
 8002b26:	d901      	bls.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e0d8      	b.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b2c:	4b0e      	ldr	r3, [pc, #56]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d0f0      	beq.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	f040 80ce 	bne.w	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002b40:	4b09      	ldr	r3, [pc, #36]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a08      	ldr	r2, [pc, #32]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b4c:	f7fe fca6 	bl	800149c <HAL_GetTick>
 8002b50:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002b52:	e00b      	b.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002b54:	f7fe fca2 	bl	800149c <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b64      	cmp	r3, #100	; 0x64
 8002b60:	d904      	bls.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e0bb      	b.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002b66:	bf00      	nop
 8002b68:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002b6c:	4b5e      	ldr	r3, [pc, #376]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b78:	d0ec      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d003      	beq.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d009      	beq.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d02e      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d12a      	bne.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002ba2:	4b51      	ldr	r3, [pc, #324]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba8:	0c1b      	lsrs	r3, r3, #16
 8002baa:	f003 0303 	and.w	r3, r3, #3
 8002bae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002bb0:	4b4d      	ldr	r3, [pc, #308]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bb6:	0f1b      	lsrs	r3, r3, #28
 8002bb8:	f003 0307 	and.w	r3, r3, #7
 8002bbc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	695b      	ldr	r3, [r3, #20]
 8002bc2:	019a      	lsls	r2, r3, #6
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	041b      	lsls	r3, r3, #16
 8002bc8:	431a      	orrs	r2, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	061b      	lsls	r3, r3, #24
 8002bd0:	431a      	orrs	r2, r3
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	071b      	lsls	r3, r3, #28
 8002bd6:	4944      	ldr	r1, [pc, #272]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002bde:	4b42      	ldr	r3, [pc, #264]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002be0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002be4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bec:	3b01      	subs	r3, #1
 8002bee:	021b      	lsls	r3, r3, #8
 8002bf0:	493d      	ldr	r1, [pc, #244]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d022      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c0c:	d11d      	bne.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002c0e:	4b36      	ldr	r3, [pc, #216]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c14:	0e1b      	lsrs	r3, r3, #24
 8002c16:	f003 030f 	and.w	r3, r3, #15
 8002c1a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002c1c:	4b32      	ldr	r3, [pc, #200]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c22:	0f1b      	lsrs	r3, r3, #28
 8002c24:	f003 0307 	and.w	r3, r3, #7
 8002c28:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	695b      	ldr	r3, [r3, #20]
 8002c2e:	019a      	lsls	r2, r3, #6
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a1b      	ldr	r3, [r3, #32]
 8002c34:	041b      	lsls	r3, r3, #16
 8002c36:	431a      	orrs	r2, r3
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	061b      	lsls	r3, r3, #24
 8002c3c:	431a      	orrs	r2, r3
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	071b      	lsls	r3, r3, #28
 8002c42:	4929      	ldr	r1, [pc, #164]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0308 	and.w	r3, r3, #8
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d028      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002c56:	4b24      	ldr	r3, [pc, #144]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c5c:	0e1b      	lsrs	r3, r3, #24
 8002c5e:	f003 030f 	and.w	r3, r3, #15
 8002c62:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002c64:	4b20      	ldr	r3, [pc, #128]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c6a:	0c1b      	lsrs	r3, r3, #16
 8002c6c:	f003 0303 	and.w	r3, r3, #3
 8002c70:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	019a      	lsls	r2, r3, #6
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	041b      	lsls	r3, r3, #16
 8002c7c:	431a      	orrs	r2, r3
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	061b      	lsls	r3, r3, #24
 8002c82:	431a      	orrs	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	69db      	ldr	r3, [r3, #28]
 8002c88:	071b      	lsls	r3, r3, #28
 8002c8a:	4917      	ldr	r1, [pc, #92]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002c92:	4b15      	ldr	r3, [pc, #84]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c98:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca0:	4911      	ldr	r1, [pc, #68]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002ca8:	4b0f      	ldr	r3, [pc, #60]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a0e      	ldr	r2, [pc, #56]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002cae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cb4:	f7fe fbf2 	bl	800149c <HAL_GetTick>
 8002cb8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002cba:	e008      	b.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002cbc:	f7fe fbee 	bl	800149c <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b64      	cmp	r3, #100	; 0x64
 8002cc8:	d901      	bls.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e007      	b.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002cce:	4b06      	ldr	r3, [pc, #24]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002cd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cda:	d1ef      	bne.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3720      	adds	r7, #32
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	40023800 	.word	0x40023800

08002cec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d101      	bne.n	8002cfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e040      	b.n	8002d80 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d106      	bne.n	8002d14 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f7fe faea 	bl	80012e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2224      	movs	r2, #36	; 0x24
 8002d18:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f022 0201 	bic.w	r2, r2, #1
 8002d28:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 f8b0 	bl	8002e90 <UART_SetConfig>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d101      	bne.n	8002d3a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e022      	b.n	8002d80 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d002      	beq.n	8002d48 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f000 fb08 	bl	8003358 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	685a      	ldr	r2, [r3, #4]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d56:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	689a      	ldr	r2, [r3, #8]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d66:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f042 0201 	orr.w	r2, r2, #1
 8002d76:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f000 fb8f 	bl	800349c <UART_CheckIdleState>
 8002d7e:	4603      	mov	r3, r0
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3708      	adds	r7, #8
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b08a      	sub	sp, #40	; 0x28
 8002d8c:	af02      	add	r7, sp, #8
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	603b      	str	r3, [r7, #0]
 8002d94:	4613      	mov	r3, r2
 8002d96:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d9c:	2b20      	cmp	r3, #32
 8002d9e:	d171      	bne.n	8002e84 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d002      	beq.n	8002dac <HAL_UART_Transmit+0x24>
 8002da6:	88fb      	ldrh	r3, [r7, #6]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d101      	bne.n	8002db0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e06a      	b.n	8002e86 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2221      	movs	r2, #33	; 0x21
 8002dbc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002dbe:	f7fe fb6d 	bl	800149c <HAL_GetTick>
 8002dc2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	88fa      	ldrh	r2, [r7, #6]
 8002dc8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	88fa      	ldrh	r2, [r7, #6]
 8002dd0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ddc:	d108      	bne.n	8002df0 <HAL_UART_Transmit+0x68>
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	691b      	ldr	r3, [r3, #16]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d104      	bne.n	8002df0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002de6:	2300      	movs	r3, #0
 8002de8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	61bb      	str	r3, [r7, #24]
 8002dee:	e003      	b.n	8002df8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002df4:	2300      	movs	r3, #0
 8002df6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002df8:	e02c      	b.n	8002e54 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	9300      	str	r3, [sp, #0]
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	2200      	movs	r2, #0
 8002e02:	2180      	movs	r1, #128	; 0x80
 8002e04:	68f8      	ldr	r0, [r7, #12]
 8002e06:	f000 fb96 	bl	8003536 <UART_WaitOnFlagUntilTimeout>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d001      	beq.n	8002e14 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e038      	b.n	8002e86 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d10b      	bne.n	8002e32 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	881b      	ldrh	r3, [r3, #0]
 8002e1e:	461a      	mov	r2, r3
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e28:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	3302      	adds	r3, #2
 8002e2e:	61bb      	str	r3, [r7, #24]
 8002e30:	e007      	b.n	8002e42 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	781a      	ldrb	r2, [r3, #0]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	3301      	adds	r3, #1
 8002e40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	b29a      	uxth	r2, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d1cc      	bne.n	8002dfa <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	9300      	str	r3, [sp, #0]
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	2200      	movs	r2, #0
 8002e68:	2140      	movs	r1, #64	; 0x40
 8002e6a:	68f8      	ldr	r0, [r7, #12]
 8002e6c:	f000 fb63 	bl	8003536 <UART_WaitOnFlagUntilTimeout>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e005      	b.n	8002e86 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2220      	movs	r2, #32
 8002e7e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002e80:	2300      	movs	r3, #0
 8002e82:	e000      	b.n	8002e86 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002e84:	2302      	movs	r3, #2
  }
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3720      	adds	r7, #32
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
	...

08002e90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b088      	sub	sp, #32
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689a      	ldr	r2, [r3, #8]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	691b      	ldr	r3, [r3, #16]
 8002ea4:	431a      	orrs	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	431a      	orrs	r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	69db      	ldr	r3, [r3, #28]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	4ba6      	ldr	r3, [pc, #664]	; (8003154 <UART_SetConfig+0x2c4>)
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	6812      	ldr	r2, [r2, #0]
 8002ec2:	6979      	ldr	r1, [r7, #20]
 8002ec4:	430b      	orrs	r3, r1
 8002ec6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	68da      	ldr	r2, [r3, #12]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	430a      	orrs	r2, r1
 8002edc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a1b      	ldr	r3, [r3, #32]
 8002ee8:	697a      	ldr	r2, [r7, #20]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	697a      	ldr	r2, [r7, #20]
 8002efe:	430a      	orrs	r2, r1
 8002f00:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a94      	ldr	r2, [pc, #592]	; (8003158 <UART_SetConfig+0x2c8>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d120      	bne.n	8002f4e <UART_SetConfig+0xbe>
 8002f0c:	4b93      	ldr	r3, [pc, #588]	; (800315c <UART_SetConfig+0x2cc>)
 8002f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f12:	f003 0303 	and.w	r3, r3, #3
 8002f16:	2b03      	cmp	r3, #3
 8002f18:	d816      	bhi.n	8002f48 <UART_SetConfig+0xb8>
 8002f1a:	a201      	add	r2, pc, #4	; (adr r2, 8002f20 <UART_SetConfig+0x90>)
 8002f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f20:	08002f31 	.word	0x08002f31
 8002f24:	08002f3d 	.word	0x08002f3d
 8002f28:	08002f37 	.word	0x08002f37
 8002f2c:	08002f43 	.word	0x08002f43
 8002f30:	2301      	movs	r3, #1
 8002f32:	77fb      	strb	r3, [r7, #31]
 8002f34:	e150      	b.n	80031d8 <UART_SetConfig+0x348>
 8002f36:	2302      	movs	r3, #2
 8002f38:	77fb      	strb	r3, [r7, #31]
 8002f3a:	e14d      	b.n	80031d8 <UART_SetConfig+0x348>
 8002f3c:	2304      	movs	r3, #4
 8002f3e:	77fb      	strb	r3, [r7, #31]
 8002f40:	e14a      	b.n	80031d8 <UART_SetConfig+0x348>
 8002f42:	2308      	movs	r3, #8
 8002f44:	77fb      	strb	r3, [r7, #31]
 8002f46:	e147      	b.n	80031d8 <UART_SetConfig+0x348>
 8002f48:	2310      	movs	r3, #16
 8002f4a:	77fb      	strb	r3, [r7, #31]
 8002f4c:	e144      	b.n	80031d8 <UART_SetConfig+0x348>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a83      	ldr	r2, [pc, #524]	; (8003160 <UART_SetConfig+0x2d0>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d132      	bne.n	8002fbe <UART_SetConfig+0x12e>
 8002f58:	4b80      	ldr	r3, [pc, #512]	; (800315c <UART_SetConfig+0x2cc>)
 8002f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f5e:	f003 030c 	and.w	r3, r3, #12
 8002f62:	2b0c      	cmp	r3, #12
 8002f64:	d828      	bhi.n	8002fb8 <UART_SetConfig+0x128>
 8002f66:	a201      	add	r2, pc, #4	; (adr r2, 8002f6c <UART_SetConfig+0xdc>)
 8002f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f6c:	08002fa1 	.word	0x08002fa1
 8002f70:	08002fb9 	.word	0x08002fb9
 8002f74:	08002fb9 	.word	0x08002fb9
 8002f78:	08002fb9 	.word	0x08002fb9
 8002f7c:	08002fad 	.word	0x08002fad
 8002f80:	08002fb9 	.word	0x08002fb9
 8002f84:	08002fb9 	.word	0x08002fb9
 8002f88:	08002fb9 	.word	0x08002fb9
 8002f8c:	08002fa7 	.word	0x08002fa7
 8002f90:	08002fb9 	.word	0x08002fb9
 8002f94:	08002fb9 	.word	0x08002fb9
 8002f98:	08002fb9 	.word	0x08002fb9
 8002f9c:	08002fb3 	.word	0x08002fb3
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	77fb      	strb	r3, [r7, #31]
 8002fa4:	e118      	b.n	80031d8 <UART_SetConfig+0x348>
 8002fa6:	2302      	movs	r3, #2
 8002fa8:	77fb      	strb	r3, [r7, #31]
 8002faa:	e115      	b.n	80031d8 <UART_SetConfig+0x348>
 8002fac:	2304      	movs	r3, #4
 8002fae:	77fb      	strb	r3, [r7, #31]
 8002fb0:	e112      	b.n	80031d8 <UART_SetConfig+0x348>
 8002fb2:	2308      	movs	r3, #8
 8002fb4:	77fb      	strb	r3, [r7, #31]
 8002fb6:	e10f      	b.n	80031d8 <UART_SetConfig+0x348>
 8002fb8:	2310      	movs	r3, #16
 8002fba:	77fb      	strb	r3, [r7, #31]
 8002fbc:	e10c      	b.n	80031d8 <UART_SetConfig+0x348>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a68      	ldr	r2, [pc, #416]	; (8003164 <UART_SetConfig+0x2d4>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d120      	bne.n	800300a <UART_SetConfig+0x17a>
 8002fc8:	4b64      	ldr	r3, [pc, #400]	; (800315c <UART_SetConfig+0x2cc>)
 8002fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fce:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002fd2:	2b30      	cmp	r3, #48	; 0x30
 8002fd4:	d013      	beq.n	8002ffe <UART_SetConfig+0x16e>
 8002fd6:	2b30      	cmp	r3, #48	; 0x30
 8002fd8:	d814      	bhi.n	8003004 <UART_SetConfig+0x174>
 8002fda:	2b20      	cmp	r3, #32
 8002fdc:	d009      	beq.n	8002ff2 <UART_SetConfig+0x162>
 8002fde:	2b20      	cmp	r3, #32
 8002fe0:	d810      	bhi.n	8003004 <UART_SetConfig+0x174>
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d002      	beq.n	8002fec <UART_SetConfig+0x15c>
 8002fe6:	2b10      	cmp	r3, #16
 8002fe8:	d006      	beq.n	8002ff8 <UART_SetConfig+0x168>
 8002fea:	e00b      	b.n	8003004 <UART_SetConfig+0x174>
 8002fec:	2300      	movs	r3, #0
 8002fee:	77fb      	strb	r3, [r7, #31]
 8002ff0:	e0f2      	b.n	80031d8 <UART_SetConfig+0x348>
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	77fb      	strb	r3, [r7, #31]
 8002ff6:	e0ef      	b.n	80031d8 <UART_SetConfig+0x348>
 8002ff8:	2304      	movs	r3, #4
 8002ffa:	77fb      	strb	r3, [r7, #31]
 8002ffc:	e0ec      	b.n	80031d8 <UART_SetConfig+0x348>
 8002ffe:	2308      	movs	r3, #8
 8003000:	77fb      	strb	r3, [r7, #31]
 8003002:	e0e9      	b.n	80031d8 <UART_SetConfig+0x348>
 8003004:	2310      	movs	r3, #16
 8003006:	77fb      	strb	r3, [r7, #31]
 8003008:	e0e6      	b.n	80031d8 <UART_SetConfig+0x348>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a56      	ldr	r2, [pc, #344]	; (8003168 <UART_SetConfig+0x2d8>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d120      	bne.n	8003056 <UART_SetConfig+0x1c6>
 8003014:	4b51      	ldr	r3, [pc, #324]	; (800315c <UART_SetConfig+0x2cc>)
 8003016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800301a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800301e:	2bc0      	cmp	r3, #192	; 0xc0
 8003020:	d013      	beq.n	800304a <UART_SetConfig+0x1ba>
 8003022:	2bc0      	cmp	r3, #192	; 0xc0
 8003024:	d814      	bhi.n	8003050 <UART_SetConfig+0x1c0>
 8003026:	2b80      	cmp	r3, #128	; 0x80
 8003028:	d009      	beq.n	800303e <UART_SetConfig+0x1ae>
 800302a:	2b80      	cmp	r3, #128	; 0x80
 800302c:	d810      	bhi.n	8003050 <UART_SetConfig+0x1c0>
 800302e:	2b00      	cmp	r3, #0
 8003030:	d002      	beq.n	8003038 <UART_SetConfig+0x1a8>
 8003032:	2b40      	cmp	r3, #64	; 0x40
 8003034:	d006      	beq.n	8003044 <UART_SetConfig+0x1b4>
 8003036:	e00b      	b.n	8003050 <UART_SetConfig+0x1c0>
 8003038:	2300      	movs	r3, #0
 800303a:	77fb      	strb	r3, [r7, #31]
 800303c:	e0cc      	b.n	80031d8 <UART_SetConfig+0x348>
 800303e:	2302      	movs	r3, #2
 8003040:	77fb      	strb	r3, [r7, #31]
 8003042:	e0c9      	b.n	80031d8 <UART_SetConfig+0x348>
 8003044:	2304      	movs	r3, #4
 8003046:	77fb      	strb	r3, [r7, #31]
 8003048:	e0c6      	b.n	80031d8 <UART_SetConfig+0x348>
 800304a:	2308      	movs	r3, #8
 800304c:	77fb      	strb	r3, [r7, #31]
 800304e:	e0c3      	b.n	80031d8 <UART_SetConfig+0x348>
 8003050:	2310      	movs	r3, #16
 8003052:	77fb      	strb	r3, [r7, #31]
 8003054:	e0c0      	b.n	80031d8 <UART_SetConfig+0x348>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a44      	ldr	r2, [pc, #272]	; (800316c <UART_SetConfig+0x2dc>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d125      	bne.n	80030ac <UART_SetConfig+0x21c>
 8003060:	4b3e      	ldr	r3, [pc, #248]	; (800315c <UART_SetConfig+0x2cc>)
 8003062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003066:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800306a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800306e:	d017      	beq.n	80030a0 <UART_SetConfig+0x210>
 8003070:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003074:	d817      	bhi.n	80030a6 <UART_SetConfig+0x216>
 8003076:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800307a:	d00b      	beq.n	8003094 <UART_SetConfig+0x204>
 800307c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003080:	d811      	bhi.n	80030a6 <UART_SetConfig+0x216>
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <UART_SetConfig+0x1fe>
 8003086:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800308a:	d006      	beq.n	800309a <UART_SetConfig+0x20a>
 800308c:	e00b      	b.n	80030a6 <UART_SetConfig+0x216>
 800308e:	2300      	movs	r3, #0
 8003090:	77fb      	strb	r3, [r7, #31]
 8003092:	e0a1      	b.n	80031d8 <UART_SetConfig+0x348>
 8003094:	2302      	movs	r3, #2
 8003096:	77fb      	strb	r3, [r7, #31]
 8003098:	e09e      	b.n	80031d8 <UART_SetConfig+0x348>
 800309a:	2304      	movs	r3, #4
 800309c:	77fb      	strb	r3, [r7, #31]
 800309e:	e09b      	b.n	80031d8 <UART_SetConfig+0x348>
 80030a0:	2308      	movs	r3, #8
 80030a2:	77fb      	strb	r3, [r7, #31]
 80030a4:	e098      	b.n	80031d8 <UART_SetConfig+0x348>
 80030a6:	2310      	movs	r3, #16
 80030a8:	77fb      	strb	r3, [r7, #31]
 80030aa:	e095      	b.n	80031d8 <UART_SetConfig+0x348>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a2f      	ldr	r2, [pc, #188]	; (8003170 <UART_SetConfig+0x2e0>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d125      	bne.n	8003102 <UART_SetConfig+0x272>
 80030b6:	4b29      	ldr	r3, [pc, #164]	; (800315c <UART_SetConfig+0x2cc>)
 80030b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030bc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80030c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80030c4:	d017      	beq.n	80030f6 <UART_SetConfig+0x266>
 80030c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80030ca:	d817      	bhi.n	80030fc <UART_SetConfig+0x26c>
 80030cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030d0:	d00b      	beq.n	80030ea <UART_SetConfig+0x25a>
 80030d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030d6:	d811      	bhi.n	80030fc <UART_SetConfig+0x26c>
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d003      	beq.n	80030e4 <UART_SetConfig+0x254>
 80030dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030e0:	d006      	beq.n	80030f0 <UART_SetConfig+0x260>
 80030e2:	e00b      	b.n	80030fc <UART_SetConfig+0x26c>
 80030e4:	2301      	movs	r3, #1
 80030e6:	77fb      	strb	r3, [r7, #31]
 80030e8:	e076      	b.n	80031d8 <UART_SetConfig+0x348>
 80030ea:	2302      	movs	r3, #2
 80030ec:	77fb      	strb	r3, [r7, #31]
 80030ee:	e073      	b.n	80031d8 <UART_SetConfig+0x348>
 80030f0:	2304      	movs	r3, #4
 80030f2:	77fb      	strb	r3, [r7, #31]
 80030f4:	e070      	b.n	80031d8 <UART_SetConfig+0x348>
 80030f6:	2308      	movs	r3, #8
 80030f8:	77fb      	strb	r3, [r7, #31]
 80030fa:	e06d      	b.n	80031d8 <UART_SetConfig+0x348>
 80030fc:	2310      	movs	r3, #16
 80030fe:	77fb      	strb	r3, [r7, #31]
 8003100:	e06a      	b.n	80031d8 <UART_SetConfig+0x348>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a1b      	ldr	r2, [pc, #108]	; (8003174 <UART_SetConfig+0x2e4>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d138      	bne.n	800317e <UART_SetConfig+0x2ee>
 800310c:	4b13      	ldr	r3, [pc, #76]	; (800315c <UART_SetConfig+0x2cc>)
 800310e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003112:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003116:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800311a:	d017      	beq.n	800314c <UART_SetConfig+0x2bc>
 800311c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003120:	d82a      	bhi.n	8003178 <UART_SetConfig+0x2e8>
 8003122:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003126:	d00b      	beq.n	8003140 <UART_SetConfig+0x2b0>
 8003128:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800312c:	d824      	bhi.n	8003178 <UART_SetConfig+0x2e8>
 800312e:	2b00      	cmp	r3, #0
 8003130:	d003      	beq.n	800313a <UART_SetConfig+0x2aa>
 8003132:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003136:	d006      	beq.n	8003146 <UART_SetConfig+0x2b6>
 8003138:	e01e      	b.n	8003178 <UART_SetConfig+0x2e8>
 800313a:	2300      	movs	r3, #0
 800313c:	77fb      	strb	r3, [r7, #31]
 800313e:	e04b      	b.n	80031d8 <UART_SetConfig+0x348>
 8003140:	2302      	movs	r3, #2
 8003142:	77fb      	strb	r3, [r7, #31]
 8003144:	e048      	b.n	80031d8 <UART_SetConfig+0x348>
 8003146:	2304      	movs	r3, #4
 8003148:	77fb      	strb	r3, [r7, #31]
 800314a:	e045      	b.n	80031d8 <UART_SetConfig+0x348>
 800314c:	2308      	movs	r3, #8
 800314e:	77fb      	strb	r3, [r7, #31]
 8003150:	e042      	b.n	80031d8 <UART_SetConfig+0x348>
 8003152:	bf00      	nop
 8003154:	efff69f3 	.word	0xefff69f3
 8003158:	40011000 	.word	0x40011000
 800315c:	40023800 	.word	0x40023800
 8003160:	40004400 	.word	0x40004400
 8003164:	40004800 	.word	0x40004800
 8003168:	40004c00 	.word	0x40004c00
 800316c:	40005000 	.word	0x40005000
 8003170:	40011400 	.word	0x40011400
 8003174:	40007800 	.word	0x40007800
 8003178:	2310      	movs	r3, #16
 800317a:	77fb      	strb	r3, [r7, #31]
 800317c:	e02c      	b.n	80031d8 <UART_SetConfig+0x348>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a72      	ldr	r2, [pc, #456]	; (800334c <UART_SetConfig+0x4bc>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d125      	bne.n	80031d4 <UART_SetConfig+0x344>
 8003188:	4b71      	ldr	r3, [pc, #452]	; (8003350 <UART_SetConfig+0x4c0>)
 800318a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800318e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003192:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003196:	d017      	beq.n	80031c8 <UART_SetConfig+0x338>
 8003198:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800319c:	d817      	bhi.n	80031ce <UART_SetConfig+0x33e>
 800319e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031a2:	d00b      	beq.n	80031bc <UART_SetConfig+0x32c>
 80031a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031a8:	d811      	bhi.n	80031ce <UART_SetConfig+0x33e>
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d003      	beq.n	80031b6 <UART_SetConfig+0x326>
 80031ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031b2:	d006      	beq.n	80031c2 <UART_SetConfig+0x332>
 80031b4:	e00b      	b.n	80031ce <UART_SetConfig+0x33e>
 80031b6:	2300      	movs	r3, #0
 80031b8:	77fb      	strb	r3, [r7, #31]
 80031ba:	e00d      	b.n	80031d8 <UART_SetConfig+0x348>
 80031bc:	2302      	movs	r3, #2
 80031be:	77fb      	strb	r3, [r7, #31]
 80031c0:	e00a      	b.n	80031d8 <UART_SetConfig+0x348>
 80031c2:	2304      	movs	r3, #4
 80031c4:	77fb      	strb	r3, [r7, #31]
 80031c6:	e007      	b.n	80031d8 <UART_SetConfig+0x348>
 80031c8:	2308      	movs	r3, #8
 80031ca:	77fb      	strb	r3, [r7, #31]
 80031cc:	e004      	b.n	80031d8 <UART_SetConfig+0x348>
 80031ce:	2310      	movs	r3, #16
 80031d0:	77fb      	strb	r3, [r7, #31]
 80031d2:	e001      	b.n	80031d8 <UART_SetConfig+0x348>
 80031d4:	2310      	movs	r3, #16
 80031d6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	69db      	ldr	r3, [r3, #28]
 80031dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031e0:	d15b      	bne.n	800329a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80031e2:	7ffb      	ldrb	r3, [r7, #31]
 80031e4:	2b08      	cmp	r3, #8
 80031e6:	d828      	bhi.n	800323a <UART_SetConfig+0x3aa>
 80031e8:	a201      	add	r2, pc, #4	; (adr r2, 80031f0 <UART_SetConfig+0x360>)
 80031ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ee:	bf00      	nop
 80031f0:	08003215 	.word	0x08003215
 80031f4:	0800321d 	.word	0x0800321d
 80031f8:	08003225 	.word	0x08003225
 80031fc:	0800323b 	.word	0x0800323b
 8003200:	0800322b 	.word	0x0800322b
 8003204:	0800323b 	.word	0x0800323b
 8003208:	0800323b 	.word	0x0800323b
 800320c:	0800323b 	.word	0x0800323b
 8003210:	08003233 	.word	0x08003233
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003214:	f7ff f91a 	bl	800244c <HAL_RCC_GetPCLK1Freq>
 8003218:	61b8      	str	r0, [r7, #24]
        break;
 800321a:	e013      	b.n	8003244 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800321c:	f7ff f92a 	bl	8002474 <HAL_RCC_GetPCLK2Freq>
 8003220:	61b8      	str	r0, [r7, #24]
        break;
 8003222:	e00f      	b.n	8003244 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003224:	4b4b      	ldr	r3, [pc, #300]	; (8003354 <UART_SetConfig+0x4c4>)
 8003226:	61bb      	str	r3, [r7, #24]
        break;
 8003228:	e00c      	b.n	8003244 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800322a:	f7fe fffd 	bl	8002228 <HAL_RCC_GetSysClockFreq>
 800322e:	61b8      	str	r0, [r7, #24]
        break;
 8003230:	e008      	b.n	8003244 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003232:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003236:	61bb      	str	r3, [r7, #24]
        break;
 8003238:	e004      	b.n	8003244 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800323a:	2300      	movs	r3, #0
 800323c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	77bb      	strb	r3, [r7, #30]
        break;
 8003242:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d074      	beq.n	8003334 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	005a      	lsls	r2, r3, #1
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	085b      	lsrs	r3, r3, #1
 8003254:	441a      	add	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	fbb2 f3f3 	udiv	r3, r2, r3
 800325e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	2b0f      	cmp	r3, #15
 8003264:	d916      	bls.n	8003294 <UART_SetConfig+0x404>
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800326c:	d212      	bcs.n	8003294 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	b29b      	uxth	r3, r3
 8003272:	f023 030f 	bic.w	r3, r3, #15
 8003276:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	085b      	lsrs	r3, r3, #1
 800327c:	b29b      	uxth	r3, r3
 800327e:	f003 0307 	and.w	r3, r3, #7
 8003282:	b29a      	uxth	r2, r3
 8003284:	89fb      	ldrh	r3, [r7, #14]
 8003286:	4313      	orrs	r3, r2
 8003288:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	89fa      	ldrh	r2, [r7, #14]
 8003290:	60da      	str	r2, [r3, #12]
 8003292:	e04f      	b.n	8003334 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	77bb      	strb	r3, [r7, #30]
 8003298:	e04c      	b.n	8003334 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800329a:	7ffb      	ldrb	r3, [r7, #31]
 800329c:	2b08      	cmp	r3, #8
 800329e:	d828      	bhi.n	80032f2 <UART_SetConfig+0x462>
 80032a0:	a201      	add	r2, pc, #4	; (adr r2, 80032a8 <UART_SetConfig+0x418>)
 80032a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a6:	bf00      	nop
 80032a8:	080032cd 	.word	0x080032cd
 80032ac:	080032d5 	.word	0x080032d5
 80032b0:	080032dd 	.word	0x080032dd
 80032b4:	080032f3 	.word	0x080032f3
 80032b8:	080032e3 	.word	0x080032e3
 80032bc:	080032f3 	.word	0x080032f3
 80032c0:	080032f3 	.word	0x080032f3
 80032c4:	080032f3 	.word	0x080032f3
 80032c8:	080032eb 	.word	0x080032eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032cc:	f7ff f8be 	bl	800244c <HAL_RCC_GetPCLK1Freq>
 80032d0:	61b8      	str	r0, [r7, #24]
        break;
 80032d2:	e013      	b.n	80032fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032d4:	f7ff f8ce 	bl	8002474 <HAL_RCC_GetPCLK2Freq>
 80032d8:	61b8      	str	r0, [r7, #24]
        break;
 80032da:	e00f      	b.n	80032fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032dc:	4b1d      	ldr	r3, [pc, #116]	; (8003354 <UART_SetConfig+0x4c4>)
 80032de:	61bb      	str	r3, [r7, #24]
        break;
 80032e0:	e00c      	b.n	80032fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032e2:	f7fe ffa1 	bl	8002228 <HAL_RCC_GetSysClockFreq>
 80032e6:	61b8      	str	r0, [r7, #24]
        break;
 80032e8:	e008      	b.n	80032fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032ee:	61bb      	str	r3, [r7, #24]
        break;
 80032f0:	e004      	b.n	80032fc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80032f2:	2300      	movs	r3, #0
 80032f4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	77bb      	strb	r3, [r7, #30]
        break;
 80032fa:	bf00      	nop
    }

    if (pclk != 0U)
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d018      	beq.n	8003334 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	085a      	lsrs	r2, r3, #1
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	441a      	add	r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	fbb2 f3f3 	udiv	r3, r2, r3
 8003314:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	2b0f      	cmp	r3, #15
 800331a:	d909      	bls.n	8003330 <UART_SetConfig+0x4a0>
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003322:	d205      	bcs.n	8003330 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	b29a      	uxth	r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	60da      	str	r2, [r3, #12]
 800332e:	e001      	b.n	8003334 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003340:	7fbb      	ldrb	r3, [r7, #30]
}
 8003342:	4618      	mov	r0, r3
 8003344:	3720      	adds	r7, #32
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	40007c00 	.word	0x40007c00
 8003350:	40023800 	.word	0x40023800
 8003354:	00f42400 	.word	0x00f42400

08003358 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003364:	f003 0301 	and.w	r3, r3, #1
 8003368:	2b00      	cmp	r3, #0
 800336a:	d00a      	beq.n	8003382 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	430a      	orrs	r2, r1
 8003380:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00a      	beq.n	80033a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	430a      	orrs	r2, r1
 80033a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a8:	f003 0304 	and.w	r3, r3, #4
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d00a      	beq.n	80033c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	430a      	orrs	r2, r1
 80033c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ca:	f003 0308 	and.w	r3, r3, #8
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00a      	beq.n	80033e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	430a      	orrs	r2, r1
 80033e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ec:	f003 0310 	and.w	r3, r3, #16
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00a      	beq.n	800340a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	430a      	orrs	r2, r1
 8003408:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340e:	f003 0320 	and.w	r3, r3, #32
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00a      	beq.n	800342c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	430a      	orrs	r2, r1
 800342a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003434:	2b00      	cmp	r3, #0
 8003436:	d01a      	beq.n	800346e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	430a      	orrs	r2, r1
 800344c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003452:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003456:	d10a      	bne.n	800346e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	430a      	orrs	r2, r1
 800346c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00a      	beq.n	8003490 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	430a      	orrs	r2, r1
 800348e:	605a      	str	r2, [r3, #4]
  }
}
 8003490:	bf00      	nop
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b086      	sub	sp, #24
 80034a0:	af02      	add	r7, sp, #8
 80034a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80034ac:	f7fd fff6 	bl	800149c <HAL_GetTick>
 80034b0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0308 	and.w	r3, r3, #8
 80034bc:	2b08      	cmp	r3, #8
 80034be:	d10e      	bne.n	80034de <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034c4:	9300      	str	r3, [sp, #0]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 f831 	bl	8003536 <UART_WaitOnFlagUntilTimeout>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d001      	beq.n	80034de <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e027      	b.n	800352e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0304 	and.w	r3, r3, #4
 80034e8:	2b04      	cmp	r3, #4
 80034ea:	d10e      	bne.n	800350a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034f0:	9300      	str	r3, [sp, #0]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 f81b 	bl	8003536 <UART_WaitOnFlagUntilTimeout>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d001      	beq.n	800350a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e011      	b.n	800352e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2220      	movs	r2, #32
 800350e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2220      	movs	r2, #32
 8003514:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3710      	adds	r7, #16
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003536:	b580      	push	{r7, lr}
 8003538:	b09c      	sub	sp, #112	; 0x70
 800353a:	af00      	add	r7, sp, #0
 800353c:	60f8      	str	r0, [r7, #12]
 800353e:	60b9      	str	r1, [r7, #8]
 8003540:	603b      	str	r3, [r7, #0]
 8003542:	4613      	mov	r3, r2
 8003544:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003546:	e0a7      	b.n	8003698 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003548:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800354a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800354e:	f000 80a3 	beq.w	8003698 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003552:	f7fd ffa3 	bl	800149c <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800355e:	429a      	cmp	r2, r3
 8003560:	d302      	bcc.n	8003568 <UART_WaitOnFlagUntilTimeout+0x32>
 8003562:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003564:	2b00      	cmp	r3, #0
 8003566:	d13f      	bne.n	80035e8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800356e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003570:	e853 3f00 	ldrex	r3, [r3]
 8003574:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003576:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003578:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800357c:	667b      	str	r3, [r7, #100]	; 0x64
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	461a      	mov	r2, r3
 8003584:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003586:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003588:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800358a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800358c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800358e:	e841 2300 	strex	r3, r2, [r1]
 8003592:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003594:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003596:	2b00      	cmp	r3, #0
 8003598:	d1e6      	bne.n	8003568 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	3308      	adds	r3, #8
 80035a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035a4:	e853 3f00 	ldrex	r3, [r3]
 80035a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80035aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ac:	f023 0301 	bic.w	r3, r3, #1
 80035b0:	663b      	str	r3, [r7, #96]	; 0x60
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	3308      	adds	r3, #8
 80035b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80035ba:	64ba      	str	r2, [r7, #72]	; 0x48
 80035bc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80035c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035c2:	e841 2300 	strex	r3, r2, [r1]
 80035c6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80035c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1e5      	bne.n	800359a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2220      	movs	r2, #32
 80035d2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2220      	movs	r2, #32
 80035d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e068      	b.n	80036ba <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0304 	and.w	r3, r3, #4
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d050      	beq.n	8003698 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	69db      	ldr	r3, [r3, #28]
 80035fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003600:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003604:	d148      	bne.n	8003698 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800360e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003618:	e853 3f00 	ldrex	r3, [r3]
 800361c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800361e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003620:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003624:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	461a      	mov	r2, r3
 800362c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800362e:	637b      	str	r3, [r7, #52]	; 0x34
 8003630:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003632:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003634:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003636:	e841 2300 	strex	r3, r2, [r1]
 800363a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800363c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1e6      	bne.n	8003610 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	3308      	adds	r3, #8
 8003648:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	e853 3f00 	ldrex	r3, [r3]
 8003650:	613b      	str	r3, [r7, #16]
   return(result);
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	f023 0301 	bic.w	r3, r3, #1
 8003658:	66bb      	str	r3, [r7, #104]	; 0x68
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	3308      	adds	r3, #8
 8003660:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003662:	623a      	str	r2, [r7, #32]
 8003664:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003666:	69f9      	ldr	r1, [r7, #28]
 8003668:	6a3a      	ldr	r2, [r7, #32]
 800366a:	e841 2300 	strex	r3, r2, [r1]
 800366e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1e5      	bne.n	8003642 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2220      	movs	r2, #32
 800367a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2220      	movs	r2, #32
 8003680:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2220      	movs	r2, #32
 8003688:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e010      	b.n	80036ba <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	69da      	ldr	r2, [r3, #28]
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	4013      	ands	r3, r2
 80036a2:	68ba      	ldr	r2, [r7, #8]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	bf0c      	ite	eq
 80036a8:	2301      	moveq	r3, #1
 80036aa:	2300      	movne	r3, #0
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	461a      	mov	r2, r3
 80036b0:	79fb      	ldrb	r3, [r7, #7]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	f43f af48 	beq.w	8003548 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3770      	adds	r7, #112	; 0x70
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
	...

080036c4 <std>:
 80036c4:	2300      	movs	r3, #0
 80036c6:	b510      	push	{r4, lr}
 80036c8:	4604      	mov	r4, r0
 80036ca:	e9c0 3300 	strd	r3, r3, [r0]
 80036ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80036d2:	6083      	str	r3, [r0, #8]
 80036d4:	8181      	strh	r1, [r0, #12]
 80036d6:	6643      	str	r3, [r0, #100]	; 0x64
 80036d8:	81c2      	strh	r2, [r0, #14]
 80036da:	6183      	str	r3, [r0, #24]
 80036dc:	4619      	mov	r1, r3
 80036de:	2208      	movs	r2, #8
 80036e0:	305c      	adds	r0, #92	; 0x5c
 80036e2:	f000 f904 	bl	80038ee <memset>
 80036e6:	4b05      	ldr	r3, [pc, #20]	; (80036fc <std+0x38>)
 80036e8:	6263      	str	r3, [r4, #36]	; 0x24
 80036ea:	4b05      	ldr	r3, [pc, #20]	; (8003700 <std+0x3c>)
 80036ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80036ee:	4b05      	ldr	r3, [pc, #20]	; (8003704 <std+0x40>)
 80036f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80036f2:	4b05      	ldr	r3, [pc, #20]	; (8003708 <std+0x44>)
 80036f4:	6224      	str	r4, [r4, #32]
 80036f6:	6323      	str	r3, [r4, #48]	; 0x30
 80036f8:	bd10      	pop	{r4, pc}
 80036fa:	bf00      	nop
 80036fc:	08003865 	.word	0x08003865
 8003700:	0800388b 	.word	0x0800388b
 8003704:	080038c3 	.word	0x080038c3
 8003708:	080038e7 	.word	0x080038e7

0800370c <stdio_exit_handler>:
 800370c:	4a02      	ldr	r2, [pc, #8]	; (8003718 <stdio_exit_handler+0xc>)
 800370e:	4903      	ldr	r1, [pc, #12]	; (800371c <stdio_exit_handler+0x10>)
 8003710:	4803      	ldr	r0, [pc, #12]	; (8003720 <stdio_exit_handler+0x14>)
 8003712:	f000 b869 	b.w	80037e8 <_fwalk_sglue>
 8003716:	bf00      	nop
 8003718:	20000010 	.word	0x20000010
 800371c:	08004c7d 	.word	0x08004c7d
 8003720:	20000024 	.word	0x20000024

08003724 <cleanup_stdio>:
 8003724:	6841      	ldr	r1, [r0, #4]
 8003726:	4b0c      	ldr	r3, [pc, #48]	; (8003758 <cleanup_stdio+0x34>)
 8003728:	4299      	cmp	r1, r3
 800372a:	b510      	push	{r4, lr}
 800372c:	4604      	mov	r4, r0
 800372e:	d001      	beq.n	8003734 <cleanup_stdio+0x10>
 8003730:	f001 faa4 	bl	8004c7c <_fflush_r>
 8003734:	68a1      	ldr	r1, [r4, #8]
 8003736:	4b09      	ldr	r3, [pc, #36]	; (800375c <cleanup_stdio+0x38>)
 8003738:	4299      	cmp	r1, r3
 800373a:	d002      	beq.n	8003742 <cleanup_stdio+0x1e>
 800373c:	4620      	mov	r0, r4
 800373e:	f001 fa9d 	bl	8004c7c <_fflush_r>
 8003742:	68e1      	ldr	r1, [r4, #12]
 8003744:	4b06      	ldr	r3, [pc, #24]	; (8003760 <cleanup_stdio+0x3c>)
 8003746:	4299      	cmp	r1, r3
 8003748:	d004      	beq.n	8003754 <cleanup_stdio+0x30>
 800374a:	4620      	mov	r0, r4
 800374c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003750:	f001 ba94 	b.w	8004c7c <_fflush_r>
 8003754:	bd10      	pop	{r4, pc}
 8003756:	bf00      	nop
 8003758:	20000180 	.word	0x20000180
 800375c:	200001e8 	.word	0x200001e8
 8003760:	20000250 	.word	0x20000250

08003764 <global_stdio_init.part.0>:
 8003764:	b510      	push	{r4, lr}
 8003766:	4b0b      	ldr	r3, [pc, #44]	; (8003794 <global_stdio_init.part.0+0x30>)
 8003768:	4c0b      	ldr	r4, [pc, #44]	; (8003798 <global_stdio_init.part.0+0x34>)
 800376a:	4a0c      	ldr	r2, [pc, #48]	; (800379c <global_stdio_init.part.0+0x38>)
 800376c:	601a      	str	r2, [r3, #0]
 800376e:	4620      	mov	r0, r4
 8003770:	2200      	movs	r2, #0
 8003772:	2104      	movs	r1, #4
 8003774:	f7ff ffa6 	bl	80036c4 <std>
 8003778:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800377c:	2201      	movs	r2, #1
 800377e:	2109      	movs	r1, #9
 8003780:	f7ff ffa0 	bl	80036c4 <std>
 8003784:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003788:	2202      	movs	r2, #2
 800378a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800378e:	2112      	movs	r1, #18
 8003790:	f7ff bf98 	b.w	80036c4 <std>
 8003794:	200002b8 	.word	0x200002b8
 8003798:	20000180 	.word	0x20000180
 800379c:	0800370d 	.word	0x0800370d

080037a0 <__sfp_lock_acquire>:
 80037a0:	4801      	ldr	r0, [pc, #4]	; (80037a8 <__sfp_lock_acquire+0x8>)
 80037a2:	f000 bd0a 	b.w	80041ba <__retarget_lock_acquire_recursive>
 80037a6:	bf00      	nop
 80037a8:	200002e6 	.word	0x200002e6

080037ac <__sfp_lock_release>:
 80037ac:	4801      	ldr	r0, [pc, #4]	; (80037b4 <__sfp_lock_release+0x8>)
 80037ae:	f000 bd06 	b.w	80041be <__retarget_lock_release_recursive>
 80037b2:	bf00      	nop
 80037b4:	200002e6 	.word	0x200002e6

080037b8 <__sinit>:
 80037b8:	b510      	push	{r4, lr}
 80037ba:	4604      	mov	r4, r0
 80037bc:	f7ff fff0 	bl	80037a0 <__sfp_lock_acquire>
 80037c0:	6a23      	ldr	r3, [r4, #32]
 80037c2:	b11b      	cbz	r3, 80037cc <__sinit+0x14>
 80037c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037c8:	f7ff bff0 	b.w	80037ac <__sfp_lock_release>
 80037cc:	4b04      	ldr	r3, [pc, #16]	; (80037e0 <__sinit+0x28>)
 80037ce:	6223      	str	r3, [r4, #32]
 80037d0:	4b04      	ldr	r3, [pc, #16]	; (80037e4 <__sinit+0x2c>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1f5      	bne.n	80037c4 <__sinit+0xc>
 80037d8:	f7ff ffc4 	bl	8003764 <global_stdio_init.part.0>
 80037dc:	e7f2      	b.n	80037c4 <__sinit+0xc>
 80037de:	bf00      	nop
 80037e0:	08003725 	.word	0x08003725
 80037e4:	200002b8 	.word	0x200002b8

080037e8 <_fwalk_sglue>:
 80037e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80037ec:	4607      	mov	r7, r0
 80037ee:	4688      	mov	r8, r1
 80037f0:	4614      	mov	r4, r2
 80037f2:	2600      	movs	r6, #0
 80037f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80037f8:	f1b9 0901 	subs.w	r9, r9, #1
 80037fc:	d505      	bpl.n	800380a <_fwalk_sglue+0x22>
 80037fe:	6824      	ldr	r4, [r4, #0]
 8003800:	2c00      	cmp	r4, #0
 8003802:	d1f7      	bne.n	80037f4 <_fwalk_sglue+0xc>
 8003804:	4630      	mov	r0, r6
 8003806:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800380a:	89ab      	ldrh	r3, [r5, #12]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d907      	bls.n	8003820 <_fwalk_sglue+0x38>
 8003810:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003814:	3301      	adds	r3, #1
 8003816:	d003      	beq.n	8003820 <_fwalk_sglue+0x38>
 8003818:	4629      	mov	r1, r5
 800381a:	4638      	mov	r0, r7
 800381c:	47c0      	blx	r8
 800381e:	4306      	orrs	r6, r0
 8003820:	3568      	adds	r5, #104	; 0x68
 8003822:	e7e9      	b.n	80037f8 <_fwalk_sglue+0x10>

08003824 <siprintf>:
 8003824:	b40e      	push	{r1, r2, r3}
 8003826:	b500      	push	{lr}
 8003828:	b09c      	sub	sp, #112	; 0x70
 800382a:	ab1d      	add	r3, sp, #116	; 0x74
 800382c:	9002      	str	r0, [sp, #8]
 800382e:	9006      	str	r0, [sp, #24]
 8003830:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003834:	4809      	ldr	r0, [pc, #36]	; (800385c <siprintf+0x38>)
 8003836:	9107      	str	r1, [sp, #28]
 8003838:	9104      	str	r1, [sp, #16]
 800383a:	4909      	ldr	r1, [pc, #36]	; (8003860 <siprintf+0x3c>)
 800383c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003840:	9105      	str	r1, [sp, #20]
 8003842:	6800      	ldr	r0, [r0, #0]
 8003844:	9301      	str	r3, [sp, #4]
 8003846:	a902      	add	r1, sp, #8
 8003848:	f000 ff04 	bl	8004654 <_svfiprintf_r>
 800384c:	9b02      	ldr	r3, [sp, #8]
 800384e:	2200      	movs	r2, #0
 8003850:	701a      	strb	r2, [r3, #0]
 8003852:	b01c      	add	sp, #112	; 0x70
 8003854:	f85d eb04 	ldr.w	lr, [sp], #4
 8003858:	b003      	add	sp, #12
 800385a:	4770      	bx	lr
 800385c:	20000070 	.word	0x20000070
 8003860:	ffff0208 	.word	0xffff0208

08003864 <__sread>:
 8003864:	b510      	push	{r4, lr}
 8003866:	460c      	mov	r4, r1
 8003868:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800386c:	f000 fc56 	bl	800411c <_read_r>
 8003870:	2800      	cmp	r0, #0
 8003872:	bfab      	itete	ge
 8003874:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003876:	89a3      	ldrhlt	r3, [r4, #12]
 8003878:	181b      	addge	r3, r3, r0
 800387a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800387e:	bfac      	ite	ge
 8003880:	6563      	strge	r3, [r4, #84]	; 0x54
 8003882:	81a3      	strhlt	r3, [r4, #12]
 8003884:	bd10      	pop	{r4, pc}

08003886 <__seofread>:
 8003886:	2000      	movs	r0, #0
 8003888:	4770      	bx	lr

0800388a <__swrite>:
 800388a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800388e:	461f      	mov	r7, r3
 8003890:	898b      	ldrh	r3, [r1, #12]
 8003892:	05db      	lsls	r3, r3, #23
 8003894:	4605      	mov	r5, r0
 8003896:	460c      	mov	r4, r1
 8003898:	4616      	mov	r6, r2
 800389a:	d505      	bpl.n	80038a8 <__swrite+0x1e>
 800389c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038a0:	2302      	movs	r3, #2
 80038a2:	2200      	movs	r2, #0
 80038a4:	f000 fc28 	bl	80040f8 <_lseek_r>
 80038a8:	89a3      	ldrh	r3, [r4, #12]
 80038aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80038ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80038b2:	81a3      	strh	r3, [r4, #12]
 80038b4:	4632      	mov	r2, r6
 80038b6:	463b      	mov	r3, r7
 80038b8:	4628      	mov	r0, r5
 80038ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80038be:	f000 bc3f 	b.w	8004140 <_write_r>

080038c2 <__sseek>:
 80038c2:	b510      	push	{r4, lr}
 80038c4:	460c      	mov	r4, r1
 80038c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038ca:	f000 fc15 	bl	80040f8 <_lseek_r>
 80038ce:	1c43      	adds	r3, r0, #1
 80038d0:	89a3      	ldrh	r3, [r4, #12]
 80038d2:	bf15      	itete	ne
 80038d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80038d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80038da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80038de:	81a3      	strheq	r3, [r4, #12]
 80038e0:	bf18      	it	ne
 80038e2:	81a3      	strhne	r3, [r4, #12]
 80038e4:	bd10      	pop	{r4, pc}

080038e6 <__sclose>:
 80038e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038ea:	f000 bbf5 	b.w	80040d8 <_close_r>

080038ee <memset>:
 80038ee:	4402      	add	r2, r0
 80038f0:	4603      	mov	r3, r0
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d100      	bne.n	80038f8 <memset+0xa>
 80038f6:	4770      	bx	lr
 80038f8:	f803 1b01 	strb.w	r1, [r3], #1
 80038fc:	e7f9      	b.n	80038f2 <memset+0x4>
	...

08003900 <localtime>:
 8003900:	b538      	push	{r3, r4, r5, lr}
 8003902:	4b0b      	ldr	r3, [pc, #44]	; (8003930 <localtime+0x30>)
 8003904:	681d      	ldr	r5, [r3, #0]
 8003906:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8003908:	4604      	mov	r4, r0
 800390a:	b953      	cbnz	r3, 8003922 <localtime+0x22>
 800390c:	2024      	movs	r0, #36	; 0x24
 800390e:	f000 fd0d 	bl	800432c <malloc>
 8003912:	4602      	mov	r2, r0
 8003914:	6368      	str	r0, [r5, #52]	; 0x34
 8003916:	b920      	cbnz	r0, 8003922 <localtime+0x22>
 8003918:	4b06      	ldr	r3, [pc, #24]	; (8003934 <localtime+0x34>)
 800391a:	4807      	ldr	r0, [pc, #28]	; (8003938 <localtime+0x38>)
 800391c:	2132      	movs	r1, #50	; 0x32
 800391e:	f000 fc57 	bl	80041d0 <__assert_func>
 8003922:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8003924:	4620      	mov	r0, r4
 8003926:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800392a:	f000 b807 	b.w	800393c <localtime_r>
 800392e:	bf00      	nop
 8003930:	20000070 	.word	0x20000070
 8003934:	08005f08 	.word	0x08005f08
 8003938:	08005f1f 	.word	0x08005f1f

0800393c <localtime_r>:
 800393c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003940:	4680      	mov	r8, r0
 8003942:	9101      	str	r1, [sp, #4]
 8003944:	f001 fa2c 	bl	8004da0 <__gettzinfo>
 8003948:	9901      	ldr	r1, [sp, #4]
 800394a:	4605      	mov	r5, r0
 800394c:	4640      	mov	r0, r8
 800394e:	f001 fa2b 	bl	8004da8 <gmtime_r>
 8003952:	6943      	ldr	r3, [r0, #20]
 8003954:	0799      	lsls	r1, r3, #30
 8003956:	4604      	mov	r4, r0
 8003958:	f203 776c 	addw	r7, r3, #1900	; 0x76c
 800395c:	d105      	bne.n	800396a <localtime_r+0x2e>
 800395e:	2264      	movs	r2, #100	; 0x64
 8003960:	fb97 f3f2 	sdiv	r3, r7, r2
 8003964:	fb02 7313 	mls	r3, r2, r3, r7
 8003968:	bb7b      	cbnz	r3, 80039ca <localtime_r+0x8e>
 800396a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800396e:	fb97 f3f2 	sdiv	r3, r7, r2
 8003972:	fb02 7313 	mls	r3, r2, r3, r7
 8003976:	fab3 f383 	clz	r3, r3
 800397a:	095b      	lsrs	r3, r3, #5
 800397c:	4e68      	ldr	r6, [pc, #416]	; (8003b20 <localtime_r+0x1e4>)
 800397e:	2230      	movs	r2, #48	; 0x30
 8003980:	fb02 6603 	mla	r6, r2, r3, r6
 8003984:	f000 f976 	bl	8003c74 <__tz_lock>
 8003988:	f000 f980 	bl	8003c8c <_tzset_unlocked>
 800398c:	4b65      	ldr	r3, [pc, #404]	; (8003b24 <localtime_r+0x1e8>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	b353      	cbz	r3, 80039e8 <localtime_r+0xac>
 8003992:	686b      	ldr	r3, [r5, #4]
 8003994:	42bb      	cmp	r3, r7
 8003996:	d11a      	bne.n	80039ce <localtime_r+0x92>
 8003998:	682f      	ldr	r7, [r5, #0]
 800399a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800399e:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 80039a2:	b9e7      	cbnz	r7, 80039de <localtime_r+0xa2>
 80039a4:	4282      	cmp	r2, r0
 80039a6:	eb73 0101 	sbcs.w	r1, r3, r1
 80039aa:	da25      	bge.n	80039f8 <localtime_r+0xbc>
 80039ac:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 80039b0:	4282      	cmp	r2, r0
 80039b2:	eb73 0701 	sbcs.w	r7, r3, r1
 80039b6:	bfb4      	ite	lt
 80039b8:	2701      	movlt	r7, #1
 80039ba:	2700      	movge	r7, #0
 80039bc:	4282      	cmp	r2, r0
 80039be:	eb73 0101 	sbcs.w	r1, r3, r1
 80039c2:	6227      	str	r7, [r4, #32]
 80039c4:	db1a      	blt.n	80039fc <localtime_r+0xc0>
 80039c6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80039c8:	e019      	b.n	80039fe <localtime_r+0xc2>
 80039ca:	2301      	movs	r3, #1
 80039cc:	e7d6      	b.n	800397c <localtime_r+0x40>
 80039ce:	4638      	mov	r0, r7
 80039d0:	f000 f8aa 	bl	8003b28 <__tzcalc_limits>
 80039d4:	2800      	cmp	r0, #0
 80039d6:	d1df      	bne.n	8003998 <localtime_r+0x5c>
 80039d8:	f04f 33ff 	mov.w	r3, #4294967295
 80039dc:	e004      	b.n	80039e8 <localtime_r+0xac>
 80039de:	4282      	cmp	r2, r0
 80039e0:	eb73 0101 	sbcs.w	r1, r3, r1
 80039e4:	da02      	bge.n	80039ec <localtime_r+0xb0>
 80039e6:	2300      	movs	r3, #0
 80039e8:	6223      	str	r3, [r4, #32]
 80039ea:	e7ec      	b.n	80039c6 <localtime_r+0x8a>
 80039ec:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 80039f0:	4282      	cmp	r2, r0
 80039f2:	eb73 0101 	sbcs.w	r1, r3, r1
 80039f6:	daf6      	bge.n	80039e6 <localtime_r+0xaa>
 80039f8:	2301      	movs	r3, #1
 80039fa:	6223      	str	r3, [r4, #32]
 80039fc:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80039fe:	6861      	ldr	r1, [r4, #4]
 8003a00:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8003a04:	fb93 f0f2 	sdiv	r0, r3, r2
 8003a08:	fb02 3310 	mls	r3, r2, r0, r3
 8003a0c:	223c      	movs	r2, #60	; 0x3c
 8003a0e:	fb93 f5f2 	sdiv	r5, r3, r2
 8003a12:	fb02 3215 	mls	r2, r2, r5, r3
 8003a16:	6823      	ldr	r3, [r4, #0]
 8003a18:	1a9b      	subs	r3, r3, r2
 8003a1a:	68a2      	ldr	r2, [r4, #8]
 8003a1c:	6023      	str	r3, [r4, #0]
 8003a1e:	1b49      	subs	r1, r1, r5
 8003a20:	1a12      	subs	r2, r2, r0
 8003a22:	2b3b      	cmp	r3, #59	; 0x3b
 8003a24:	6061      	str	r1, [r4, #4]
 8003a26:	60a2      	str	r2, [r4, #8]
 8003a28:	dd35      	ble.n	8003a96 <localtime_r+0x15a>
 8003a2a:	3101      	adds	r1, #1
 8003a2c:	6061      	str	r1, [r4, #4]
 8003a2e:	3b3c      	subs	r3, #60	; 0x3c
 8003a30:	6023      	str	r3, [r4, #0]
 8003a32:	6863      	ldr	r3, [r4, #4]
 8003a34:	2b3b      	cmp	r3, #59	; 0x3b
 8003a36:	dd34      	ble.n	8003aa2 <localtime_r+0x166>
 8003a38:	3201      	adds	r2, #1
 8003a3a:	60a2      	str	r2, [r4, #8]
 8003a3c:	3b3c      	subs	r3, #60	; 0x3c
 8003a3e:	6063      	str	r3, [r4, #4]
 8003a40:	68a3      	ldr	r3, [r4, #8]
 8003a42:	2b17      	cmp	r3, #23
 8003a44:	dd33      	ble.n	8003aae <localtime_r+0x172>
 8003a46:	69e2      	ldr	r2, [r4, #28]
 8003a48:	3201      	adds	r2, #1
 8003a4a:	61e2      	str	r2, [r4, #28]
 8003a4c:	69a2      	ldr	r2, [r4, #24]
 8003a4e:	3201      	adds	r2, #1
 8003a50:	2a07      	cmp	r2, #7
 8003a52:	bfa8      	it	ge
 8003a54:	2200      	movge	r2, #0
 8003a56:	61a2      	str	r2, [r4, #24]
 8003a58:	68e2      	ldr	r2, [r4, #12]
 8003a5a:	3b18      	subs	r3, #24
 8003a5c:	3201      	adds	r2, #1
 8003a5e:	60a3      	str	r3, [r4, #8]
 8003a60:	6923      	ldr	r3, [r4, #16]
 8003a62:	60e2      	str	r2, [r4, #12]
 8003a64:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8003a68:	428a      	cmp	r2, r1
 8003a6a:	dd0e      	ble.n	8003a8a <localtime_r+0x14e>
 8003a6c:	2b0b      	cmp	r3, #11
 8003a6e:	eba2 0201 	sub.w	r2, r2, r1
 8003a72:	60e2      	str	r2, [r4, #12]
 8003a74:	f103 0201 	add.w	r2, r3, #1
 8003a78:	bf09      	itett	eq
 8003a7a:	6963      	ldreq	r3, [r4, #20]
 8003a7c:	6122      	strne	r2, [r4, #16]
 8003a7e:	2200      	moveq	r2, #0
 8003a80:	3301      	addeq	r3, #1
 8003a82:	bf02      	ittt	eq
 8003a84:	6122      	streq	r2, [r4, #16]
 8003a86:	6163      	streq	r3, [r4, #20]
 8003a88:	61e2      	streq	r2, [r4, #28]
 8003a8a:	f000 f8f9 	bl	8003c80 <__tz_unlock>
 8003a8e:	4620      	mov	r0, r4
 8003a90:	b002      	add	sp, #8
 8003a92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	dacb      	bge.n	8003a32 <localtime_r+0xf6>
 8003a9a:	3901      	subs	r1, #1
 8003a9c:	6061      	str	r1, [r4, #4]
 8003a9e:	333c      	adds	r3, #60	; 0x3c
 8003aa0:	e7c6      	b.n	8003a30 <localtime_r+0xf4>
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	dacc      	bge.n	8003a40 <localtime_r+0x104>
 8003aa6:	3a01      	subs	r2, #1
 8003aa8:	60a2      	str	r2, [r4, #8]
 8003aaa:	333c      	adds	r3, #60	; 0x3c
 8003aac:	e7c7      	b.n	8003a3e <localtime_r+0x102>
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	daeb      	bge.n	8003a8a <localtime_r+0x14e>
 8003ab2:	69e2      	ldr	r2, [r4, #28]
 8003ab4:	3a01      	subs	r2, #1
 8003ab6:	61e2      	str	r2, [r4, #28]
 8003ab8:	69a2      	ldr	r2, [r4, #24]
 8003aba:	3a01      	subs	r2, #1
 8003abc:	bf48      	it	mi
 8003abe:	2206      	movmi	r2, #6
 8003ac0:	61a2      	str	r2, [r4, #24]
 8003ac2:	68e2      	ldr	r2, [r4, #12]
 8003ac4:	3318      	adds	r3, #24
 8003ac6:	3a01      	subs	r2, #1
 8003ac8:	60e2      	str	r2, [r4, #12]
 8003aca:	60a3      	str	r3, [r4, #8]
 8003acc:	2a00      	cmp	r2, #0
 8003ace:	d1dc      	bne.n	8003a8a <localtime_r+0x14e>
 8003ad0:	6923      	ldr	r3, [r4, #16]
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	d405      	bmi.n	8003ae2 <localtime_r+0x1a6>
 8003ad6:	6123      	str	r3, [r4, #16]
 8003ad8:	6923      	ldr	r3, [r4, #16]
 8003ada:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8003ade:	60e3      	str	r3, [r4, #12]
 8003ae0:	e7d3      	b.n	8003a8a <localtime_r+0x14e>
 8003ae2:	230b      	movs	r3, #11
 8003ae4:	6123      	str	r3, [r4, #16]
 8003ae6:	6963      	ldr	r3, [r4, #20]
 8003ae8:	1e5a      	subs	r2, r3, #1
 8003aea:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8003aee:	6162      	str	r2, [r4, #20]
 8003af0:	079a      	lsls	r2, r3, #30
 8003af2:	d105      	bne.n	8003b00 <localtime_r+0x1c4>
 8003af4:	2164      	movs	r1, #100	; 0x64
 8003af6:	fb93 f2f1 	sdiv	r2, r3, r1
 8003afa:	fb01 3212 	mls	r2, r1, r2, r3
 8003afe:	b962      	cbnz	r2, 8003b1a <localtime_r+0x1de>
 8003b00:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003b04:	fb93 f1f2 	sdiv	r1, r3, r2
 8003b08:	fb02 3311 	mls	r3, r2, r1, r3
 8003b0c:	fab3 f383 	clz	r3, r3
 8003b10:	095b      	lsrs	r3, r3, #5
 8003b12:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8003b16:	61e3      	str	r3, [r4, #28]
 8003b18:	e7de      	b.n	8003ad8 <localtime_r+0x19c>
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e7f9      	b.n	8003b12 <localtime_r+0x1d6>
 8003b1e:	bf00      	nop
 8003b20:	08005f78 	.word	0x08005f78
 8003b24:	200002d8 	.word	0x200002d8

08003b28 <__tzcalc_limits>:
 8003b28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b2c:	4605      	mov	r5, r0
 8003b2e:	f001 f937 	bl	8004da0 <__gettzinfo>
 8003b32:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8003b36:	429d      	cmp	r5, r3
 8003b38:	f340 8095 	ble.w	8003c66 <__tzcalc_limits+0x13e>
 8003b3c:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 8003b40:	18ac      	adds	r4, r5, r2
 8003b42:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 8003b46:	f240 126d 	movw	r2, #365	; 0x16d
 8003b4a:	10a4      	asrs	r4, r4, #2
 8003b4c:	fb02 4403 	mla	r4, r2, r3, r4
 8003b50:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8003b54:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 8003b58:	fb93 f3f2 	sdiv	r3, r3, r2
 8003b5c:	441c      	add	r4, r3
 8003b5e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8003b62:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 8003b66:	fb95 fcf3 	sdiv	ip, r5, r3
 8003b6a:	fb03 5c1c 	mls	ip, r3, ip, r5
 8003b6e:	186a      	adds	r2, r5, r1
 8003b70:	fabc f68c 	clz	r6, ip
 8003b74:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b78:	f005 0303 	and.w	r3, r5, #3
 8003b7c:	4414      	add	r4, r2
 8003b7e:	2264      	movs	r2, #100	; 0x64
 8003b80:	6045      	str	r5, [r0, #4]
 8003b82:	fb95 f7f2 	sdiv	r7, r5, r2
 8003b86:	0976      	lsrs	r6, r6, #5
 8003b88:	fb02 5717 	mls	r7, r2, r7, r5
 8003b8c:	4601      	mov	r1, r0
 8003b8e:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 8003b92:	9300      	str	r3, [sp, #0]
 8003b94:	f04f 0a07 	mov.w	sl, #7
 8003b98:	7a0d      	ldrb	r5, [r1, #8]
 8003b9a:	694b      	ldr	r3, [r1, #20]
 8003b9c:	2d4a      	cmp	r5, #74	; 0x4a
 8003b9e:	d12b      	bne.n	8003bf8 <__tzcalc_limits+0xd0>
 8003ba0:	9a00      	ldr	r2, [sp, #0]
 8003ba2:	18e5      	adds	r5, r4, r3
 8003ba4:	b902      	cbnz	r2, 8003ba8 <__tzcalc_limits+0x80>
 8003ba6:	b917      	cbnz	r7, 8003bae <__tzcalc_limits+0x86>
 8003ba8:	f1bc 0f00 	cmp.w	ip, #0
 8003bac:	d122      	bne.n	8003bf4 <__tzcalc_limits+0xcc>
 8003bae:	2b3b      	cmp	r3, #59	; 0x3b
 8003bb0:	bfd4      	ite	le
 8003bb2:	2300      	movle	r3, #0
 8003bb4:	2301      	movgt	r3, #1
 8003bb6:	442b      	add	r3, r5
 8003bb8:	3b01      	subs	r3, #1
 8003bba:	698d      	ldr	r5, [r1, #24]
 8003bbc:	4a2b      	ldr	r2, [pc, #172]	; (8003c6c <__tzcalc_limits+0x144>)
 8003bbe:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 8003bc2:	fbc3 5e02 	smlal	r5, lr, r3, r2
 8003bc6:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8003bc8:	18ed      	adds	r5, r5, r3
 8003bca:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 8003bce:	e9c1 5308 	strd	r5, r3, [r1, #32]
 8003bd2:	3128      	adds	r1, #40	; 0x28
 8003bd4:	458b      	cmp	fp, r1
 8003bd6:	d1df      	bne.n	8003b98 <__tzcalc_limits+0x70>
 8003bd8:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 8003bdc:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	; 0x48
 8003be0:	428c      	cmp	r4, r1
 8003be2:	4193      	sbcs	r3, r2
 8003be4:	bfb4      	ite	lt
 8003be6:	2301      	movlt	r3, #1
 8003be8:	2300      	movge	r3, #0
 8003bea:	6003      	str	r3, [r0, #0]
 8003bec:	2001      	movs	r0, #1
 8003bee:	b003      	add	sp, #12
 8003bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	e7de      	b.n	8003bb6 <__tzcalc_limits+0x8e>
 8003bf8:	2d44      	cmp	r5, #68	; 0x44
 8003bfa:	d101      	bne.n	8003c00 <__tzcalc_limits+0xd8>
 8003bfc:	4423      	add	r3, r4
 8003bfe:	e7dc      	b.n	8003bba <__tzcalc_limits+0x92>
 8003c00:	9a00      	ldr	r2, [sp, #0]
 8003c02:	bb52      	cbnz	r2, 8003c5a <__tzcalc_limits+0x132>
 8003c04:	2f00      	cmp	r7, #0
 8003c06:	bf0c      	ite	eq
 8003c08:	4635      	moveq	r5, r6
 8003c0a:	2501      	movne	r5, #1
 8003c0c:	68ca      	ldr	r2, [r1, #12]
 8003c0e:	9201      	str	r2, [sp, #4]
 8003c10:	4a17      	ldr	r2, [pc, #92]	; (8003c70 <__tzcalc_limits+0x148>)
 8003c12:	f04f 0930 	mov.w	r9, #48	; 0x30
 8003c16:	fb09 2505 	mla	r5, r9, r5, r2
 8003c1a:	46a6      	mov	lr, r4
 8003c1c:	f04f 0800 	mov.w	r8, #0
 8003c20:	3d04      	subs	r5, #4
 8003c22:	9a01      	ldr	r2, [sp, #4]
 8003c24:	f108 0801 	add.w	r8, r8, #1
 8003c28:	4542      	cmp	r2, r8
 8003c2a:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 8003c2e:	dc16      	bgt.n	8003c5e <__tzcalc_limits+0x136>
 8003c30:	f10e 0504 	add.w	r5, lr, #4
 8003c34:	fb95 f8fa 	sdiv	r8, r5, sl
 8003c38:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 8003c3c:	eba5 0508 	sub.w	r5, r5, r8
 8003c40:	1b5d      	subs	r5, r3, r5
 8003c42:	690b      	ldr	r3, [r1, #16]
 8003c44:	f103 33ff 	add.w	r3, r3, #4294967295
 8003c48:	bf48      	it	mi
 8003c4a:	3507      	addmi	r5, #7
 8003c4c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8003c50:	442b      	add	r3, r5
 8003c52:	454b      	cmp	r3, r9
 8003c54:	da05      	bge.n	8003c62 <__tzcalc_limits+0x13a>
 8003c56:	4473      	add	r3, lr
 8003c58:	e7af      	b.n	8003bba <__tzcalc_limits+0x92>
 8003c5a:	4635      	mov	r5, r6
 8003c5c:	e7d6      	b.n	8003c0c <__tzcalc_limits+0xe4>
 8003c5e:	44ce      	add	lr, r9
 8003c60:	e7df      	b.n	8003c22 <__tzcalc_limits+0xfa>
 8003c62:	3b07      	subs	r3, #7
 8003c64:	e7f5      	b.n	8003c52 <__tzcalc_limits+0x12a>
 8003c66:	2000      	movs	r0, #0
 8003c68:	e7c1      	b.n	8003bee <__tzcalc_limits+0xc6>
 8003c6a:	bf00      	nop
 8003c6c:	00015180 	.word	0x00015180
 8003c70:	08005f78 	.word	0x08005f78

08003c74 <__tz_lock>:
 8003c74:	4801      	ldr	r0, [pc, #4]	; (8003c7c <__tz_lock+0x8>)
 8003c76:	f000 ba9f 	b.w	80041b8 <__retarget_lock_acquire>
 8003c7a:	bf00      	nop
 8003c7c:	200002e7 	.word	0x200002e7

08003c80 <__tz_unlock>:
 8003c80:	4801      	ldr	r0, [pc, #4]	; (8003c88 <__tz_unlock+0x8>)
 8003c82:	f000 ba9b 	b.w	80041bc <__retarget_lock_release>
 8003c86:	bf00      	nop
 8003c88:	200002e7 	.word	0x200002e7

08003c8c <_tzset_unlocked>:
 8003c8c:	4b01      	ldr	r3, [pc, #4]	; (8003c94 <_tzset_unlocked+0x8>)
 8003c8e:	6818      	ldr	r0, [r3, #0]
 8003c90:	f000 b802 	b.w	8003c98 <_tzset_unlocked_r>
 8003c94:	20000070 	.word	0x20000070

08003c98 <_tzset_unlocked_r>:
 8003c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c9c:	b08d      	sub	sp, #52	; 0x34
 8003c9e:	4607      	mov	r7, r0
 8003ca0:	f001 f87e 	bl	8004da0 <__gettzinfo>
 8003ca4:	49bb      	ldr	r1, [pc, #748]	; (8003f94 <_tzset_unlocked_r+0x2fc>)
 8003ca6:	4dbc      	ldr	r5, [pc, #752]	; (8003f98 <_tzset_unlocked_r+0x300>)
 8003ca8:	4604      	mov	r4, r0
 8003caa:	4638      	mov	r0, r7
 8003cac:	f000 fb36 	bl	800431c <_getenv_r>
 8003cb0:	4606      	mov	r6, r0
 8003cb2:	bb10      	cbnz	r0, 8003cfa <_tzset_unlocked_r+0x62>
 8003cb4:	4bb9      	ldr	r3, [pc, #740]	; (8003f9c <_tzset_unlocked_r+0x304>)
 8003cb6:	4aba      	ldr	r2, [pc, #744]	; (8003fa0 <_tzset_unlocked_r+0x308>)
 8003cb8:	6018      	str	r0, [r3, #0]
 8003cba:	4bba      	ldr	r3, [pc, #744]	; (8003fa4 <_tzset_unlocked_r+0x30c>)
 8003cbc:	62a0      	str	r0, [r4, #40]	; 0x28
 8003cbe:	6018      	str	r0, [r3, #0]
 8003cc0:	4bb9      	ldr	r3, [pc, #740]	; (8003fa8 <_tzset_unlocked_r+0x310>)
 8003cc2:	6520      	str	r0, [r4, #80]	; 0x50
 8003cc4:	e9c3 2200 	strd	r2, r2, [r3]
 8003cc8:	214a      	movs	r1, #74	; 0x4a
 8003cca:	2200      	movs	r2, #0
 8003ccc:	2300      	movs	r3, #0
 8003cce:	e9c4 0003 	strd	r0, r0, [r4, #12]
 8003cd2:	e9c4 0005 	strd	r0, r0, [r4, #20]
 8003cd6:	e9c4 000d 	strd	r0, r0, [r4, #52]	; 0x34
 8003cda:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 8003cde:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8003ce2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003ce6:	6828      	ldr	r0, [r5, #0]
 8003ce8:	7221      	strb	r1, [r4, #8]
 8003cea:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
 8003cee:	f000 fb25 	bl	800433c <free>
 8003cf2:	602e      	str	r6, [r5, #0]
 8003cf4:	b00d      	add	sp, #52	; 0x34
 8003cf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cfa:	6829      	ldr	r1, [r5, #0]
 8003cfc:	2900      	cmp	r1, #0
 8003cfe:	f040 808e 	bne.w	8003e1e <_tzset_unlocked_r+0x186>
 8003d02:	6828      	ldr	r0, [r5, #0]
 8003d04:	f000 fb1a 	bl	800433c <free>
 8003d08:	4630      	mov	r0, r6
 8003d0a:	f7fc faa3 	bl	8000254 <strlen>
 8003d0e:	1c41      	adds	r1, r0, #1
 8003d10:	4638      	mov	r0, r7
 8003d12:	f000 fb3b 	bl	800438c <_malloc_r>
 8003d16:	6028      	str	r0, [r5, #0]
 8003d18:	2800      	cmp	r0, #0
 8003d1a:	f040 8086 	bne.w	8003e2a <_tzset_unlocked_r+0x192>
 8003d1e:	4aa1      	ldr	r2, [pc, #644]	; (8003fa4 <_tzset_unlocked_r+0x30c>)
 8003d20:	f8df 8284 	ldr.w	r8, [pc, #644]	; 8003fa8 <_tzset_unlocked_r+0x310>
 8003d24:	f8df a274 	ldr.w	sl, [pc, #628]	; 8003f9c <_tzset_unlocked_r+0x304>
 8003d28:	2300      	movs	r3, #0
 8003d2a:	6013      	str	r3, [r2, #0]
 8003d2c:	4a9f      	ldr	r2, [pc, #636]	; (8003fac <_tzset_unlocked_r+0x314>)
 8003d2e:	f8ca 3000 	str.w	r3, [sl]
 8003d32:	2000      	movs	r0, #0
 8003d34:	2100      	movs	r1, #0
 8003d36:	e9c8 2200 	strd	r2, r2, [r8]
 8003d3a:	e9c4 3303 	strd	r3, r3, [r4, #12]
 8003d3e:	e9c4 3305 	strd	r3, r3, [r4, #20]
 8003d42:	e9c4 0108 	strd	r0, r1, [r4, #32]
 8003d46:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 8003d4a:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
 8003d4e:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8003d52:	224a      	movs	r2, #74	; 0x4a
 8003d54:	7222      	strb	r2, [r4, #8]
 8003d56:	62a3      	str	r3, [r4, #40]	; 0x28
 8003d58:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
 8003d5c:	6523      	str	r3, [r4, #80]	; 0x50
 8003d5e:	7833      	ldrb	r3, [r6, #0]
 8003d60:	2b3a      	cmp	r3, #58	; 0x3a
 8003d62:	bf08      	it	eq
 8003d64:	3601      	addeq	r6, #1
 8003d66:	7833      	ldrb	r3, [r6, #0]
 8003d68:	2b3c      	cmp	r3, #60	; 0x3c
 8003d6a:	d162      	bne.n	8003e32 <_tzset_unlocked_r+0x19a>
 8003d6c:	1c75      	adds	r5, r6, #1
 8003d6e:	4a90      	ldr	r2, [pc, #576]	; (8003fb0 <_tzset_unlocked_r+0x318>)
 8003d70:	4990      	ldr	r1, [pc, #576]	; (8003fb4 <_tzset_unlocked_r+0x31c>)
 8003d72:	ab0a      	add	r3, sp, #40	; 0x28
 8003d74:	4628      	mov	r0, r5
 8003d76:	f000 ffbb 	bl	8004cf0 <siscanf>
 8003d7a:	2800      	cmp	r0, #0
 8003d7c:	ddba      	ble.n	8003cf4 <_tzset_unlocked_r+0x5c>
 8003d7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d80:	1eda      	subs	r2, r3, #3
 8003d82:	2a07      	cmp	r2, #7
 8003d84:	d8b6      	bhi.n	8003cf4 <_tzset_unlocked_r+0x5c>
 8003d86:	5ceb      	ldrb	r3, [r5, r3]
 8003d88:	2b3e      	cmp	r3, #62	; 0x3e
 8003d8a:	d1b3      	bne.n	8003cf4 <_tzset_unlocked_r+0x5c>
 8003d8c:	3602      	adds	r6, #2
 8003d8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d90:	18f5      	adds	r5, r6, r3
 8003d92:	5cf3      	ldrb	r3, [r6, r3]
 8003d94:	2b2d      	cmp	r3, #45	; 0x2d
 8003d96:	d15a      	bne.n	8003e4e <_tzset_unlocked_r+0x1b6>
 8003d98:	3501      	adds	r5, #1
 8003d9a:	f04f 39ff 	mov.w	r9, #4294967295
 8003d9e:	2300      	movs	r3, #0
 8003da0:	f8ad 301e 	strh.w	r3, [sp, #30]
 8003da4:	f8ad 3020 	strh.w	r3, [sp, #32]
 8003da8:	af08      	add	r7, sp, #32
 8003daa:	ab0a      	add	r3, sp, #40	; 0x28
 8003dac:	e9cd 3701 	strd	r3, r7, [sp, #4]
 8003db0:	9303      	str	r3, [sp, #12]
 8003db2:	f10d 031e 	add.w	r3, sp, #30
 8003db6:	9300      	str	r3, [sp, #0]
 8003db8:	497f      	ldr	r1, [pc, #508]	; (8003fb8 <_tzset_unlocked_r+0x320>)
 8003dba:	ab0a      	add	r3, sp, #40	; 0x28
 8003dbc:	aa07      	add	r2, sp, #28
 8003dbe:	4628      	mov	r0, r5
 8003dc0:	f000 ff96 	bl	8004cf0 <siscanf>
 8003dc4:	2800      	cmp	r0, #0
 8003dc6:	dd95      	ble.n	8003cf4 <_tzset_unlocked_r+0x5c>
 8003dc8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8003dcc:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 8003dd0:	223c      	movs	r2, #60	; 0x3c
 8003dd2:	fb02 6603 	mla	r6, r2, r3, r6
 8003dd6:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8003dda:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8003dde:	fb02 6603 	mla	r6, r2, r3, r6
 8003de2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003de4:	fb09 f606 	mul.w	r6, r9, r6
 8003de8:	eb05 0903 	add.w	r9, r5, r3
 8003dec:	5ceb      	ldrb	r3, [r5, r3]
 8003dee:	2b3c      	cmp	r3, #60	; 0x3c
 8003df0:	f040 80ec 	bne.w	8003fcc <_tzset_unlocked_r+0x334>
 8003df4:	f109 0501 	add.w	r5, r9, #1
 8003df8:	4a70      	ldr	r2, [pc, #448]	; (8003fbc <_tzset_unlocked_r+0x324>)
 8003dfa:	496e      	ldr	r1, [pc, #440]	; (8003fb4 <_tzset_unlocked_r+0x31c>)
 8003dfc:	ab0a      	add	r3, sp, #40	; 0x28
 8003dfe:	4628      	mov	r0, r5
 8003e00:	f000 ff76 	bl	8004cf0 <siscanf>
 8003e04:	2800      	cmp	r0, #0
 8003e06:	dc28      	bgt.n	8003e5a <_tzset_unlocked_r+0x1c2>
 8003e08:	f899 3001 	ldrb.w	r3, [r9, #1]
 8003e0c:	2b3e      	cmp	r3, #62	; 0x3e
 8003e0e:	d124      	bne.n	8003e5a <_tzset_unlocked_r+0x1c2>
 8003e10:	4b67      	ldr	r3, [pc, #412]	; (8003fb0 <_tzset_unlocked_r+0x318>)
 8003e12:	62a6      	str	r6, [r4, #40]	; 0x28
 8003e14:	e9c8 3300 	strd	r3, r3, [r8]
 8003e18:	f8ca 6000 	str.w	r6, [sl]
 8003e1c:	e76a      	b.n	8003cf4 <_tzset_unlocked_r+0x5c>
 8003e1e:	f7fc fa0f 	bl	8000240 <strcmp>
 8003e22:	2800      	cmp	r0, #0
 8003e24:	f47f af6d 	bne.w	8003d02 <_tzset_unlocked_r+0x6a>
 8003e28:	e764      	b.n	8003cf4 <_tzset_unlocked_r+0x5c>
 8003e2a:	4631      	mov	r1, r6
 8003e2c:	f000 f9c8 	bl	80041c0 <strcpy>
 8003e30:	e775      	b.n	8003d1e <_tzset_unlocked_r+0x86>
 8003e32:	4a5f      	ldr	r2, [pc, #380]	; (8003fb0 <_tzset_unlocked_r+0x318>)
 8003e34:	4962      	ldr	r1, [pc, #392]	; (8003fc0 <_tzset_unlocked_r+0x328>)
 8003e36:	ab0a      	add	r3, sp, #40	; 0x28
 8003e38:	4630      	mov	r0, r6
 8003e3a:	f000 ff59 	bl	8004cf0 <siscanf>
 8003e3e:	2800      	cmp	r0, #0
 8003e40:	f77f af58 	ble.w	8003cf4 <_tzset_unlocked_r+0x5c>
 8003e44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e46:	3b03      	subs	r3, #3
 8003e48:	2b07      	cmp	r3, #7
 8003e4a:	d9a0      	bls.n	8003d8e <_tzset_unlocked_r+0xf6>
 8003e4c:	e752      	b.n	8003cf4 <_tzset_unlocked_r+0x5c>
 8003e4e:	2b2b      	cmp	r3, #43	; 0x2b
 8003e50:	bf08      	it	eq
 8003e52:	3501      	addeq	r5, #1
 8003e54:	f04f 0901 	mov.w	r9, #1
 8003e58:	e7a1      	b.n	8003d9e <_tzset_unlocked_r+0x106>
 8003e5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e5c:	1eda      	subs	r2, r3, #3
 8003e5e:	2a07      	cmp	r2, #7
 8003e60:	f63f af48 	bhi.w	8003cf4 <_tzset_unlocked_r+0x5c>
 8003e64:	5ceb      	ldrb	r3, [r5, r3]
 8003e66:	2b3e      	cmp	r3, #62	; 0x3e
 8003e68:	f47f af44 	bne.w	8003cf4 <_tzset_unlocked_r+0x5c>
 8003e6c:	f109 0902 	add.w	r9, r9, #2
 8003e70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e72:	eb09 0503 	add.w	r5, r9, r3
 8003e76:	f819 3003 	ldrb.w	r3, [r9, r3]
 8003e7a:	2b2d      	cmp	r3, #45	; 0x2d
 8003e7c:	f040 80b5 	bne.w	8003fea <_tzset_unlocked_r+0x352>
 8003e80:	3501      	adds	r5, #1
 8003e82:	f04f 39ff 	mov.w	r9, #4294967295
 8003e86:	2300      	movs	r3, #0
 8003e88:	f8ad 301c 	strh.w	r3, [sp, #28]
 8003e8c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8003e90:	f8ad 3020 	strh.w	r3, [sp, #32]
 8003e94:	930a      	str	r3, [sp, #40]	; 0x28
 8003e96:	ab0a      	add	r3, sp, #40	; 0x28
 8003e98:	e9cd 7302 	strd	r7, r3, [sp, #8]
 8003e9c:	9301      	str	r3, [sp, #4]
 8003e9e:	f10d 031e 	add.w	r3, sp, #30
 8003ea2:	9300      	str	r3, [sp, #0]
 8003ea4:	4944      	ldr	r1, [pc, #272]	; (8003fb8 <_tzset_unlocked_r+0x320>)
 8003ea6:	ab0a      	add	r3, sp, #40	; 0x28
 8003ea8:	aa07      	add	r2, sp, #28
 8003eaa:	4628      	mov	r0, r5
 8003eac:	f000 ff20 	bl	8004cf0 <siscanf>
 8003eb0:	2800      	cmp	r0, #0
 8003eb2:	f300 80a0 	bgt.w	8003ff6 <_tzset_unlocked_r+0x35e>
 8003eb6:	f5a6 6361 	sub.w	r3, r6, #3600	; 0xe10
 8003eba:	9304      	str	r3, [sp, #16]
 8003ebc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ebe:	4627      	mov	r7, r4
 8003ec0:	441d      	add	r5, r3
 8003ec2:	f04f 0b00 	mov.w	fp, #0
 8003ec6:	782b      	ldrb	r3, [r5, #0]
 8003ec8:	2b2c      	cmp	r3, #44	; 0x2c
 8003eca:	bf08      	it	eq
 8003ecc:	3501      	addeq	r5, #1
 8003ece:	f895 9000 	ldrb.w	r9, [r5]
 8003ed2:	f1b9 0f4d 	cmp.w	r9, #77	; 0x4d
 8003ed6:	f040 80a1 	bne.w	800401c <_tzset_unlocked_r+0x384>
 8003eda:	ab0a      	add	r3, sp, #40	; 0x28
 8003edc:	f10d 0226 	add.w	r2, sp, #38	; 0x26
 8003ee0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003ee4:	aa09      	add	r2, sp, #36	; 0x24
 8003ee6:	9200      	str	r2, [sp, #0]
 8003ee8:	4936      	ldr	r1, [pc, #216]	; (8003fc4 <_tzset_unlocked_r+0x32c>)
 8003eea:	9303      	str	r3, [sp, #12]
 8003eec:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8003ef0:	4628      	mov	r0, r5
 8003ef2:	f000 fefd 	bl	8004cf0 <siscanf>
 8003ef6:	2803      	cmp	r0, #3
 8003ef8:	f47f aefc 	bne.w	8003cf4 <_tzset_unlocked_r+0x5c>
 8003efc:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8003f00:	1e4b      	subs	r3, r1, #1
 8003f02:	2b0b      	cmp	r3, #11
 8003f04:	f63f aef6 	bhi.w	8003cf4 <_tzset_unlocked_r+0x5c>
 8003f08:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8003f0c:	1e53      	subs	r3, r2, #1
 8003f0e:	2b04      	cmp	r3, #4
 8003f10:	f63f aef0 	bhi.w	8003cf4 <_tzset_unlocked_r+0x5c>
 8003f14:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8003f18:	2b06      	cmp	r3, #6
 8003f1a:	f63f aeeb 	bhi.w	8003cf4 <_tzset_unlocked_r+0x5c>
 8003f1e:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8003f22:	f887 9008 	strb.w	r9, [r7, #8]
 8003f26:	617b      	str	r3, [r7, #20]
 8003f28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f2a:	eb05 0903 	add.w	r9, r5, r3
 8003f2e:	2500      	movs	r5, #0
 8003f30:	2302      	movs	r3, #2
 8003f32:	f8ad 301c 	strh.w	r3, [sp, #28]
 8003f36:	f8ad 501e 	strh.w	r5, [sp, #30]
 8003f3a:	f8ad 5020 	strh.w	r5, [sp, #32]
 8003f3e:	950a      	str	r5, [sp, #40]	; 0x28
 8003f40:	f899 3000 	ldrb.w	r3, [r9]
 8003f44:	2b2f      	cmp	r3, #47	; 0x2f
 8003f46:	f040 8095 	bne.w	8004074 <_tzset_unlocked_r+0x3dc>
 8003f4a:	ab0a      	add	r3, sp, #40	; 0x28
 8003f4c:	aa08      	add	r2, sp, #32
 8003f4e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003f52:	f10d 021e 	add.w	r2, sp, #30
 8003f56:	9200      	str	r2, [sp, #0]
 8003f58:	491b      	ldr	r1, [pc, #108]	; (8003fc8 <_tzset_unlocked_r+0x330>)
 8003f5a:	9303      	str	r3, [sp, #12]
 8003f5c:	aa07      	add	r2, sp, #28
 8003f5e:	4648      	mov	r0, r9
 8003f60:	f000 fec6 	bl	8004cf0 <siscanf>
 8003f64:	42a8      	cmp	r0, r5
 8003f66:	f300 8085 	bgt.w	8004074 <_tzset_unlocked_r+0x3dc>
 8003f6a:	214a      	movs	r1, #74	; 0x4a
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	2300      	movs	r3, #0
 8003f70:	e9c4 5503 	strd	r5, r5, [r4, #12]
 8003f74:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003f78:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8003f7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003f80:	e9c4 550f 	strd	r5, r5, [r4, #60]	; 0x3c
 8003f84:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003f88:	7221      	strb	r1, [r4, #8]
 8003f8a:	62a5      	str	r5, [r4, #40]	; 0x28
 8003f8c:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
 8003f90:	6525      	str	r5, [r4, #80]	; 0x50
 8003f92:	e6af      	b.n	8003cf4 <_tzset_unlocked_r+0x5c>
 8003f94:	08005fd8 	.word	0x08005fd8
 8003f98:	200002d4 	.word	0x200002d4
 8003f9c:	200002dc 	.word	0x200002dc
 8003fa0:	08005fdb 	.word	0x08005fdb
 8003fa4:	200002d8 	.word	0x200002d8
 8003fa8:	2000001c 	.word	0x2000001c
 8003fac:	08006061 	.word	0x08006061
 8003fb0:	200002c8 	.word	0x200002c8
 8003fb4:	08005fdf 	.word	0x08005fdf
 8003fb8:	08006014 	.word	0x08006014
 8003fbc:	200002bc 	.word	0x200002bc
 8003fc0:	08005ff2 	.word	0x08005ff2
 8003fc4:	08006000 	.word	0x08006000
 8003fc8:	08006013 	.word	0x08006013
 8003fcc:	4a3e      	ldr	r2, [pc, #248]	; (80040c8 <_tzset_unlocked_r+0x430>)
 8003fce:	493f      	ldr	r1, [pc, #252]	; (80040cc <_tzset_unlocked_r+0x434>)
 8003fd0:	ab0a      	add	r3, sp, #40	; 0x28
 8003fd2:	4648      	mov	r0, r9
 8003fd4:	f000 fe8c 	bl	8004cf0 <siscanf>
 8003fd8:	2800      	cmp	r0, #0
 8003fda:	f77f af19 	ble.w	8003e10 <_tzset_unlocked_r+0x178>
 8003fde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003fe0:	3b03      	subs	r3, #3
 8003fe2:	2b07      	cmp	r3, #7
 8003fe4:	f67f af44 	bls.w	8003e70 <_tzset_unlocked_r+0x1d8>
 8003fe8:	e684      	b.n	8003cf4 <_tzset_unlocked_r+0x5c>
 8003fea:	2b2b      	cmp	r3, #43	; 0x2b
 8003fec:	bf08      	it	eq
 8003fee:	3501      	addeq	r5, #1
 8003ff0:	f04f 0901 	mov.w	r9, #1
 8003ff4:	e747      	b.n	8003e86 <_tzset_unlocked_r+0x1ee>
 8003ff6:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8003ffa:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8003ffe:	213c      	movs	r1, #60	; 0x3c
 8004000:	fb01 3302 	mla	r3, r1, r2, r3
 8004004:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8004008:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800400c:	fb01 3302 	mla	r3, r1, r2, r3
 8004010:	fb09 f303 	mul.w	r3, r9, r3
 8004014:	e751      	b.n	8003eba <_tzset_unlocked_r+0x222>
 8004016:	f04f 0b01 	mov.w	fp, #1
 800401a:	e754      	b.n	8003ec6 <_tzset_unlocked_r+0x22e>
 800401c:	f1b9 0f4a 	cmp.w	r9, #74	; 0x4a
 8004020:	bf06      	itte	eq
 8004022:	3501      	addeq	r5, #1
 8004024:	464b      	moveq	r3, r9
 8004026:	2344      	movne	r3, #68	; 0x44
 8004028:	220a      	movs	r2, #10
 800402a:	a90b      	add	r1, sp, #44	; 0x2c
 800402c:	4628      	mov	r0, r5
 800402e:	9305      	str	r3, [sp, #20]
 8004030:	f000 faac 	bl	800458c <strtoul>
 8004034:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8004038:	9b05      	ldr	r3, [sp, #20]
 800403a:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 800403e:	45a9      	cmp	r9, r5
 8004040:	d114      	bne.n	800406c <_tzset_unlocked_r+0x3d4>
 8004042:	234d      	movs	r3, #77	; 0x4d
 8004044:	f1bb 0f00 	cmp.w	fp, #0
 8004048:	d107      	bne.n	800405a <_tzset_unlocked_r+0x3c2>
 800404a:	7223      	strb	r3, [r4, #8]
 800404c:	2103      	movs	r1, #3
 800404e:	2302      	movs	r3, #2
 8004050:	e9c4 1303 	strd	r1, r3, [r4, #12]
 8004054:	f8c4 b014 	str.w	fp, [r4, #20]
 8004058:	e769      	b.n	8003f2e <_tzset_unlocked_r+0x296>
 800405a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 800405e:	220b      	movs	r2, #11
 8004060:	2301      	movs	r3, #1
 8004062:	e9c4 230d 	strd	r2, r3, [r4, #52]	; 0x34
 8004066:	2300      	movs	r3, #0
 8004068:	63e3      	str	r3, [r4, #60]	; 0x3c
 800406a:	e760      	b.n	8003f2e <_tzset_unlocked_r+0x296>
 800406c:	b280      	uxth	r0, r0
 800406e:	723b      	strb	r3, [r7, #8]
 8004070:	6178      	str	r0, [r7, #20]
 8004072:	e75c      	b.n	8003f2e <_tzset_unlocked_r+0x296>
 8004074:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8004078:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800407c:	213c      	movs	r1, #60	; 0x3c
 800407e:	fb01 3302 	mla	r3, r1, r2, r3
 8004082:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8004086:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800408a:	fb01 3302 	mla	r3, r1, r2, r3
 800408e:	61bb      	str	r3, [r7, #24]
 8004090:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8004092:	3728      	adds	r7, #40	; 0x28
 8004094:	444d      	add	r5, r9
 8004096:	f1bb 0f00 	cmp.w	fp, #0
 800409a:	d0bc      	beq.n	8004016 <_tzset_unlocked_r+0x37e>
 800409c:	9b04      	ldr	r3, [sp, #16]
 800409e:	6523      	str	r3, [r4, #80]	; 0x50
 80040a0:	4b0b      	ldr	r3, [pc, #44]	; (80040d0 <_tzset_unlocked_r+0x438>)
 80040a2:	f8c8 3000 	str.w	r3, [r8]
 80040a6:	6860      	ldr	r0, [r4, #4]
 80040a8:	4b07      	ldr	r3, [pc, #28]	; (80040c8 <_tzset_unlocked_r+0x430>)
 80040aa:	62a6      	str	r6, [r4, #40]	; 0x28
 80040ac:	f8c8 3004 	str.w	r3, [r8, #4]
 80040b0:	f7ff fd3a 	bl	8003b28 <__tzcalc_limits>
 80040b4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80040b6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80040b8:	f8ca 2000 	str.w	r2, [sl]
 80040bc:	1a9b      	subs	r3, r3, r2
 80040be:	4a05      	ldr	r2, [pc, #20]	; (80040d4 <_tzset_unlocked_r+0x43c>)
 80040c0:	bf18      	it	ne
 80040c2:	2301      	movne	r3, #1
 80040c4:	6013      	str	r3, [r2, #0]
 80040c6:	e615      	b.n	8003cf4 <_tzset_unlocked_r+0x5c>
 80040c8:	200002bc 	.word	0x200002bc
 80040cc:	08005ff2 	.word	0x08005ff2
 80040d0:	200002c8 	.word	0x200002c8
 80040d4:	200002d8 	.word	0x200002d8

080040d8 <_close_r>:
 80040d8:	b538      	push	{r3, r4, r5, lr}
 80040da:	4d06      	ldr	r5, [pc, #24]	; (80040f4 <_close_r+0x1c>)
 80040dc:	2300      	movs	r3, #0
 80040de:	4604      	mov	r4, r0
 80040e0:	4608      	mov	r0, r1
 80040e2:	602b      	str	r3, [r5, #0]
 80040e4:	f7fd f853 	bl	800118e <_close>
 80040e8:	1c43      	adds	r3, r0, #1
 80040ea:	d102      	bne.n	80040f2 <_close_r+0x1a>
 80040ec:	682b      	ldr	r3, [r5, #0]
 80040ee:	b103      	cbz	r3, 80040f2 <_close_r+0x1a>
 80040f0:	6023      	str	r3, [r4, #0]
 80040f2:	bd38      	pop	{r3, r4, r5, pc}
 80040f4:	200002e0 	.word	0x200002e0

080040f8 <_lseek_r>:
 80040f8:	b538      	push	{r3, r4, r5, lr}
 80040fa:	4d07      	ldr	r5, [pc, #28]	; (8004118 <_lseek_r+0x20>)
 80040fc:	4604      	mov	r4, r0
 80040fe:	4608      	mov	r0, r1
 8004100:	4611      	mov	r1, r2
 8004102:	2200      	movs	r2, #0
 8004104:	602a      	str	r2, [r5, #0]
 8004106:	461a      	mov	r2, r3
 8004108:	f7fd f868 	bl	80011dc <_lseek>
 800410c:	1c43      	adds	r3, r0, #1
 800410e:	d102      	bne.n	8004116 <_lseek_r+0x1e>
 8004110:	682b      	ldr	r3, [r5, #0]
 8004112:	b103      	cbz	r3, 8004116 <_lseek_r+0x1e>
 8004114:	6023      	str	r3, [r4, #0]
 8004116:	bd38      	pop	{r3, r4, r5, pc}
 8004118:	200002e0 	.word	0x200002e0

0800411c <_read_r>:
 800411c:	b538      	push	{r3, r4, r5, lr}
 800411e:	4d07      	ldr	r5, [pc, #28]	; (800413c <_read_r+0x20>)
 8004120:	4604      	mov	r4, r0
 8004122:	4608      	mov	r0, r1
 8004124:	4611      	mov	r1, r2
 8004126:	2200      	movs	r2, #0
 8004128:	602a      	str	r2, [r5, #0]
 800412a:	461a      	mov	r2, r3
 800412c:	f7fc fff6 	bl	800111c <_read>
 8004130:	1c43      	adds	r3, r0, #1
 8004132:	d102      	bne.n	800413a <_read_r+0x1e>
 8004134:	682b      	ldr	r3, [r5, #0]
 8004136:	b103      	cbz	r3, 800413a <_read_r+0x1e>
 8004138:	6023      	str	r3, [r4, #0]
 800413a:	bd38      	pop	{r3, r4, r5, pc}
 800413c:	200002e0 	.word	0x200002e0

08004140 <_write_r>:
 8004140:	b538      	push	{r3, r4, r5, lr}
 8004142:	4d07      	ldr	r5, [pc, #28]	; (8004160 <_write_r+0x20>)
 8004144:	4604      	mov	r4, r0
 8004146:	4608      	mov	r0, r1
 8004148:	4611      	mov	r1, r2
 800414a:	2200      	movs	r2, #0
 800414c:	602a      	str	r2, [r5, #0]
 800414e:	461a      	mov	r2, r3
 8004150:	f7fd f801 	bl	8001156 <_write>
 8004154:	1c43      	adds	r3, r0, #1
 8004156:	d102      	bne.n	800415e <_write_r+0x1e>
 8004158:	682b      	ldr	r3, [r5, #0]
 800415a:	b103      	cbz	r3, 800415e <_write_r+0x1e>
 800415c:	6023      	str	r3, [r4, #0]
 800415e:	bd38      	pop	{r3, r4, r5, pc}
 8004160:	200002e0 	.word	0x200002e0

08004164 <__errno>:
 8004164:	4b01      	ldr	r3, [pc, #4]	; (800416c <__errno+0x8>)
 8004166:	6818      	ldr	r0, [r3, #0]
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop
 800416c:	20000070 	.word	0x20000070

08004170 <__libc_init_array>:
 8004170:	b570      	push	{r4, r5, r6, lr}
 8004172:	4d0d      	ldr	r5, [pc, #52]	; (80041a8 <__libc_init_array+0x38>)
 8004174:	4c0d      	ldr	r4, [pc, #52]	; (80041ac <__libc_init_array+0x3c>)
 8004176:	1b64      	subs	r4, r4, r5
 8004178:	10a4      	asrs	r4, r4, #2
 800417a:	2600      	movs	r6, #0
 800417c:	42a6      	cmp	r6, r4
 800417e:	d109      	bne.n	8004194 <__libc_init_array+0x24>
 8004180:	4d0b      	ldr	r5, [pc, #44]	; (80041b0 <__libc_init_array+0x40>)
 8004182:	4c0c      	ldr	r4, [pc, #48]	; (80041b4 <__libc_init_array+0x44>)
 8004184:	f001 fdd8 	bl	8005d38 <_init>
 8004188:	1b64      	subs	r4, r4, r5
 800418a:	10a4      	asrs	r4, r4, #2
 800418c:	2600      	movs	r6, #0
 800418e:	42a6      	cmp	r6, r4
 8004190:	d105      	bne.n	800419e <__libc_init_array+0x2e>
 8004192:	bd70      	pop	{r4, r5, r6, pc}
 8004194:	f855 3b04 	ldr.w	r3, [r5], #4
 8004198:	4798      	blx	r3
 800419a:	3601      	adds	r6, #1
 800419c:	e7ee      	b.n	800417c <__libc_init_array+0xc>
 800419e:	f855 3b04 	ldr.w	r3, [r5], #4
 80041a2:	4798      	blx	r3
 80041a4:	3601      	adds	r6, #1
 80041a6:	e7f2      	b.n	800418e <__libc_init_array+0x1e>
 80041a8:	080061bc 	.word	0x080061bc
 80041ac:	080061bc 	.word	0x080061bc
 80041b0:	080061bc 	.word	0x080061bc
 80041b4:	080061c0 	.word	0x080061c0

080041b8 <__retarget_lock_acquire>:
 80041b8:	4770      	bx	lr

080041ba <__retarget_lock_acquire_recursive>:
 80041ba:	4770      	bx	lr

080041bc <__retarget_lock_release>:
 80041bc:	4770      	bx	lr

080041be <__retarget_lock_release_recursive>:
 80041be:	4770      	bx	lr

080041c0 <strcpy>:
 80041c0:	4603      	mov	r3, r0
 80041c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80041c6:	f803 2b01 	strb.w	r2, [r3], #1
 80041ca:	2a00      	cmp	r2, #0
 80041cc:	d1f9      	bne.n	80041c2 <strcpy+0x2>
 80041ce:	4770      	bx	lr

080041d0 <__assert_func>:
 80041d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80041d2:	4614      	mov	r4, r2
 80041d4:	461a      	mov	r2, r3
 80041d6:	4b09      	ldr	r3, [pc, #36]	; (80041fc <__assert_func+0x2c>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4605      	mov	r5, r0
 80041dc:	68d8      	ldr	r0, [r3, #12]
 80041de:	b14c      	cbz	r4, 80041f4 <__assert_func+0x24>
 80041e0:	4b07      	ldr	r3, [pc, #28]	; (8004200 <__assert_func+0x30>)
 80041e2:	9100      	str	r1, [sp, #0]
 80041e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80041e8:	4906      	ldr	r1, [pc, #24]	; (8004204 <__assert_func+0x34>)
 80041ea:	462b      	mov	r3, r5
 80041ec:	f000 fd6e 	bl	8004ccc <fiprintf>
 80041f0:	f000 fe9e 	bl	8004f30 <abort>
 80041f4:	4b04      	ldr	r3, [pc, #16]	; (8004208 <__assert_func+0x38>)
 80041f6:	461c      	mov	r4, r3
 80041f8:	e7f3      	b.n	80041e2 <__assert_func+0x12>
 80041fa:	bf00      	nop
 80041fc:	20000070 	.word	0x20000070
 8004200:	08006026 	.word	0x08006026
 8004204:	08006033 	.word	0x08006033
 8004208:	08006061 	.word	0x08006061

0800420c <_free_r>:
 800420c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800420e:	2900      	cmp	r1, #0
 8004210:	d044      	beq.n	800429c <_free_r+0x90>
 8004212:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004216:	9001      	str	r0, [sp, #4]
 8004218:	2b00      	cmp	r3, #0
 800421a:	f1a1 0404 	sub.w	r4, r1, #4
 800421e:	bfb8      	it	lt
 8004220:	18e4      	addlt	r4, r4, r3
 8004222:	f000 f933 	bl	800448c <__malloc_lock>
 8004226:	4a1e      	ldr	r2, [pc, #120]	; (80042a0 <_free_r+0x94>)
 8004228:	9801      	ldr	r0, [sp, #4]
 800422a:	6813      	ldr	r3, [r2, #0]
 800422c:	b933      	cbnz	r3, 800423c <_free_r+0x30>
 800422e:	6063      	str	r3, [r4, #4]
 8004230:	6014      	str	r4, [r2, #0]
 8004232:	b003      	add	sp, #12
 8004234:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004238:	f000 b92e 	b.w	8004498 <__malloc_unlock>
 800423c:	42a3      	cmp	r3, r4
 800423e:	d908      	bls.n	8004252 <_free_r+0x46>
 8004240:	6825      	ldr	r5, [r4, #0]
 8004242:	1961      	adds	r1, r4, r5
 8004244:	428b      	cmp	r3, r1
 8004246:	bf01      	itttt	eq
 8004248:	6819      	ldreq	r1, [r3, #0]
 800424a:	685b      	ldreq	r3, [r3, #4]
 800424c:	1949      	addeq	r1, r1, r5
 800424e:	6021      	streq	r1, [r4, #0]
 8004250:	e7ed      	b.n	800422e <_free_r+0x22>
 8004252:	461a      	mov	r2, r3
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	b10b      	cbz	r3, 800425c <_free_r+0x50>
 8004258:	42a3      	cmp	r3, r4
 800425a:	d9fa      	bls.n	8004252 <_free_r+0x46>
 800425c:	6811      	ldr	r1, [r2, #0]
 800425e:	1855      	adds	r5, r2, r1
 8004260:	42a5      	cmp	r5, r4
 8004262:	d10b      	bne.n	800427c <_free_r+0x70>
 8004264:	6824      	ldr	r4, [r4, #0]
 8004266:	4421      	add	r1, r4
 8004268:	1854      	adds	r4, r2, r1
 800426a:	42a3      	cmp	r3, r4
 800426c:	6011      	str	r1, [r2, #0]
 800426e:	d1e0      	bne.n	8004232 <_free_r+0x26>
 8004270:	681c      	ldr	r4, [r3, #0]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	6053      	str	r3, [r2, #4]
 8004276:	440c      	add	r4, r1
 8004278:	6014      	str	r4, [r2, #0]
 800427a:	e7da      	b.n	8004232 <_free_r+0x26>
 800427c:	d902      	bls.n	8004284 <_free_r+0x78>
 800427e:	230c      	movs	r3, #12
 8004280:	6003      	str	r3, [r0, #0]
 8004282:	e7d6      	b.n	8004232 <_free_r+0x26>
 8004284:	6825      	ldr	r5, [r4, #0]
 8004286:	1961      	adds	r1, r4, r5
 8004288:	428b      	cmp	r3, r1
 800428a:	bf04      	itt	eq
 800428c:	6819      	ldreq	r1, [r3, #0]
 800428e:	685b      	ldreq	r3, [r3, #4]
 8004290:	6063      	str	r3, [r4, #4]
 8004292:	bf04      	itt	eq
 8004294:	1949      	addeq	r1, r1, r5
 8004296:	6021      	streq	r1, [r4, #0]
 8004298:	6054      	str	r4, [r2, #4]
 800429a:	e7ca      	b.n	8004232 <_free_r+0x26>
 800429c:	b003      	add	sp, #12
 800429e:	bd30      	pop	{r4, r5, pc}
 80042a0:	200002e8 	.word	0x200002e8

080042a4 <_findenv_r>:
 80042a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042a8:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8004318 <_findenv_r+0x74>
 80042ac:	4607      	mov	r7, r0
 80042ae:	4689      	mov	r9, r1
 80042b0:	4616      	mov	r6, r2
 80042b2:	f000 fe45 	bl	8004f40 <__env_lock>
 80042b6:	f8da 4000 	ldr.w	r4, [sl]
 80042ba:	b134      	cbz	r4, 80042ca <_findenv_r+0x26>
 80042bc:	464b      	mov	r3, r9
 80042be:	4698      	mov	r8, r3
 80042c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80042c4:	b13a      	cbz	r2, 80042d6 <_findenv_r+0x32>
 80042c6:	2a3d      	cmp	r2, #61	; 0x3d
 80042c8:	d1f9      	bne.n	80042be <_findenv_r+0x1a>
 80042ca:	4638      	mov	r0, r7
 80042cc:	f000 fe3e 	bl	8004f4c <__env_unlock>
 80042d0:	2000      	movs	r0, #0
 80042d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042d6:	eba8 0809 	sub.w	r8, r8, r9
 80042da:	46a3      	mov	fp, r4
 80042dc:	f854 0b04 	ldr.w	r0, [r4], #4
 80042e0:	2800      	cmp	r0, #0
 80042e2:	d0f2      	beq.n	80042ca <_findenv_r+0x26>
 80042e4:	4642      	mov	r2, r8
 80042e6:	4649      	mov	r1, r9
 80042e8:	f000 fd48 	bl	8004d7c <strncmp>
 80042ec:	2800      	cmp	r0, #0
 80042ee:	d1f4      	bne.n	80042da <_findenv_r+0x36>
 80042f0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80042f4:	eb03 0508 	add.w	r5, r3, r8
 80042f8:	f813 3008 	ldrb.w	r3, [r3, r8]
 80042fc:	2b3d      	cmp	r3, #61	; 0x3d
 80042fe:	d1ec      	bne.n	80042da <_findenv_r+0x36>
 8004300:	f8da 3000 	ldr.w	r3, [sl]
 8004304:	ebab 0303 	sub.w	r3, fp, r3
 8004308:	109b      	asrs	r3, r3, #2
 800430a:	4638      	mov	r0, r7
 800430c:	6033      	str	r3, [r6, #0]
 800430e:	f000 fe1d 	bl	8004f4c <__env_unlock>
 8004312:	1c68      	adds	r0, r5, #1
 8004314:	e7dd      	b.n	80042d2 <_findenv_r+0x2e>
 8004316:	bf00      	nop
 8004318:	20000000 	.word	0x20000000

0800431c <_getenv_r>:
 800431c:	b507      	push	{r0, r1, r2, lr}
 800431e:	aa01      	add	r2, sp, #4
 8004320:	f7ff ffc0 	bl	80042a4 <_findenv_r>
 8004324:	b003      	add	sp, #12
 8004326:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800432c <malloc>:
 800432c:	4b02      	ldr	r3, [pc, #8]	; (8004338 <malloc+0xc>)
 800432e:	4601      	mov	r1, r0
 8004330:	6818      	ldr	r0, [r3, #0]
 8004332:	f000 b82b 	b.w	800438c <_malloc_r>
 8004336:	bf00      	nop
 8004338:	20000070 	.word	0x20000070

0800433c <free>:
 800433c:	4b02      	ldr	r3, [pc, #8]	; (8004348 <free+0xc>)
 800433e:	4601      	mov	r1, r0
 8004340:	6818      	ldr	r0, [r3, #0]
 8004342:	f7ff bf63 	b.w	800420c <_free_r>
 8004346:	bf00      	nop
 8004348:	20000070 	.word	0x20000070

0800434c <sbrk_aligned>:
 800434c:	b570      	push	{r4, r5, r6, lr}
 800434e:	4e0e      	ldr	r6, [pc, #56]	; (8004388 <sbrk_aligned+0x3c>)
 8004350:	460c      	mov	r4, r1
 8004352:	6831      	ldr	r1, [r6, #0]
 8004354:	4605      	mov	r5, r0
 8004356:	b911      	cbnz	r1, 800435e <sbrk_aligned+0x12>
 8004358:	f000 fdcc 	bl	8004ef4 <_sbrk_r>
 800435c:	6030      	str	r0, [r6, #0]
 800435e:	4621      	mov	r1, r4
 8004360:	4628      	mov	r0, r5
 8004362:	f000 fdc7 	bl	8004ef4 <_sbrk_r>
 8004366:	1c43      	adds	r3, r0, #1
 8004368:	d00a      	beq.n	8004380 <sbrk_aligned+0x34>
 800436a:	1cc4      	adds	r4, r0, #3
 800436c:	f024 0403 	bic.w	r4, r4, #3
 8004370:	42a0      	cmp	r0, r4
 8004372:	d007      	beq.n	8004384 <sbrk_aligned+0x38>
 8004374:	1a21      	subs	r1, r4, r0
 8004376:	4628      	mov	r0, r5
 8004378:	f000 fdbc 	bl	8004ef4 <_sbrk_r>
 800437c:	3001      	adds	r0, #1
 800437e:	d101      	bne.n	8004384 <sbrk_aligned+0x38>
 8004380:	f04f 34ff 	mov.w	r4, #4294967295
 8004384:	4620      	mov	r0, r4
 8004386:	bd70      	pop	{r4, r5, r6, pc}
 8004388:	200002ec 	.word	0x200002ec

0800438c <_malloc_r>:
 800438c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004390:	1ccd      	adds	r5, r1, #3
 8004392:	f025 0503 	bic.w	r5, r5, #3
 8004396:	3508      	adds	r5, #8
 8004398:	2d0c      	cmp	r5, #12
 800439a:	bf38      	it	cc
 800439c:	250c      	movcc	r5, #12
 800439e:	2d00      	cmp	r5, #0
 80043a0:	4607      	mov	r7, r0
 80043a2:	db01      	blt.n	80043a8 <_malloc_r+0x1c>
 80043a4:	42a9      	cmp	r1, r5
 80043a6:	d905      	bls.n	80043b4 <_malloc_r+0x28>
 80043a8:	230c      	movs	r3, #12
 80043aa:	603b      	str	r3, [r7, #0]
 80043ac:	2600      	movs	r6, #0
 80043ae:	4630      	mov	r0, r6
 80043b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043b4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004488 <_malloc_r+0xfc>
 80043b8:	f000 f868 	bl	800448c <__malloc_lock>
 80043bc:	f8d8 3000 	ldr.w	r3, [r8]
 80043c0:	461c      	mov	r4, r3
 80043c2:	bb5c      	cbnz	r4, 800441c <_malloc_r+0x90>
 80043c4:	4629      	mov	r1, r5
 80043c6:	4638      	mov	r0, r7
 80043c8:	f7ff ffc0 	bl	800434c <sbrk_aligned>
 80043cc:	1c43      	adds	r3, r0, #1
 80043ce:	4604      	mov	r4, r0
 80043d0:	d155      	bne.n	800447e <_malloc_r+0xf2>
 80043d2:	f8d8 4000 	ldr.w	r4, [r8]
 80043d6:	4626      	mov	r6, r4
 80043d8:	2e00      	cmp	r6, #0
 80043da:	d145      	bne.n	8004468 <_malloc_r+0xdc>
 80043dc:	2c00      	cmp	r4, #0
 80043de:	d048      	beq.n	8004472 <_malloc_r+0xe6>
 80043e0:	6823      	ldr	r3, [r4, #0]
 80043e2:	4631      	mov	r1, r6
 80043e4:	4638      	mov	r0, r7
 80043e6:	eb04 0903 	add.w	r9, r4, r3
 80043ea:	f000 fd83 	bl	8004ef4 <_sbrk_r>
 80043ee:	4581      	cmp	r9, r0
 80043f0:	d13f      	bne.n	8004472 <_malloc_r+0xe6>
 80043f2:	6821      	ldr	r1, [r4, #0]
 80043f4:	1a6d      	subs	r5, r5, r1
 80043f6:	4629      	mov	r1, r5
 80043f8:	4638      	mov	r0, r7
 80043fa:	f7ff ffa7 	bl	800434c <sbrk_aligned>
 80043fe:	3001      	adds	r0, #1
 8004400:	d037      	beq.n	8004472 <_malloc_r+0xe6>
 8004402:	6823      	ldr	r3, [r4, #0]
 8004404:	442b      	add	r3, r5
 8004406:	6023      	str	r3, [r4, #0]
 8004408:	f8d8 3000 	ldr.w	r3, [r8]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d038      	beq.n	8004482 <_malloc_r+0xf6>
 8004410:	685a      	ldr	r2, [r3, #4]
 8004412:	42a2      	cmp	r2, r4
 8004414:	d12b      	bne.n	800446e <_malloc_r+0xe2>
 8004416:	2200      	movs	r2, #0
 8004418:	605a      	str	r2, [r3, #4]
 800441a:	e00f      	b.n	800443c <_malloc_r+0xb0>
 800441c:	6822      	ldr	r2, [r4, #0]
 800441e:	1b52      	subs	r2, r2, r5
 8004420:	d41f      	bmi.n	8004462 <_malloc_r+0xd6>
 8004422:	2a0b      	cmp	r2, #11
 8004424:	d917      	bls.n	8004456 <_malloc_r+0xca>
 8004426:	1961      	adds	r1, r4, r5
 8004428:	42a3      	cmp	r3, r4
 800442a:	6025      	str	r5, [r4, #0]
 800442c:	bf18      	it	ne
 800442e:	6059      	strne	r1, [r3, #4]
 8004430:	6863      	ldr	r3, [r4, #4]
 8004432:	bf08      	it	eq
 8004434:	f8c8 1000 	streq.w	r1, [r8]
 8004438:	5162      	str	r2, [r4, r5]
 800443a:	604b      	str	r3, [r1, #4]
 800443c:	4638      	mov	r0, r7
 800443e:	f104 060b 	add.w	r6, r4, #11
 8004442:	f000 f829 	bl	8004498 <__malloc_unlock>
 8004446:	f026 0607 	bic.w	r6, r6, #7
 800444a:	1d23      	adds	r3, r4, #4
 800444c:	1af2      	subs	r2, r6, r3
 800444e:	d0ae      	beq.n	80043ae <_malloc_r+0x22>
 8004450:	1b9b      	subs	r3, r3, r6
 8004452:	50a3      	str	r3, [r4, r2]
 8004454:	e7ab      	b.n	80043ae <_malloc_r+0x22>
 8004456:	42a3      	cmp	r3, r4
 8004458:	6862      	ldr	r2, [r4, #4]
 800445a:	d1dd      	bne.n	8004418 <_malloc_r+0x8c>
 800445c:	f8c8 2000 	str.w	r2, [r8]
 8004460:	e7ec      	b.n	800443c <_malloc_r+0xb0>
 8004462:	4623      	mov	r3, r4
 8004464:	6864      	ldr	r4, [r4, #4]
 8004466:	e7ac      	b.n	80043c2 <_malloc_r+0x36>
 8004468:	4634      	mov	r4, r6
 800446a:	6876      	ldr	r6, [r6, #4]
 800446c:	e7b4      	b.n	80043d8 <_malloc_r+0x4c>
 800446e:	4613      	mov	r3, r2
 8004470:	e7cc      	b.n	800440c <_malloc_r+0x80>
 8004472:	230c      	movs	r3, #12
 8004474:	603b      	str	r3, [r7, #0]
 8004476:	4638      	mov	r0, r7
 8004478:	f000 f80e 	bl	8004498 <__malloc_unlock>
 800447c:	e797      	b.n	80043ae <_malloc_r+0x22>
 800447e:	6025      	str	r5, [r4, #0]
 8004480:	e7dc      	b.n	800443c <_malloc_r+0xb0>
 8004482:	605b      	str	r3, [r3, #4]
 8004484:	deff      	udf	#255	; 0xff
 8004486:	bf00      	nop
 8004488:	200002e8 	.word	0x200002e8

0800448c <__malloc_lock>:
 800448c:	4801      	ldr	r0, [pc, #4]	; (8004494 <__malloc_lock+0x8>)
 800448e:	f7ff be94 	b.w	80041ba <__retarget_lock_acquire_recursive>
 8004492:	bf00      	nop
 8004494:	200002e5 	.word	0x200002e5

08004498 <__malloc_unlock>:
 8004498:	4801      	ldr	r0, [pc, #4]	; (80044a0 <__malloc_unlock+0x8>)
 800449a:	f7ff be90 	b.w	80041be <__retarget_lock_release_recursive>
 800449e:	bf00      	nop
 80044a0:	200002e5 	.word	0x200002e5

080044a4 <_strtoul_l.constprop.0>:
 80044a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80044a8:	4f36      	ldr	r7, [pc, #216]	; (8004584 <_strtoul_l.constprop.0+0xe0>)
 80044aa:	4686      	mov	lr, r0
 80044ac:	460d      	mov	r5, r1
 80044ae:	4628      	mov	r0, r5
 80044b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80044b4:	5d3e      	ldrb	r6, [r7, r4]
 80044b6:	f016 0608 	ands.w	r6, r6, #8
 80044ba:	d1f8      	bne.n	80044ae <_strtoul_l.constprop.0+0xa>
 80044bc:	2c2d      	cmp	r4, #45	; 0x2d
 80044be:	d130      	bne.n	8004522 <_strtoul_l.constprop.0+0x7e>
 80044c0:	782c      	ldrb	r4, [r5, #0]
 80044c2:	2601      	movs	r6, #1
 80044c4:	1c85      	adds	r5, r0, #2
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d057      	beq.n	800457a <_strtoul_l.constprop.0+0xd6>
 80044ca:	2b10      	cmp	r3, #16
 80044cc:	d109      	bne.n	80044e2 <_strtoul_l.constprop.0+0x3e>
 80044ce:	2c30      	cmp	r4, #48	; 0x30
 80044d0:	d107      	bne.n	80044e2 <_strtoul_l.constprop.0+0x3e>
 80044d2:	7828      	ldrb	r0, [r5, #0]
 80044d4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80044d8:	2858      	cmp	r0, #88	; 0x58
 80044da:	d149      	bne.n	8004570 <_strtoul_l.constprop.0+0xcc>
 80044dc:	786c      	ldrb	r4, [r5, #1]
 80044de:	2310      	movs	r3, #16
 80044e0:	3502      	adds	r5, #2
 80044e2:	f04f 38ff 	mov.w	r8, #4294967295
 80044e6:	2700      	movs	r7, #0
 80044e8:	fbb8 f8f3 	udiv	r8, r8, r3
 80044ec:	fb03 f908 	mul.w	r9, r3, r8
 80044f0:	ea6f 0909 	mvn.w	r9, r9
 80044f4:	4638      	mov	r0, r7
 80044f6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80044fa:	f1bc 0f09 	cmp.w	ip, #9
 80044fe:	d815      	bhi.n	800452c <_strtoul_l.constprop.0+0x88>
 8004500:	4664      	mov	r4, ip
 8004502:	42a3      	cmp	r3, r4
 8004504:	dd23      	ble.n	800454e <_strtoul_l.constprop.0+0xaa>
 8004506:	f1b7 3fff 	cmp.w	r7, #4294967295
 800450a:	d007      	beq.n	800451c <_strtoul_l.constprop.0+0x78>
 800450c:	4580      	cmp	r8, r0
 800450e:	d31b      	bcc.n	8004548 <_strtoul_l.constprop.0+0xa4>
 8004510:	d101      	bne.n	8004516 <_strtoul_l.constprop.0+0x72>
 8004512:	45a1      	cmp	r9, r4
 8004514:	db18      	blt.n	8004548 <_strtoul_l.constprop.0+0xa4>
 8004516:	fb00 4003 	mla	r0, r0, r3, r4
 800451a:	2701      	movs	r7, #1
 800451c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004520:	e7e9      	b.n	80044f6 <_strtoul_l.constprop.0+0x52>
 8004522:	2c2b      	cmp	r4, #43	; 0x2b
 8004524:	bf04      	itt	eq
 8004526:	782c      	ldrbeq	r4, [r5, #0]
 8004528:	1c85      	addeq	r5, r0, #2
 800452a:	e7cc      	b.n	80044c6 <_strtoul_l.constprop.0+0x22>
 800452c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004530:	f1bc 0f19 	cmp.w	ip, #25
 8004534:	d801      	bhi.n	800453a <_strtoul_l.constprop.0+0x96>
 8004536:	3c37      	subs	r4, #55	; 0x37
 8004538:	e7e3      	b.n	8004502 <_strtoul_l.constprop.0+0x5e>
 800453a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800453e:	f1bc 0f19 	cmp.w	ip, #25
 8004542:	d804      	bhi.n	800454e <_strtoul_l.constprop.0+0xaa>
 8004544:	3c57      	subs	r4, #87	; 0x57
 8004546:	e7dc      	b.n	8004502 <_strtoul_l.constprop.0+0x5e>
 8004548:	f04f 37ff 	mov.w	r7, #4294967295
 800454c:	e7e6      	b.n	800451c <_strtoul_l.constprop.0+0x78>
 800454e:	1c7b      	adds	r3, r7, #1
 8004550:	d106      	bne.n	8004560 <_strtoul_l.constprop.0+0xbc>
 8004552:	2322      	movs	r3, #34	; 0x22
 8004554:	f8ce 3000 	str.w	r3, [lr]
 8004558:	4638      	mov	r0, r7
 800455a:	b932      	cbnz	r2, 800456a <_strtoul_l.constprop.0+0xc6>
 800455c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004560:	b106      	cbz	r6, 8004564 <_strtoul_l.constprop.0+0xc0>
 8004562:	4240      	negs	r0, r0
 8004564:	2a00      	cmp	r2, #0
 8004566:	d0f9      	beq.n	800455c <_strtoul_l.constprop.0+0xb8>
 8004568:	b107      	cbz	r7, 800456c <_strtoul_l.constprop.0+0xc8>
 800456a:	1e69      	subs	r1, r5, #1
 800456c:	6011      	str	r1, [r2, #0]
 800456e:	e7f5      	b.n	800455c <_strtoul_l.constprop.0+0xb8>
 8004570:	2430      	movs	r4, #48	; 0x30
 8004572:	2b00      	cmp	r3, #0
 8004574:	d1b5      	bne.n	80044e2 <_strtoul_l.constprop.0+0x3e>
 8004576:	2308      	movs	r3, #8
 8004578:	e7b3      	b.n	80044e2 <_strtoul_l.constprop.0+0x3e>
 800457a:	2c30      	cmp	r4, #48	; 0x30
 800457c:	d0a9      	beq.n	80044d2 <_strtoul_l.constprop.0+0x2e>
 800457e:	230a      	movs	r3, #10
 8004580:	e7af      	b.n	80044e2 <_strtoul_l.constprop.0+0x3e>
 8004582:	bf00      	nop
 8004584:	08006063 	.word	0x08006063

08004588 <_strtoul_r>:
 8004588:	f7ff bf8c 	b.w	80044a4 <_strtoul_l.constprop.0>

0800458c <strtoul>:
 800458c:	4613      	mov	r3, r2
 800458e:	460a      	mov	r2, r1
 8004590:	4601      	mov	r1, r0
 8004592:	4802      	ldr	r0, [pc, #8]	; (800459c <strtoul+0x10>)
 8004594:	6800      	ldr	r0, [r0, #0]
 8004596:	f7ff bf85 	b.w	80044a4 <_strtoul_l.constprop.0>
 800459a:	bf00      	nop
 800459c:	20000070 	.word	0x20000070

080045a0 <__ssputs_r>:
 80045a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045a4:	688e      	ldr	r6, [r1, #8]
 80045a6:	461f      	mov	r7, r3
 80045a8:	42be      	cmp	r6, r7
 80045aa:	680b      	ldr	r3, [r1, #0]
 80045ac:	4682      	mov	sl, r0
 80045ae:	460c      	mov	r4, r1
 80045b0:	4690      	mov	r8, r2
 80045b2:	d82c      	bhi.n	800460e <__ssputs_r+0x6e>
 80045b4:	898a      	ldrh	r2, [r1, #12]
 80045b6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80045ba:	d026      	beq.n	800460a <__ssputs_r+0x6a>
 80045bc:	6965      	ldr	r5, [r4, #20]
 80045be:	6909      	ldr	r1, [r1, #16]
 80045c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80045c4:	eba3 0901 	sub.w	r9, r3, r1
 80045c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80045cc:	1c7b      	adds	r3, r7, #1
 80045ce:	444b      	add	r3, r9
 80045d0:	106d      	asrs	r5, r5, #1
 80045d2:	429d      	cmp	r5, r3
 80045d4:	bf38      	it	cc
 80045d6:	461d      	movcc	r5, r3
 80045d8:	0553      	lsls	r3, r2, #21
 80045da:	d527      	bpl.n	800462c <__ssputs_r+0x8c>
 80045dc:	4629      	mov	r1, r5
 80045de:	f7ff fed5 	bl	800438c <_malloc_r>
 80045e2:	4606      	mov	r6, r0
 80045e4:	b360      	cbz	r0, 8004640 <__ssputs_r+0xa0>
 80045e6:	6921      	ldr	r1, [r4, #16]
 80045e8:	464a      	mov	r2, r9
 80045ea:	f000 fc93 	bl	8004f14 <memcpy>
 80045ee:	89a3      	ldrh	r3, [r4, #12]
 80045f0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80045f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045f8:	81a3      	strh	r3, [r4, #12]
 80045fa:	6126      	str	r6, [r4, #16]
 80045fc:	6165      	str	r5, [r4, #20]
 80045fe:	444e      	add	r6, r9
 8004600:	eba5 0509 	sub.w	r5, r5, r9
 8004604:	6026      	str	r6, [r4, #0]
 8004606:	60a5      	str	r5, [r4, #8]
 8004608:	463e      	mov	r6, r7
 800460a:	42be      	cmp	r6, r7
 800460c:	d900      	bls.n	8004610 <__ssputs_r+0x70>
 800460e:	463e      	mov	r6, r7
 8004610:	6820      	ldr	r0, [r4, #0]
 8004612:	4632      	mov	r2, r6
 8004614:	4641      	mov	r1, r8
 8004616:	f000 fb97 	bl	8004d48 <memmove>
 800461a:	68a3      	ldr	r3, [r4, #8]
 800461c:	1b9b      	subs	r3, r3, r6
 800461e:	60a3      	str	r3, [r4, #8]
 8004620:	6823      	ldr	r3, [r4, #0]
 8004622:	4433      	add	r3, r6
 8004624:	6023      	str	r3, [r4, #0]
 8004626:	2000      	movs	r0, #0
 8004628:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800462c:	462a      	mov	r2, r5
 800462e:	f000 fc93 	bl	8004f58 <_realloc_r>
 8004632:	4606      	mov	r6, r0
 8004634:	2800      	cmp	r0, #0
 8004636:	d1e0      	bne.n	80045fa <__ssputs_r+0x5a>
 8004638:	6921      	ldr	r1, [r4, #16]
 800463a:	4650      	mov	r0, sl
 800463c:	f7ff fde6 	bl	800420c <_free_r>
 8004640:	230c      	movs	r3, #12
 8004642:	f8ca 3000 	str.w	r3, [sl]
 8004646:	89a3      	ldrh	r3, [r4, #12]
 8004648:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800464c:	81a3      	strh	r3, [r4, #12]
 800464e:	f04f 30ff 	mov.w	r0, #4294967295
 8004652:	e7e9      	b.n	8004628 <__ssputs_r+0x88>

08004654 <_svfiprintf_r>:
 8004654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004658:	4698      	mov	r8, r3
 800465a:	898b      	ldrh	r3, [r1, #12]
 800465c:	061b      	lsls	r3, r3, #24
 800465e:	b09d      	sub	sp, #116	; 0x74
 8004660:	4607      	mov	r7, r0
 8004662:	460d      	mov	r5, r1
 8004664:	4614      	mov	r4, r2
 8004666:	d50e      	bpl.n	8004686 <_svfiprintf_r+0x32>
 8004668:	690b      	ldr	r3, [r1, #16]
 800466a:	b963      	cbnz	r3, 8004686 <_svfiprintf_r+0x32>
 800466c:	2140      	movs	r1, #64	; 0x40
 800466e:	f7ff fe8d 	bl	800438c <_malloc_r>
 8004672:	6028      	str	r0, [r5, #0]
 8004674:	6128      	str	r0, [r5, #16]
 8004676:	b920      	cbnz	r0, 8004682 <_svfiprintf_r+0x2e>
 8004678:	230c      	movs	r3, #12
 800467a:	603b      	str	r3, [r7, #0]
 800467c:	f04f 30ff 	mov.w	r0, #4294967295
 8004680:	e0d0      	b.n	8004824 <_svfiprintf_r+0x1d0>
 8004682:	2340      	movs	r3, #64	; 0x40
 8004684:	616b      	str	r3, [r5, #20]
 8004686:	2300      	movs	r3, #0
 8004688:	9309      	str	r3, [sp, #36]	; 0x24
 800468a:	2320      	movs	r3, #32
 800468c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004690:	f8cd 800c 	str.w	r8, [sp, #12]
 8004694:	2330      	movs	r3, #48	; 0x30
 8004696:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800483c <_svfiprintf_r+0x1e8>
 800469a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800469e:	f04f 0901 	mov.w	r9, #1
 80046a2:	4623      	mov	r3, r4
 80046a4:	469a      	mov	sl, r3
 80046a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80046aa:	b10a      	cbz	r2, 80046b0 <_svfiprintf_r+0x5c>
 80046ac:	2a25      	cmp	r2, #37	; 0x25
 80046ae:	d1f9      	bne.n	80046a4 <_svfiprintf_r+0x50>
 80046b0:	ebba 0b04 	subs.w	fp, sl, r4
 80046b4:	d00b      	beq.n	80046ce <_svfiprintf_r+0x7a>
 80046b6:	465b      	mov	r3, fp
 80046b8:	4622      	mov	r2, r4
 80046ba:	4629      	mov	r1, r5
 80046bc:	4638      	mov	r0, r7
 80046be:	f7ff ff6f 	bl	80045a0 <__ssputs_r>
 80046c2:	3001      	adds	r0, #1
 80046c4:	f000 80a9 	beq.w	800481a <_svfiprintf_r+0x1c6>
 80046c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80046ca:	445a      	add	r2, fp
 80046cc:	9209      	str	r2, [sp, #36]	; 0x24
 80046ce:	f89a 3000 	ldrb.w	r3, [sl]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	f000 80a1 	beq.w	800481a <_svfiprintf_r+0x1c6>
 80046d8:	2300      	movs	r3, #0
 80046da:	f04f 32ff 	mov.w	r2, #4294967295
 80046de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80046e2:	f10a 0a01 	add.w	sl, sl, #1
 80046e6:	9304      	str	r3, [sp, #16]
 80046e8:	9307      	str	r3, [sp, #28]
 80046ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80046ee:	931a      	str	r3, [sp, #104]	; 0x68
 80046f0:	4654      	mov	r4, sl
 80046f2:	2205      	movs	r2, #5
 80046f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046f8:	4850      	ldr	r0, [pc, #320]	; (800483c <_svfiprintf_r+0x1e8>)
 80046fa:	f7fb fdb9 	bl	8000270 <memchr>
 80046fe:	9a04      	ldr	r2, [sp, #16]
 8004700:	b9d8      	cbnz	r0, 800473a <_svfiprintf_r+0xe6>
 8004702:	06d0      	lsls	r0, r2, #27
 8004704:	bf44      	itt	mi
 8004706:	2320      	movmi	r3, #32
 8004708:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800470c:	0711      	lsls	r1, r2, #28
 800470e:	bf44      	itt	mi
 8004710:	232b      	movmi	r3, #43	; 0x2b
 8004712:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004716:	f89a 3000 	ldrb.w	r3, [sl]
 800471a:	2b2a      	cmp	r3, #42	; 0x2a
 800471c:	d015      	beq.n	800474a <_svfiprintf_r+0xf6>
 800471e:	9a07      	ldr	r2, [sp, #28]
 8004720:	4654      	mov	r4, sl
 8004722:	2000      	movs	r0, #0
 8004724:	f04f 0c0a 	mov.w	ip, #10
 8004728:	4621      	mov	r1, r4
 800472a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800472e:	3b30      	subs	r3, #48	; 0x30
 8004730:	2b09      	cmp	r3, #9
 8004732:	d94d      	bls.n	80047d0 <_svfiprintf_r+0x17c>
 8004734:	b1b0      	cbz	r0, 8004764 <_svfiprintf_r+0x110>
 8004736:	9207      	str	r2, [sp, #28]
 8004738:	e014      	b.n	8004764 <_svfiprintf_r+0x110>
 800473a:	eba0 0308 	sub.w	r3, r0, r8
 800473e:	fa09 f303 	lsl.w	r3, r9, r3
 8004742:	4313      	orrs	r3, r2
 8004744:	9304      	str	r3, [sp, #16]
 8004746:	46a2      	mov	sl, r4
 8004748:	e7d2      	b.n	80046f0 <_svfiprintf_r+0x9c>
 800474a:	9b03      	ldr	r3, [sp, #12]
 800474c:	1d19      	adds	r1, r3, #4
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	9103      	str	r1, [sp, #12]
 8004752:	2b00      	cmp	r3, #0
 8004754:	bfbb      	ittet	lt
 8004756:	425b      	neglt	r3, r3
 8004758:	f042 0202 	orrlt.w	r2, r2, #2
 800475c:	9307      	strge	r3, [sp, #28]
 800475e:	9307      	strlt	r3, [sp, #28]
 8004760:	bfb8      	it	lt
 8004762:	9204      	strlt	r2, [sp, #16]
 8004764:	7823      	ldrb	r3, [r4, #0]
 8004766:	2b2e      	cmp	r3, #46	; 0x2e
 8004768:	d10c      	bne.n	8004784 <_svfiprintf_r+0x130>
 800476a:	7863      	ldrb	r3, [r4, #1]
 800476c:	2b2a      	cmp	r3, #42	; 0x2a
 800476e:	d134      	bne.n	80047da <_svfiprintf_r+0x186>
 8004770:	9b03      	ldr	r3, [sp, #12]
 8004772:	1d1a      	adds	r2, r3, #4
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	9203      	str	r2, [sp, #12]
 8004778:	2b00      	cmp	r3, #0
 800477a:	bfb8      	it	lt
 800477c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004780:	3402      	adds	r4, #2
 8004782:	9305      	str	r3, [sp, #20]
 8004784:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800484c <_svfiprintf_r+0x1f8>
 8004788:	7821      	ldrb	r1, [r4, #0]
 800478a:	2203      	movs	r2, #3
 800478c:	4650      	mov	r0, sl
 800478e:	f7fb fd6f 	bl	8000270 <memchr>
 8004792:	b138      	cbz	r0, 80047a4 <_svfiprintf_r+0x150>
 8004794:	9b04      	ldr	r3, [sp, #16]
 8004796:	eba0 000a 	sub.w	r0, r0, sl
 800479a:	2240      	movs	r2, #64	; 0x40
 800479c:	4082      	lsls	r2, r0
 800479e:	4313      	orrs	r3, r2
 80047a0:	3401      	adds	r4, #1
 80047a2:	9304      	str	r3, [sp, #16]
 80047a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047a8:	4825      	ldr	r0, [pc, #148]	; (8004840 <_svfiprintf_r+0x1ec>)
 80047aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80047ae:	2206      	movs	r2, #6
 80047b0:	f7fb fd5e 	bl	8000270 <memchr>
 80047b4:	2800      	cmp	r0, #0
 80047b6:	d038      	beq.n	800482a <_svfiprintf_r+0x1d6>
 80047b8:	4b22      	ldr	r3, [pc, #136]	; (8004844 <_svfiprintf_r+0x1f0>)
 80047ba:	bb1b      	cbnz	r3, 8004804 <_svfiprintf_r+0x1b0>
 80047bc:	9b03      	ldr	r3, [sp, #12]
 80047be:	3307      	adds	r3, #7
 80047c0:	f023 0307 	bic.w	r3, r3, #7
 80047c4:	3308      	adds	r3, #8
 80047c6:	9303      	str	r3, [sp, #12]
 80047c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047ca:	4433      	add	r3, r6
 80047cc:	9309      	str	r3, [sp, #36]	; 0x24
 80047ce:	e768      	b.n	80046a2 <_svfiprintf_r+0x4e>
 80047d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80047d4:	460c      	mov	r4, r1
 80047d6:	2001      	movs	r0, #1
 80047d8:	e7a6      	b.n	8004728 <_svfiprintf_r+0xd4>
 80047da:	2300      	movs	r3, #0
 80047dc:	3401      	adds	r4, #1
 80047de:	9305      	str	r3, [sp, #20]
 80047e0:	4619      	mov	r1, r3
 80047e2:	f04f 0c0a 	mov.w	ip, #10
 80047e6:	4620      	mov	r0, r4
 80047e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80047ec:	3a30      	subs	r2, #48	; 0x30
 80047ee:	2a09      	cmp	r2, #9
 80047f0:	d903      	bls.n	80047fa <_svfiprintf_r+0x1a6>
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d0c6      	beq.n	8004784 <_svfiprintf_r+0x130>
 80047f6:	9105      	str	r1, [sp, #20]
 80047f8:	e7c4      	b.n	8004784 <_svfiprintf_r+0x130>
 80047fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80047fe:	4604      	mov	r4, r0
 8004800:	2301      	movs	r3, #1
 8004802:	e7f0      	b.n	80047e6 <_svfiprintf_r+0x192>
 8004804:	ab03      	add	r3, sp, #12
 8004806:	9300      	str	r3, [sp, #0]
 8004808:	462a      	mov	r2, r5
 800480a:	4b0f      	ldr	r3, [pc, #60]	; (8004848 <_svfiprintf_r+0x1f4>)
 800480c:	a904      	add	r1, sp, #16
 800480e:	4638      	mov	r0, r7
 8004810:	f3af 8000 	nop.w
 8004814:	1c42      	adds	r2, r0, #1
 8004816:	4606      	mov	r6, r0
 8004818:	d1d6      	bne.n	80047c8 <_svfiprintf_r+0x174>
 800481a:	89ab      	ldrh	r3, [r5, #12]
 800481c:	065b      	lsls	r3, r3, #25
 800481e:	f53f af2d 	bmi.w	800467c <_svfiprintf_r+0x28>
 8004822:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004824:	b01d      	add	sp, #116	; 0x74
 8004826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800482a:	ab03      	add	r3, sp, #12
 800482c:	9300      	str	r3, [sp, #0]
 800482e:	462a      	mov	r2, r5
 8004830:	4b05      	ldr	r3, [pc, #20]	; (8004848 <_svfiprintf_r+0x1f4>)
 8004832:	a904      	add	r1, sp, #16
 8004834:	4638      	mov	r0, r7
 8004836:	f000 f879 	bl	800492c <_printf_i>
 800483a:	e7eb      	b.n	8004814 <_svfiprintf_r+0x1c0>
 800483c:	08006163 	.word	0x08006163
 8004840:	0800616d 	.word	0x0800616d
 8004844:	00000000 	.word	0x00000000
 8004848:	080045a1 	.word	0x080045a1
 800484c:	08006169 	.word	0x08006169

08004850 <_printf_common>:
 8004850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004854:	4616      	mov	r6, r2
 8004856:	4699      	mov	r9, r3
 8004858:	688a      	ldr	r2, [r1, #8]
 800485a:	690b      	ldr	r3, [r1, #16]
 800485c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004860:	4293      	cmp	r3, r2
 8004862:	bfb8      	it	lt
 8004864:	4613      	movlt	r3, r2
 8004866:	6033      	str	r3, [r6, #0]
 8004868:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800486c:	4607      	mov	r7, r0
 800486e:	460c      	mov	r4, r1
 8004870:	b10a      	cbz	r2, 8004876 <_printf_common+0x26>
 8004872:	3301      	adds	r3, #1
 8004874:	6033      	str	r3, [r6, #0]
 8004876:	6823      	ldr	r3, [r4, #0]
 8004878:	0699      	lsls	r1, r3, #26
 800487a:	bf42      	ittt	mi
 800487c:	6833      	ldrmi	r3, [r6, #0]
 800487e:	3302      	addmi	r3, #2
 8004880:	6033      	strmi	r3, [r6, #0]
 8004882:	6825      	ldr	r5, [r4, #0]
 8004884:	f015 0506 	ands.w	r5, r5, #6
 8004888:	d106      	bne.n	8004898 <_printf_common+0x48>
 800488a:	f104 0a19 	add.w	sl, r4, #25
 800488e:	68e3      	ldr	r3, [r4, #12]
 8004890:	6832      	ldr	r2, [r6, #0]
 8004892:	1a9b      	subs	r3, r3, r2
 8004894:	42ab      	cmp	r3, r5
 8004896:	dc26      	bgt.n	80048e6 <_printf_common+0x96>
 8004898:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800489c:	1e13      	subs	r3, r2, #0
 800489e:	6822      	ldr	r2, [r4, #0]
 80048a0:	bf18      	it	ne
 80048a2:	2301      	movne	r3, #1
 80048a4:	0692      	lsls	r2, r2, #26
 80048a6:	d42b      	bmi.n	8004900 <_printf_common+0xb0>
 80048a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048ac:	4649      	mov	r1, r9
 80048ae:	4638      	mov	r0, r7
 80048b0:	47c0      	blx	r8
 80048b2:	3001      	adds	r0, #1
 80048b4:	d01e      	beq.n	80048f4 <_printf_common+0xa4>
 80048b6:	6823      	ldr	r3, [r4, #0]
 80048b8:	6922      	ldr	r2, [r4, #16]
 80048ba:	f003 0306 	and.w	r3, r3, #6
 80048be:	2b04      	cmp	r3, #4
 80048c0:	bf02      	ittt	eq
 80048c2:	68e5      	ldreq	r5, [r4, #12]
 80048c4:	6833      	ldreq	r3, [r6, #0]
 80048c6:	1aed      	subeq	r5, r5, r3
 80048c8:	68a3      	ldr	r3, [r4, #8]
 80048ca:	bf0c      	ite	eq
 80048cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80048d0:	2500      	movne	r5, #0
 80048d2:	4293      	cmp	r3, r2
 80048d4:	bfc4      	itt	gt
 80048d6:	1a9b      	subgt	r3, r3, r2
 80048d8:	18ed      	addgt	r5, r5, r3
 80048da:	2600      	movs	r6, #0
 80048dc:	341a      	adds	r4, #26
 80048de:	42b5      	cmp	r5, r6
 80048e0:	d11a      	bne.n	8004918 <_printf_common+0xc8>
 80048e2:	2000      	movs	r0, #0
 80048e4:	e008      	b.n	80048f8 <_printf_common+0xa8>
 80048e6:	2301      	movs	r3, #1
 80048e8:	4652      	mov	r2, sl
 80048ea:	4649      	mov	r1, r9
 80048ec:	4638      	mov	r0, r7
 80048ee:	47c0      	blx	r8
 80048f0:	3001      	adds	r0, #1
 80048f2:	d103      	bne.n	80048fc <_printf_common+0xac>
 80048f4:	f04f 30ff 	mov.w	r0, #4294967295
 80048f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048fc:	3501      	adds	r5, #1
 80048fe:	e7c6      	b.n	800488e <_printf_common+0x3e>
 8004900:	18e1      	adds	r1, r4, r3
 8004902:	1c5a      	adds	r2, r3, #1
 8004904:	2030      	movs	r0, #48	; 0x30
 8004906:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800490a:	4422      	add	r2, r4
 800490c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004910:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004914:	3302      	adds	r3, #2
 8004916:	e7c7      	b.n	80048a8 <_printf_common+0x58>
 8004918:	2301      	movs	r3, #1
 800491a:	4622      	mov	r2, r4
 800491c:	4649      	mov	r1, r9
 800491e:	4638      	mov	r0, r7
 8004920:	47c0      	blx	r8
 8004922:	3001      	adds	r0, #1
 8004924:	d0e6      	beq.n	80048f4 <_printf_common+0xa4>
 8004926:	3601      	adds	r6, #1
 8004928:	e7d9      	b.n	80048de <_printf_common+0x8e>
	...

0800492c <_printf_i>:
 800492c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004930:	7e0f      	ldrb	r7, [r1, #24]
 8004932:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004934:	2f78      	cmp	r7, #120	; 0x78
 8004936:	4691      	mov	r9, r2
 8004938:	4680      	mov	r8, r0
 800493a:	460c      	mov	r4, r1
 800493c:	469a      	mov	sl, r3
 800493e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004942:	d807      	bhi.n	8004954 <_printf_i+0x28>
 8004944:	2f62      	cmp	r7, #98	; 0x62
 8004946:	d80a      	bhi.n	800495e <_printf_i+0x32>
 8004948:	2f00      	cmp	r7, #0
 800494a:	f000 80d4 	beq.w	8004af6 <_printf_i+0x1ca>
 800494e:	2f58      	cmp	r7, #88	; 0x58
 8004950:	f000 80c0 	beq.w	8004ad4 <_printf_i+0x1a8>
 8004954:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004958:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800495c:	e03a      	b.n	80049d4 <_printf_i+0xa8>
 800495e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004962:	2b15      	cmp	r3, #21
 8004964:	d8f6      	bhi.n	8004954 <_printf_i+0x28>
 8004966:	a101      	add	r1, pc, #4	; (adr r1, 800496c <_printf_i+0x40>)
 8004968:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800496c:	080049c5 	.word	0x080049c5
 8004970:	080049d9 	.word	0x080049d9
 8004974:	08004955 	.word	0x08004955
 8004978:	08004955 	.word	0x08004955
 800497c:	08004955 	.word	0x08004955
 8004980:	08004955 	.word	0x08004955
 8004984:	080049d9 	.word	0x080049d9
 8004988:	08004955 	.word	0x08004955
 800498c:	08004955 	.word	0x08004955
 8004990:	08004955 	.word	0x08004955
 8004994:	08004955 	.word	0x08004955
 8004998:	08004add 	.word	0x08004add
 800499c:	08004a05 	.word	0x08004a05
 80049a0:	08004a97 	.word	0x08004a97
 80049a4:	08004955 	.word	0x08004955
 80049a8:	08004955 	.word	0x08004955
 80049ac:	08004aff 	.word	0x08004aff
 80049b0:	08004955 	.word	0x08004955
 80049b4:	08004a05 	.word	0x08004a05
 80049b8:	08004955 	.word	0x08004955
 80049bc:	08004955 	.word	0x08004955
 80049c0:	08004a9f 	.word	0x08004a9f
 80049c4:	682b      	ldr	r3, [r5, #0]
 80049c6:	1d1a      	adds	r2, r3, #4
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	602a      	str	r2, [r5, #0]
 80049cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80049d4:	2301      	movs	r3, #1
 80049d6:	e09f      	b.n	8004b18 <_printf_i+0x1ec>
 80049d8:	6820      	ldr	r0, [r4, #0]
 80049da:	682b      	ldr	r3, [r5, #0]
 80049dc:	0607      	lsls	r7, r0, #24
 80049de:	f103 0104 	add.w	r1, r3, #4
 80049e2:	6029      	str	r1, [r5, #0]
 80049e4:	d501      	bpl.n	80049ea <_printf_i+0xbe>
 80049e6:	681e      	ldr	r6, [r3, #0]
 80049e8:	e003      	b.n	80049f2 <_printf_i+0xc6>
 80049ea:	0646      	lsls	r6, r0, #25
 80049ec:	d5fb      	bpl.n	80049e6 <_printf_i+0xba>
 80049ee:	f9b3 6000 	ldrsh.w	r6, [r3]
 80049f2:	2e00      	cmp	r6, #0
 80049f4:	da03      	bge.n	80049fe <_printf_i+0xd2>
 80049f6:	232d      	movs	r3, #45	; 0x2d
 80049f8:	4276      	negs	r6, r6
 80049fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049fe:	485a      	ldr	r0, [pc, #360]	; (8004b68 <_printf_i+0x23c>)
 8004a00:	230a      	movs	r3, #10
 8004a02:	e012      	b.n	8004a2a <_printf_i+0xfe>
 8004a04:	682b      	ldr	r3, [r5, #0]
 8004a06:	6820      	ldr	r0, [r4, #0]
 8004a08:	1d19      	adds	r1, r3, #4
 8004a0a:	6029      	str	r1, [r5, #0]
 8004a0c:	0605      	lsls	r5, r0, #24
 8004a0e:	d501      	bpl.n	8004a14 <_printf_i+0xe8>
 8004a10:	681e      	ldr	r6, [r3, #0]
 8004a12:	e002      	b.n	8004a1a <_printf_i+0xee>
 8004a14:	0641      	lsls	r1, r0, #25
 8004a16:	d5fb      	bpl.n	8004a10 <_printf_i+0xe4>
 8004a18:	881e      	ldrh	r6, [r3, #0]
 8004a1a:	4853      	ldr	r0, [pc, #332]	; (8004b68 <_printf_i+0x23c>)
 8004a1c:	2f6f      	cmp	r7, #111	; 0x6f
 8004a1e:	bf0c      	ite	eq
 8004a20:	2308      	moveq	r3, #8
 8004a22:	230a      	movne	r3, #10
 8004a24:	2100      	movs	r1, #0
 8004a26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a2a:	6865      	ldr	r5, [r4, #4]
 8004a2c:	60a5      	str	r5, [r4, #8]
 8004a2e:	2d00      	cmp	r5, #0
 8004a30:	bfa2      	ittt	ge
 8004a32:	6821      	ldrge	r1, [r4, #0]
 8004a34:	f021 0104 	bicge.w	r1, r1, #4
 8004a38:	6021      	strge	r1, [r4, #0]
 8004a3a:	b90e      	cbnz	r6, 8004a40 <_printf_i+0x114>
 8004a3c:	2d00      	cmp	r5, #0
 8004a3e:	d04b      	beq.n	8004ad8 <_printf_i+0x1ac>
 8004a40:	4615      	mov	r5, r2
 8004a42:	fbb6 f1f3 	udiv	r1, r6, r3
 8004a46:	fb03 6711 	mls	r7, r3, r1, r6
 8004a4a:	5dc7      	ldrb	r7, [r0, r7]
 8004a4c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004a50:	4637      	mov	r7, r6
 8004a52:	42bb      	cmp	r3, r7
 8004a54:	460e      	mov	r6, r1
 8004a56:	d9f4      	bls.n	8004a42 <_printf_i+0x116>
 8004a58:	2b08      	cmp	r3, #8
 8004a5a:	d10b      	bne.n	8004a74 <_printf_i+0x148>
 8004a5c:	6823      	ldr	r3, [r4, #0]
 8004a5e:	07de      	lsls	r6, r3, #31
 8004a60:	d508      	bpl.n	8004a74 <_printf_i+0x148>
 8004a62:	6923      	ldr	r3, [r4, #16]
 8004a64:	6861      	ldr	r1, [r4, #4]
 8004a66:	4299      	cmp	r1, r3
 8004a68:	bfde      	ittt	le
 8004a6a:	2330      	movle	r3, #48	; 0x30
 8004a6c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004a70:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004a74:	1b52      	subs	r2, r2, r5
 8004a76:	6122      	str	r2, [r4, #16]
 8004a78:	f8cd a000 	str.w	sl, [sp]
 8004a7c:	464b      	mov	r3, r9
 8004a7e:	aa03      	add	r2, sp, #12
 8004a80:	4621      	mov	r1, r4
 8004a82:	4640      	mov	r0, r8
 8004a84:	f7ff fee4 	bl	8004850 <_printf_common>
 8004a88:	3001      	adds	r0, #1
 8004a8a:	d14a      	bne.n	8004b22 <_printf_i+0x1f6>
 8004a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a90:	b004      	add	sp, #16
 8004a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a96:	6823      	ldr	r3, [r4, #0]
 8004a98:	f043 0320 	orr.w	r3, r3, #32
 8004a9c:	6023      	str	r3, [r4, #0]
 8004a9e:	4833      	ldr	r0, [pc, #204]	; (8004b6c <_printf_i+0x240>)
 8004aa0:	2778      	movs	r7, #120	; 0x78
 8004aa2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004aa6:	6823      	ldr	r3, [r4, #0]
 8004aa8:	6829      	ldr	r1, [r5, #0]
 8004aaa:	061f      	lsls	r7, r3, #24
 8004aac:	f851 6b04 	ldr.w	r6, [r1], #4
 8004ab0:	d402      	bmi.n	8004ab8 <_printf_i+0x18c>
 8004ab2:	065f      	lsls	r7, r3, #25
 8004ab4:	bf48      	it	mi
 8004ab6:	b2b6      	uxthmi	r6, r6
 8004ab8:	07df      	lsls	r7, r3, #31
 8004aba:	bf48      	it	mi
 8004abc:	f043 0320 	orrmi.w	r3, r3, #32
 8004ac0:	6029      	str	r1, [r5, #0]
 8004ac2:	bf48      	it	mi
 8004ac4:	6023      	strmi	r3, [r4, #0]
 8004ac6:	b91e      	cbnz	r6, 8004ad0 <_printf_i+0x1a4>
 8004ac8:	6823      	ldr	r3, [r4, #0]
 8004aca:	f023 0320 	bic.w	r3, r3, #32
 8004ace:	6023      	str	r3, [r4, #0]
 8004ad0:	2310      	movs	r3, #16
 8004ad2:	e7a7      	b.n	8004a24 <_printf_i+0xf8>
 8004ad4:	4824      	ldr	r0, [pc, #144]	; (8004b68 <_printf_i+0x23c>)
 8004ad6:	e7e4      	b.n	8004aa2 <_printf_i+0x176>
 8004ad8:	4615      	mov	r5, r2
 8004ada:	e7bd      	b.n	8004a58 <_printf_i+0x12c>
 8004adc:	682b      	ldr	r3, [r5, #0]
 8004ade:	6826      	ldr	r6, [r4, #0]
 8004ae0:	6961      	ldr	r1, [r4, #20]
 8004ae2:	1d18      	adds	r0, r3, #4
 8004ae4:	6028      	str	r0, [r5, #0]
 8004ae6:	0635      	lsls	r5, r6, #24
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	d501      	bpl.n	8004af0 <_printf_i+0x1c4>
 8004aec:	6019      	str	r1, [r3, #0]
 8004aee:	e002      	b.n	8004af6 <_printf_i+0x1ca>
 8004af0:	0670      	lsls	r0, r6, #25
 8004af2:	d5fb      	bpl.n	8004aec <_printf_i+0x1c0>
 8004af4:	8019      	strh	r1, [r3, #0]
 8004af6:	2300      	movs	r3, #0
 8004af8:	6123      	str	r3, [r4, #16]
 8004afa:	4615      	mov	r5, r2
 8004afc:	e7bc      	b.n	8004a78 <_printf_i+0x14c>
 8004afe:	682b      	ldr	r3, [r5, #0]
 8004b00:	1d1a      	adds	r2, r3, #4
 8004b02:	602a      	str	r2, [r5, #0]
 8004b04:	681d      	ldr	r5, [r3, #0]
 8004b06:	6862      	ldr	r2, [r4, #4]
 8004b08:	2100      	movs	r1, #0
 8004b0a:	4628      	mov	r0, r5
 8004b0c:	f7fb fbb0 	bl	8000270 <memchr>
 8004b10:	b108      	cbz	r0, 8004b16 <_printf_i+0x1ea>
 8004b12:	1b40      	subs	r0, r0, r5
 8004b14:	6060      	str	r0, [r4, #4]
 8004b16:	6863      	ldr	r3, [r4, #4]
 8004b18:	6123      	str	r3, [r4, #16]
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b20:	e7aa      	b.n	8004a78 <_printf_i+0x14c>
 8004b22:	6923      	ldr	r3, [r4, #16]
 8004b24:	462a      	mov	r2, r5
 8004b26:	4649      	mov	r1, r9
 8004b28:	4640      	mov	r0, r8
 8004b2a:	47d0      	blx	sl
 8004b2c:	3001      	adds	r0, #1
 8004b2e:	d0ad      	beq.n	8004a8c <_printf_i+0x160>
 8004b30:	6823      	ldr	r3, [r4, #0]
 8004b32:	079b      	lsls	r3, r3, #30
 8004b34:	d413      	bmi.n	8004b5e <_printf_i+0x232>
 8004b36:	68e0      	ldr	r0, [r4, #12]
 8004b38:	9b03      	ldr	r3, [sp, #12]
 8004b3a:	4298      	cmp	r0, r3
 8004b3c:	bfb8      	it	lt
 8004b3e:	4618      	movlt	r0, r3
 8004b40:	e7a6      	b.n	8004a90 <_printf_i+0x164>
 8004b42:	2301      	movs	r3, #1
 8004b44:	4632      	mov	r2, r6
 8004b46:	4649      	mov	r1, r9
 8004b48:	4640      	mov	r0, r8
 8004b4a:	47d0      	blx	sl
 8004b4c:	3001      	adds	r0, #1
 8004b4e:	d09d      	beq.n	8004a8c <_printf_i+0x160>
 8004b50:	3501      	adds	r5, #1
 8004b52:	68e3      	ldr	r3, [r4, #12]
 8004b54:	9903      	ldr	r1, [sp, #12]
 8004b56:	1a5b      	subs	r3, r3, r1
 8004b58:	42ab      	cmp	r3, r5
 8004b5a:	dcf2      	bgt.n	8004b42 <_printf_i+0x216>
 8004b5c:	e7eb      	b.n	8004b36 <_printf_i+0x20a>
 8004b5e:	2500      	movs	r5, #0
 8004b60:	f104 0619 	add.w	r6, r4, #25
 8004b64:	e7f5      	b.n	8004b52 <_printf_i+0x226>
 8004b66:	bf00      	nop
 8004b68:	08006174 	.word	0x08006174
 8004b6c:	08006185 	.word	0x08006185

08004b70 <__sflush_r>:
 8004b70:	898a      	ldrh	r2, [r1, #12]
 8004b72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b76:	4605      	mov	r5, r0
 8004b78:	0710      	lsls	r0, r2, #28
 8004b7a:	460c      	mov	r4, r1
 8004b7c:	d458      	bmi.n	8004c30 <__sflush_r+0xc0>
 8004b7e:	684b      	ldr	r3, [r1, #4]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	dc05      	bgt.n	8004b90 <__sflush_r+0x20>
 8004b84:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	dc02      	bgt.n	8004b90 <__sflush_r+0x20>
 8004b8a:	2000      	movs	r0, #0
 8004b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b92:	2e00      	cmp	r6, #0
 8004b94:	d0f9      	beq.n	8004b8a <__sflush_r+0x1a>
 8004b96:	2300      	movs	r3, #0
 8004b98:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004b9c:	682f      	ldr	r7, [r5, #0]
 8004b9e:	6a21      	ldr	r1, [r4, #32]
 8004ba0:	602b      	str	r3, [r5, #0]
 8004ba2:	d032      	beq.n	8004c0a <__sflush_r+0x9a>
 8004ba4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004ba6:	89a3      	ldrh	r3, [r4, #12]
 8004ba8:	075a      	lsls	r2, r3, #29
 8004baa:	d505      	bpl.n	8004bb8 <__sflush_r+0x48>
 8004bac:	6863      	ldr	r3, [r4, #4]
 8004bae:	1ac0      	subs	r0, r0, r3
 8004bb0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004bb2:	b10b      	cbz	r3, 8004bb8 <__sflush_r+0x48>
 8004bb4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004bb6:	1ac0      	subs	r0, r0, r3
 8004bb8:	2300      	movs	r3, #0
 8004bba:	4602      	mov	r2, r0
 8004bbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004bbe:	6a21      	ldr	r1, [r4, #32]
 8004bc0:	4628      	mov	r0, r5
 8004bc2:	47b0      	blx	r6
 8004bc4:	1c43      	adds	r3, r0, #1
 8004bc6:	89a3      	ldrh	r3, [r4, #12]
 8004bc8:	d106      	bne.n	8004bd8 <__sflush_r+0x68>
 8004bca:	6829      	ldr	r1, [r5, #0]
 8004bcc:	291d      	cmp	r1, #29
 8004bce:	d82b      	bhi.n	8004c28 <__sflush_r+0xb8>
 8004bd0:	4a29      	ldr	r2, [pc, #164]	; (8004c78 <__sflush_r+0x108>)
 8004bd2:	410a      	asrs	r2, r1
 8004bd4:	07d6      	lsls	r6, r2, #31
 8004bd6:	d427      	bmi.n	8004c28 <__sflush_r+0xb8>
 8004bd8:	2200      	movs	r2, #0
 8004bda:	6062      	str	r2, [r4, #4]
 8004bdc:	04d9      	lsls	r1, r3, #19
 8004bde:	6922      	ldr	r2, [r4, #16]
 8004be0:	6022      	str	r2, [r4, #0]
 8004be2:	d504      	bpl.n	8004bee <__sflush_r+0x7e>
 8004be4:	1c42      	adds	r2, r0, #1
 8004be6:	d101      	bne.n	8004bec <__sflush_r+0x7c>
 8004be8:	682b      	ldr	r3, [r5, #0]
 8004bea:	b903      	cbnz	r3, 8004bee <__sflush_r+0x7e>
 8004bec:	6560      	str	r0, [r4, #84]	; 0x54
 8004bee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004bf0:	602f      	str	r7, [r5, #0]
 8004bf2:	2900      	cmp	r1, #0
 8004bf4:	d0c9      	beq.n	8004b8a <__sflush_r+0x1a>
 8004bf6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004bfa:	4299      	cmp	r1, r3
 8004bfc:	d002      	beq.n	8004c04 <__sflush_r+0x94>
 8004bfe:	4628      	mov	r0, r5
 8004c00:	f7ff fb04 	bl	800420c <_free_r>
 8004c04:	2000      	movs	r0, #0
 8004c06:	6360      	str	r0, [r4, #52]	; 0x34
 8004c08:	e7c0      	b.n	8004b8c <__sflush_r+0x1c>
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	4628      	mov	r0, r5
 8004c0e:	47b0      	blx	r6
 8004c10:	1c41      	adds	r1, r0, #1
 8004c12:	d1c8      	bne.n	8004ba6 <__sflush_r+0x36>
 8004c14:	682b      	ldr	r3, [r5, #0]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d0c5      	beq.n	8004ba6 <__sflush_r+0x36>
 8004c1a:	2b1d      	cmp	r3, #29
 8004c1c:	d001      	beq.n	8004c22 <__sflush_r+0xb2>
 8004c1e:	2b16      	cmp	r3, #22
 8004c20:	d101      	bne.n	8004c26 <__sflush_r+0xb6>
 8004c22:	602f      	str	r7, [r5, #0]
 8004c24:	e7b1      	b.n	8004b8a <__sflush_r+0x1a>
 8004c26:	89a3      	ldrh	r3, [r4, #12]
 8004c28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c2c:	81a3      	strh	r3, [r4, #12]
 8004c2e:	e7ad      	b.n	8004b8c <__sflush_r+0x1c>
 8004c30:	690f      	ldr	r7, [r1, #16]
 8004c32:	2f00      	cmp	r7, #0
 8004c34:	d0a9      	beq.n	8004b8a <__sflush_r+0x1a>
 8004c36:	0793      	lsls	r3, r2, #30
 8004c38:	680e      	ldr	r6, [r1, #0]
 8004c3a:	bf08      	it	eq
 8004c3c:	694b      	ldreq	r3, [r1, #20]
 8004c3e:	600f      	str	r7, [r1, #0]
 8004c40:	bf18      	it	ne
 8004c42:	2300      	movne	r3, #0
 8004c44:	eba6 0807 	sub.w	r8, r6, r7
 8004c48:	608b      	str	r3, [r1, #8]
 8004c4a:	f1b8 0f00 	cmp.w	r8, #0
 8004c4e:	dd9c      	ble.n	8004b8a <__sflush_r+0x1a>
 8004c50:	6a21      	ldr	r1, [r4, #32]
 8004c52:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004c54:	4643      	mov	r3, r8
 8004c56:	463a      	mov	r2, r7
 8004c58:	4628      	mov	r0, r5
 8004c5a:	47b0      	blx	r6
 8004c5c:	2800      	cmp	r0, #0
 8004c5e:	dc06      	bgt.n	8004c6e <__sflush_r+0xfe>
 8004c60:	89a3      	ldrh	r3, [r4, #12]
 8004c62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c66:	81a3      	strh	r3, [r4, #12]
 8004c68:	f04f 30ff 	mov.w	r0, #4294967295
 8004c6c:	e78e      	b.n	8004b8c <__sflush_r+0x1c>
 8004c6e:	4407      	add	r7, r0
 8004c70:	eba8 0800 	sub.w	r8, r8, r0
 8004c74:	e7e9      	b.n	8004c4a <__sflush_r+0xda>
 8004c76:	bf00      	nop
 8004c78:	dfbffffe 	.word	0xdfbffffe

08004c7c <_fflush_r>:
 8004c7c:	b538      	push	{r3, r4, r5, lr}
 8004c7e:	690b      	ldr	r3, [r1, #16]
 8004c80:	4605      	mov	r5, r0
 8004c82:	460c      	mov	r4, r1
 8004c84:	b913      	cbnz	r3, 8004c8c <_fflush_r+0x10>
 8004c86:	2500      	movs	r5, #0
 8004c88:	4628      	mov	r0, r5
 8004c8a:	bd38      	pop	{r3, r4, r5, pc}
 8004c8c:	b118      	cbz	r0, 8004c96 <_fflush_r+0x1a>
 8004c8e:	6a03      	ldr	r3, [r0, #32]
 8004c90:	b90b      	cbnz	r3, 8004c96 <_fflush_r+0x1a>
 8004c92:	f7fe fd91 	bl	80037b8 <__sinit>
 8004c96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d0f3      	beq.n	8004c86 <_fflush_r+0xa>
 8004c9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004ca0:	07d0      	lsls	r0, r2, #31
 8004ca2:	d404      	bmi.n	8004cae <_fflush_r+0x32>
 8004ca4:	0599      	lsls	r1, r3, #22
 8004ca6:	d402      	bmi.n	8004cae <_fflush_r+0x32>
 8004ca8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004caa:	f7ff fa86 	bl	80041ba <__retarget_lock_acquire_recursive>
 8004cae:	4628      	mov	r0, r5
 8004cb0:	4621      	mov	r1, r4
 8004cb2:	f7ff ff5d 	bl	8004b70 <__sflush_r>
 8004cb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004cb8:	07da      	lsls	r2, r3, #31
 8004cba:	4605      	mov	r5, r0
 8004cbc:	d4e4      	bmi.n	8004c88 <_fflush_r+0xc>
 8004cbe:	89a3      	ldrh	r3, [r4, #12]
 8004cc0:	059b      	lsls	r3, r3, #22
 8004cc2:	d4e1      	bmi.n	8004c88 <_fflush_r+0xc>
 8004cc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004cc6:	f7ff fa7a 	bl	80041be <__retarget_lock_release_recursive>
 8004cca:	e7dd      	b.n	8004c88 <_fflush_r+0xc>

08004ccc <fiprintf>:
 8004ccc:	b40e      	push	{r1, r2, r3}
 8004cce:	b503      	push	{r0, r1, lr}
 8004cd0:	4601      	mov	r1, r0
 8004cd2:	ab03      	add	r3, sp, #12
 8004cd4:	4805      	ldr	r0, [pc, #20]	; (8004cec <fiprintf+0x20>)
 8004cd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8004cda:	6800      	ldr	r0, [r0, #0]
 8004cdc:	9301      	str	r3, [sp, #4]
 8004cde:	f000 fb67 	bl	80053b0 <_vfiprintf_r>
 8004ce2:	b002      	add	sp, #8
 8004ce4:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ce8:	b003      	add	sp, #12
 8004cea:	4770      	bx	lr
 8004cec:	20000070 	.word	0x20000070

08004cf0 <siscanf>:
 8004cf0:	b40e      	push	{r1, r2, r3}
 8004cf2:	b510      	push	{r4, lr}
 8004cf4:	b09f      	sub	sp, #124	; 0x7c
 8004cf6:	ac21      	add	r4, sp, #132	; 0x84
 8004cf8:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004cfc:	f854 2b04 	ldr.w	r2, [r4], #4
 8004d00:	9201      	str	r2, [sp, #4]
 8004d02:	f8ad 101c 	strh.w	r1, [sp, #28]
 8004d06:	9004      	str	r0, [sp, #16]
 8004d08:	9008      	str	r0, [sp, #32]
 8004d0a:	f7fb faa3 	bl	8000254 <strlen>
 8004d0e:	4b0c      	ldr	r3, [pc, #48]	; (8004d40 <siscanf+0x50>)
 8004d10:	9005      	str	r0, [sp, #20]
 8004d12:	9009      	str	r0, [sp, #36]	; 0x24
 8004d14:	930d      	str	r3, [sp, #52]	; 0x34
 8004d16:	480b      	ldr	r0, [pc, #44]	; (8004d44 <siscanf+0x54>)
 8004d18:	9a01      	ldr	r2, [sp, #4]
 8004d1a:	6800      	ldr	r0, [r0, #0]
 8004d1c:	9403      	str	r4, [sp, #12]
 8004d1e:	2300      	movs	r3, #0
 8004d20:	9311      	str	r3, [sp, #68]	; 0x44
 8004d22:	9316      	str	r3, [sp, #88]	; 0x58
 8004d24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004d28:	f8ad 301e 	strh.w	r3, [sp, #30]
 8004d2c:	a904      	add	r1, sp, #16
 8004d2e:	4623      	mov	r3, r4
 8004d30:	f000 f99c 	bl	800506c <__ssvfiscanf_r>
 8004d34:	b01f      	add	sp, #124	; 0x7c
 8004d36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d3a:	b003      	add	sp, #12
 8004d3c:	4770      	bx	lr
 8004d3e:	bf00      	nop
 8004d40:	08003887 	.word	0x08003887
 8004d44:	20000070 	.word	0x20000070

08004d48 <memmove>:
 8004d48:	4288      	cmp	r0, r1
 8004d4a:	b510      	push	{r4, lr}
 8004d4c:	eb01 0402 	add.w	r4, r1, r2
 8004d50:	d902      	bls.n	8004d58 <memmove+0x10>
 8004d52:	4284      	cmp	r4, r0
 8004d54:	4623      	mov	r3, r4
 8004d56:	d807      	bhi.n	8004d68 <memmove+0x20>
 8004d58:	1e43      	subs	r3, r0, #1
 8004d5a:	42a1      	cmp	r1, r4
 8004d5c:	d008      	beq.n	8004d70 <memmove+0x28>
 8004d5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004d62:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004d66:	e7f8      	b.n	8004d5a <memmove+0x12>
 8004d68:	4402      	add	r2, r0
 8004d6a:	4601      	mov	r1, r0
 8004d6c:	428a      	cmp	r2, r1
 8004d6e:	d100      	bne.n	8004d72 <memmove+0x2a>
 8004d70:	bd10      	pop	{r4, pc}
 8004d72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004d76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004d7a:	e7f7      	b.n	8004d6c <memmove+0x24>

08004d7c <strncmp>:
 8004d7c:	b510      	push	{r4, lr}
 8004d7e:	b16a      	cbz	r2, 8004d9c <strncmp+0x20>
 8004d80:	3901      	subs	r1, #1
 8004d82:	1884      	adds	r4, r0, r2
 8004d84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d88:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d103      	bne.n	8004d98 <strncmp+0x1c>
 8004d90:	42a0      	cmp	r0, r4
 8004d92:	d001      	beq.n	8004d98 <strncmp+0x1c>
 8004d94:	2a00      	cmp	r2, #0
 8004d96:	d1f5      	bne.n	8004d84 <strncmp+0x8>
 8004d98:	1ad0      	subs	r0, r2, r3
 8004d9a:	bd10      	pop	{r4, pc}
 8004d9c:	4610      	mov	r0, r2
 8004d9e:	e7fc      	b.n	8004d9a <strncmp+0x1e>

08004da0 <__gettzinfo>:
 8004da0:	4800      	ldr	r0, [pc, #0]	; (8004da4 <__gettzinfo+0x4>)
 8004da2:	4770      	bx	lr
 8004da4:	20000078 	.word	0x20000078

08004da8 <gmtime_r>:
 8004da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dac:	4a4d      	ldr	r2, [pc, #308]	; (8004ee4 <gmtime_r+0x13c>)
 8004dae:	460c      	mov	r4, r1
 8004db0:	2300      	movs	r3, #0
 8004db2:	e9d0 0100 	ldrd	r0, r1, [r0]
 8004db6:	f7fb faab 	bl	8000310 <__aeabi_ldivmod>
 8004dba:	2a00      	cmp	r2, #0
 8004dbc:	bfbc      	itt	lt
 8004dbe:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8004dc2:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8004dc6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004dca:	f500 202f 	add.w	r0, r0, #716800	; 0xaf000
 8004dce:	fbb2 f3f1 	udiv	r3, r2, r1
 8004dd2:	fb01 2213 	mls	r2, r1, r3, r2
 8004dd6:	f04f 013c 	mov.w	r1, #60	; 0x3c
 8004dda:	bfac      	ite	ge
 8004ddc:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 8004de0:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 8004de4:	60a3      	str	r3, [r4, #8]
 8004de6:	fbb2 f3f1 	udiv	r3, r2, r1
 8004dea:	fb01 2213 	mls	r2, r1, r3, r2
 8004dee:	6063      	str	r3, [r4, #4]
 8004df0:	6022      	str	r2, [r4, #0]
 8004df2:	1cc3      	adds	r3, r0, #3
 8004df4:	2207      	movs	r2, #7
 8004df6:	fb93 f2f2 	sdiv	r2, r3, r2
 8004dfa:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8004dfe:	1a9b      	subs	r3, r3, r2
 8004e00:	bf48      	it	mi
 8004e02:	3307      	addmi	r3, #7
 8004e04:	2800      	cmp	r0, #0
 8004e06:	61a3      	str	r3, [r4, #24]
 8004e08:	bfb8      	it	lt
 8004e0a:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 8004e0e:	4936      	ldr	r1, [pc, #216]	; (8004ee8 <gmtime_r+0x140>)
 8004e10:	bfae      	itee	ge
 8004e12:	fb90 f1f1 	sdivge	r1, r0, r1
 8004e16:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 8004e1a:	fb93 f1f1 	sdivlt	r1, r3, r1
 8004e1e:	4b33      	ldr	r3, [pc, #204]	; (8004eec <gmtime_r+0x144>)
 8004e20:	fb03 0001 	mla	r0, r3, r1, r0
 8004e24:	f648 63ac 	movw	r3, #36524	; 0x8eac
 8004e28:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e2c:	4403      	add	r3, r0
 8004e2e:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 8004e32:	fbb0 f2fc 	udiv	r2, r0, ip
 8004e36:	1a9b      	subs	r3, r3, r2
 8004e38:	f240 176d 	movw	r7, #365	; 0x16d
 8004e3c:	4a2c      	ldr	r2, [pc, #176]	; (8004ef0 <gmtime_r+0x148>)
 8004e3e:	fbb0 f2f2 	udiv	r2, r0, r2
 8004e42:	2664      	movs	r6, #100	; 0x64
 8004e44:	1a9b      	subs	r3, r3, r2
 8004e46:	fbb3 f2f7 	udiv	r2, r3, r7
 8004e4a:	fbb3 f3fc 	udiv	r3, r3, ip
 8004e4e:	fbb2 f5f6 	udiv	r5, r2, r6
 8004e52:	1aeb      	subs	r3, r5, r3
 8004e54:	4403      	add	r3, r0
 8004e56:	fb07 3312 	mls	r3, r7, r2, r3
 8004e5a:	2099      	movs	r0, #153	; 0x99
 8004e5c:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 8004e60:	3702      	adds	r7, #2
 8004e62:	f103 0e01 	add.w	lr, r3, #1
 8004e66:	fbb7 fcf0 	udiv	ip, r7, r0
 8004e6a:	fb00 f00c 	mul.w	r0, r0, ip
 8004e6e:	3002      	adds	r0, #2
 8004e70:	f04f 0805 	mov.w	r8, #5
 8004e74:	fbb0 f0f8 	udiv	r0, r0, r8
 8004e78:	ebae 0000 	sub.w	r0, lr, r0
 8004e7c:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 8004e80:	4577      	cmp	r7, lr
 8004e82:	bf94      	ite	ls
 8004e84:	2702      	movls	r7, #2
 8004e86:	f06f 0709 	mvnhi.w	r7, #9
 8004e8a:	4467      	add	r7, ip
 8004e8c:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 8004e90:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e94:	2f01      	cmp	r7, #1
 8004e96:	bf98      	it	ls
 8004e98:	3101      	addls	r1, #1
 8004e9a:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8004e9e:	d30c      	bcc.n	8004eba <gmtime_r+0x112>
 8004ea0:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8004ea4:	61e3      	str	r3, [r4, #28]
 8004ea6:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 8004eaa:	2300      	movs	r3, #0
 8004eac:	60e0      	str	r0, [r4, #12]
 8004eae:	e9c4 7104 	strd	r7, r1, [r4, #16]
 8004eb2:	6223      	str	r3, [r4, #32]
 8004eb4:	4620      	mov	r0, r4
 8004eb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004eba:	f012 0f03 	tst.w	r2, #3
 8004ebe:	d102      	bne.n	8004ec6 <gmtime_r+0x11e>
 8004ec0:	fb06 2515 	mls	r5, r6, r5, r2
 8004ec4:	b95d      	cbnz	r5, 8004ede <gmtime_r+0x136>
 8004ec6:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8004eca:	fbb2 f6f5 	udiv	r6, r2, r5
 8004ece:	fb05 2216 	mls	r2, r5, r6, r2
 8004ed2:	fab2 f282 	clz	r2, r2
 8004ed6:	0952      	lsrs	r2, r2, #5
 8004ed8:	333b      	adds	r3, #59	; 0x3b
 8004eda:	4413      	add	r3, r2
 8004edc:	e7e2      	b.n	8004ea4 <gmtime_r+0xfc>
 8004ede:	2201      	movs	r2, #1
 8004ee0:	e7fa      	b.n	8004ed8 <gmtime_r+0x130>
 8004ee2:	bf00      	nop
 8004ee4:	00015180 	.word	0x00015180
 8004ee8:	00023ab1 	.word	0x00023ab1
 8004eec:	fffdc54f 	.word	0xfffdc54f
 8004ef0:	00023ab0 	.word	0x00023ab0

08004ef4 <_sbrk_r>:
 8004ef4:	b538      	push	{r3, r4, r5, lr}
 8004ef6:	4d06      	ldr	r5, [pc, #24]	; (8004f10 <_sbrk_r+0x1c>)
 8004ef8:	2300      	movs	r3, #0
 8004efa:	4604      	mov	r4, r0
 8004efc:	4608      	mov	r0, r1
 8004efe:	602b      	str	r3, [r5, #0]
 8004f00:	f7fc f97a 	bl	80011f8 <_sbrk>
 8004f04:	1c43      	adds	r3, r0, #1
 8004f06:	d102      	bne.n	8004f0e <_sbrk_r+0x1a>
 8004f08:	682b      	ldr	r3, [r5, #0]
 8004f0a:	b103      	cbz	r3, 8004f0e <_sbrk_r+0x1a>
 8004f0c:	6023      	str	r3, [r4, #0]
 8004f0e:	bd38      	pop	{r3, r4, r5, pc}
 8004f10:	200002e0 	.word	0x200002e0

08004f14 <memcpy>:
 8004f14:	440a      	add	r2, r1
 8004f16:	4291      	cmp	r1, r2
 8004f18:	f100 33ff 	add.w	r3, r0, #4294967295
 8004f1c:	d100      	bne.n	8004f20 <memcpy+0xc>
 8004f1e:	4770      	bx	lr
 8004f20:	b510      	push	{r4, lr}
 8004f22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f2a:	4291      	cmp	r1, r2
 8004f2c:	d1f9      	bne.n	8004f22 <memcpy+0xe>
 8004f2e:	bd10      	pop	{r4, pc}

08004f30 <abort>:
 8004f30:	b508      	push	{r3, lr}
 8004f32:	2006      	movs	r0, #6
 8004f34:	f000 fdd4 	bl	8005ae0 <raise>
 8004f38:	2001      	movs	r0, #1
 8004f3a:	f7fc f8e5 	bl	8001108 <_exit>
	...

08004f40 <__env_lock>:
 8004f40:	4801      	ldr	r0, [pc, #4]	; (8004f48 <__env_lock+0x8>)
 8004f42:	f7ff b93a 	b.w	80041ba <__retarget_lock_acquire_recursive>
 8004f46:	bf00      	nop
 8004f48:	200002e4 	.word	0x200002e4

08004f4c <__env_unlock>:
 8004f4c:	4801      	ldr	r0, [pc, #4]	; (8004f54 <__env_unlock+0x8>)
 8004f4e:	f7ff b936 	b.w	80041be <__retarget_lock_release_recursive>
 8004f52:	bf00      	nop
 8004f54:	200002e4 	.word	0x200002e4

08004f58 <_realloc_r>:
 8004f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f5c:	4680      	mov	r8, r0
 8004f5e:	4614      	mov	r4, r2
 8004f60:	460e      	mov	r6, r1
 8004f62:	b921      	cbnz	r1, 8004f6e <_realloc_r+0x16>
 8004f64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f68:	4611      	mov	r1, r2
 8004f6a:	f7ff ba0f 	b.w	800438c <_malloc_r>
 8004f6e:	b92a      	cbnz	r2, 8004f7c <_realloc_r+0x24>
 8004f70:	f7ff f94c 	bl	800420c <_free_r>
 8004f74:	4625      	mov	r5, r4
 8004f76:	4628      	mov	r0, r5
 8004f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f7c:	f000 fdcc 	bl	8005b18 <_malloc_usable_size_r>
 8004f80:	4284      	cmp	r4, r0
 8004f82:	4607      	mov	r7, r0
 8004f84:	d802      	bhi.n	8004f8c <_realloc_r+0x34>
 8004f86:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004f8a:	d812      	bhi.n	8004fb2 <_realloc_r+0x5a>
 8004f8c:	4621      	mov	r1, r4
 8004f8e:	4640      	mov	r0, r8
 8004f90:	f7ff f9fc 	bl	800438c <_malloc_r>
 8004f94:	4605      	mov	r5, r0
 8004f96:	2800      	cmp	r0, #0
 8004f98:	d0ed      	beq.n	8004f76 <_realloc_r+0x1e>
 8004f9a:	42bc      	cmp	r4, r7
 8004f9c:	4622      	mov	r2, r4
 8004f9e:	4631      	mov	r1, r6
 8004fa0:	bf28      	it	cs
 8004fa2:	463a      	movcs	r2, r7
 8004fa4:	f7ff ffb6 	bl	8004f14 <memcpy>
 8004fa8:	4631      	mov	r1, r6
 8004faa:	4640      	mov	r0, r8
 8004fac:	f7ff f92e 	bl	800420c <_free_r>
 8004fb0:	e7e1      	b.n	8004f76 <_realloc_r+0x1e>
 8004fb2:	4635      	mov	r5, r6
 8004fb4:	e7df      	b.n	8004f76 <_realloc_r+0x1e>

08004fb6 <_sungetc_r>:
 8004fb6:	b538      	push	{r3, r4, r5, lr}
 8004fb8:	1c4b      	adds	r3, r1, #1
 8004fba:	4614      	mov	r4, r2
 8004fbc:	d103      	bne.n	8004fc6 <_sungetc_r+0x10>
 8004fbe:	f04f 35ff 	mov.w	r5, #4294967295
 8004fc2:	4628      	mov	r0, r5
 8004fc4:	bd38      	pop	{r3, r4, r5, pc}
 8004fc6:	8993      	ldrh	r3, [r2, #12]
 8004fc8:	f023 0320 	bic.w	r3, r3, #32
 8004fcc:	8193      	strh	r3, [r2, #12]
 8004fce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004fd0:	6852      	ldr	r2, [r2, #4]
 8004fd2:	b2cd      	uxtb	r5, r1
 8004fd4:	b18b      	cbz	r3, 8004ffa <_sungetc_r+0x44>
 8004fd6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	dd08      	ble.n	8004fee <_sungetc_r+0x38>
 8004fdc:	6823      	ldr	r3, [r4, #0]
 8004fde:	1e5a      	subs	r2, r3, #1
 8004fe0:	6022      	str	r2, [r4, #0]
 8004fe2:	f803 5c01 	strb.w	r5, [r3, #-1]
 8004fe6:	6863      	ldr	r3, [r4, #4]
 8004fe8:	3301      	adds	r3, #1
 8004fea:	6063      	str	r3, [r4, #4]
 8004fec:	e7e9      	b.n	8004fc2 <_sungetc_r+0xc>
 8004fee:	4621      	mov	r1, r4
 8004ff0:	f000 fc7f 	bl	80058f2 <__submore>
 8004ff4:	2800      	cmp	r0, #0
 8004ff6:	d0f1      	beq.n	8004fdc <_sungetc_r+0x26>
 8004ff8:	e7e1      	b.n	8004fbe <_sungetc_r+0x8>
 8004ffa:	6921      	ldr	r1, [r4, #16]
 8004ffc:	6823      	ldr	r3, [r4, #0]
 8004ffe:	b151      	cbz	r1, 8005016 <_sungetc_r+0x60>
 8005000:	4299      	cmp	r1, r3
 8005002:	d208      	bcs.n	8005016 <_sungetc_r+0x60>
 8005004:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8005008:	42a9      	cmp	r1, r5
 800500a:	d104      	bne.n	8005016 <_sungetc_r+0x60>
 800500c:	3b01      	subs	r3, #1
 800500e:	3201      	adds	r2, #1
 8005010:	6023      	str	r3, [r4, #0]
 8005012:	6062      	str	r2, [r4, #4]
 8005014:	e7d5      	b.n	8004fc2 <_sungetc_r+0xc>
 8005016:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800501a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800501e:	6363      	str	r3, [r4, #52]	; 0x34
 8005020:	2303      	movs	r3, #3
 8005022:	63a3      	str	r3, [r4, #56]	; 0x38
 8005024:	4623      	mov	r3, r4
 8005026:	f803 5f46 	strb.w	r5, [r3, #70]!
 800502a:	6023      	str	r3, [r4, #0]
 800502c:	2301      	movs	r3, #1
 800502e:	e7dc      	b.n	8004fea <_sungetc_r+0x34>

08005030 <__ssrefill_r>:
 8005030:	b510      	push	{r4, lr}
 8005032:	460c      	mov	r4, r1
 8005034:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005036:	b169      	cbz	r1, 8005054 <__ssrefill_r+0x24>
 8005038:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800503c:	4299      	cmp	r1, r3
 800503e:	d001      	beq.n	8005044 <__ssrefill_r+0x14>
 8005040:	f7ff f8e4 	bl	800420c <_free_r>
 8005044:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005046:	6063      	str	r3, [r4, #4]
 8005048:	2000      	movs	r0, #0
 800504a:	6360      	str	r0, [r4, #52]	; 0x34
 800504c:	b113      	cbz	r3, 8005054 <__ssrefill_r+0x24>
 800504e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005050:	6023      	str	r3, [r4, #0]
 8005052:	bd10      	pop	{r4, pc}
 8005054:	6923      	ldr	r3, [r4, #16]
 8005056:	6023      	str	r3, [r4, #0]
 8005058:	2300      	movs	r3, #0
 800505a:	6063      	str	r3, [r4, #4]
 800505c:	89a3      	ldrh	r3, [r4, #12]
 800505e:	f043 0320 	orr.w	r3, r3, #32
 8005062:	81a3      	strh	r3, [r4, #12]
 8005064:	f04f 30ff 	mov.w	r0, #4294967295
 8005068:	e7f3      	b.n	8005052 <__ssrefill_r+0x22>
	...

0800506c <__ssvfiscanf_r>:
 800506c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005070:	460c      	mov	r4, r1
 8005072:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8005076:	2100      	movs	r1, #0
 8005078:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800507c:	49a6      	ldr	r1, [pc, #664]	; (8005318 <__ssvfiscanf_r+0x2ac>)
 800507e:	91a0      	str	r1, [sp, #640]	; 0x280
 8005080:	f10d 0804 	add.w	r8, sp, #4
 8005084:	49a5      	ldr	r1, [pc, #660]	; (800531c <__ssvfiscanf_r+0x2b0>)
 8005086:	4fa6      	ldr	r7, [pc, #664]	; (8005320 <__ssvfiscanf_r+0x2b4>)
 8005088:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8005324 <__ssvfiscanf_r+0x2b8>
 800508c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8005090:	4606      	mov	r6, r0
 8005092:	91a1      	str	r1, [sp, #644]	; 0x284
 8005094:	9300      	str	r3, [sp, #0]
 8005096:	7813      	ldrb	r3, [r2, #0]
 8005098:	2b00      	cmp	r3, #0
 800509a:	f000 815a 	beq.w	8005352 <__ssvfiscanf_r+0x2e6>
 800509e:	5cf9      	ldrb	r1, [r7, r3]
 80050a0:	f011 0108 	ands.w	r1, r1, #8
 80050a4:	f102 0501 	add.w	r5, r2, #1
 80050a8:	d019      	beq.n	80050de <__ssvfiscanf_r+0x72>
 80050aa:	6863      	ldr	r3, [r4, #4]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	dd0f      	ble.n	80050d0 <__ssvfiscanf_r+0x64>
 80050b0:	6823      	ldr	r3, [r4, #0]
 80050b2:	781a      	ldrb	r2, [r3, #0]
 80050b4:	5cba      	ldrb	r2, [r7, r2]
 80050b6:	0712      	lsls	r2, r2, #28
 80050b8:	d401      	bmi.n	80050be <__ssvfiscanf_r+0x52>
 80050ba:	462a      	mov	r2, r5
 80050bc:	e7eb      	b.n	8005096 <__ssvfiscanf_r+0x2a>
 80050be:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80050c0:	3201      	adds	r2, #1
 80050c2:	9245      	str	r2, [sp, #276]	; 0x114
 80050c4:	6862      	ldr	r2, [r4, #4]
 80050c6:	3301      	adds	r3, #1
 80050c8:	3a01      	subs	r2, #1
 80050ca:	6062      	str	r2, [r4, #4]
 80050cc:	6023      	str	r3, [r4, #0]
 80050ce:	e7ec      	b.n	80050aa <__ssvfiscanf_r+0x3e>
 80050d0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80050d2:	4621      	mov	r1, r4
 80050d4:	4630      	mov	r0, r6
 80050d6:	4798      	blx	r3
 80050d8:	2800      	cmp	r0, #0
 80050da:	d0e9      	beq.n	80050b0 <__ssvfiscanf_r+0x44>
 80050dc:	e7ed      	b.n	80050ba <__ssvfiscanf_r+0x4e>
 80050de:	2b25      	cmp	r3, #37	; 0x25
 80050e0:	d012      	beq.n	8005108 <__ssvfiscanf_r+0x9c>
 80050e2:	469a      	mov	sl, r3
 80050e4:	6863      	ldr	r3, [r4, #4]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	f340 8091 	ble.w	800520e <__ssvfiscanf_r+0x1a2>
 80050ec:	6822      	ldr	r2, [r4, #0]
 80050ee:	7813      	ldrb	r3, [r2, #0]
 80050f0:	4553      	cmp	r3, sl
 80050f2:	f040 812e 	bne.w	8005352 <__ssvfiscanf_r+0x2e6>
 80050f6:	6863      	ldr	r3, [r4, #4]
 80050f8:	3b01      	subs	r3, #1
 80050fa:	6063      	str	r3, [r4, #4]
 80050fc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80050fe:	3201      	adds	r2, #1
 8005100:	3301      	adds	r3, #1
 8005102:	6022      	str	r2, [r4, #0]
 8005104:	9345      	str	r3, [sp, #276]	; 0x114
 8005106:	e7d8      	b.n	80050ba <__ssvfiscanf_r+0x4e>
 8005108:	9141      	str	r1, [sp, #260]	; 0x104
 800510a:	9143      	str	r1, [sp, #268]	; 0x10c
 800510c:	7853      	ldrb	r3, [r2, #1]
 800510e:	2b2a      	cmp	r3, #42	; 0x2a
 8005110:	bf02      	ittt	eq
 8005112:	2310      	moveq	r3, #16
 8005114:	1c95      	addeq	r5, r2, #2
 8005116:	9341      	streq	r3, [sp, #260]	; 0x104
 8005118:	220a      	movs	r2, #10
 800511a:	46aa      	mov	sl, r5
 800511c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8005120:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8005124:	2b09      	cmp	r3, #9
 8005126:	d91c      	bls.n	8005162 <__ssvfiscanf_r+0xf6>
 8005128:	487e      	ldr	r0, [pc, #504]	; (8005324 <__ssvfiscanf_r+0x2b8>)
 800512a:	2203      	movs	r2, #3
 800512c:	f7fb f8a0 	bl	8000270 <memchr>
 8005130:	b138      	cbz	r0, 8005142 <__ssvfiscanf_r+0xd6>
 8005132:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005134:	eba0 0009 	sub.w	r0, r0, r9
 8005138:	2301      	movs	r3, #1
 800513a:	4083      	lsls	r3, r0
 800513c:	4313      	orrs	r3, r2
 800513e:	9341      	str	r3, [sp, #260]	; 0x104
 8005140:	4655      	mov	r5, sl
 8005142:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005146:	2b78      	cmp	r3, #120	; 0x78
 8005148:	d806      	bhi.n	8005158 <__ssvfiscanf_r+0xec>
 800514a:	2b57      	cmp	r3, #87	; 0x57
 800514c:	d810      	bhi.n	8005170 <__ssvfiscanf_r+0x104>
 800514e:	2b25      	cmp	r3, #37	; 0x25
 8005150:	d0c7      	beq.n	80050e2 <__ssvfiscanf_r+0x76>
 8005152:	d857      	bhi.n	8005204 <__ssvfiscanf_r+0x198>
 8005154:	2b00      	cmp	r3, #0
 8005156:	d065      	beq.n	8005224 <__ssvfiscanf_r+0x1b8>
 8005158:	2303      	movs	r3, #3
 800515a:	9347      	str	r3, [sp, #284]	; 0x11c
 800515c:	230a      	movs	r3, #10
 800515e:	9342      	str	r3, [sp, #264]	; 0x108
 8005160:	e076      	b.n	8005250 <__ssvfiscanf_r+0x1e4>
 8005162:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005164:	fb02 1103 	mla	r1, r2, r3, r1
 8005168:	3930      	subs	r1, #48	; 0x30
 800516a:	9143      	str	r1, [sp, #268]	; 0x10c
 800516c:	4655      	mov	r5, sl
 800516e:	e7d4      	b.n	800511a <__ssvfiscanf_r+0xae>
 8005170:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8005174:	2a20      	cmp	r2, #32
 8005176:	d8ef      	bhi.n	8005158 <__ssvfiscanf_r+0xec>
 8005178:	a101      	add	r1, pc, #4	; (adr r1, 8005180 <__ssvfiscanf_r+0x114>)
 800517a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800517e:	bf00      	nop
 8005180:	08005233 	.word	0x08005233
 8005184:	08005159 	.word	0x08005159
 8005188:	08005159 	.word	0x08005159
 800518c:	08005291 	.word	0x08005291
 8005190:	08005159 	.word	0x08005159
 8005194:	08005159 	.word	0x08005159
 8005198:	08005159 	.word	0x08005159
 800519c:	08005159 	.word	0x08005159
 80051a0:	08005159 	.word	0x08005159
 80051a4:	08005159 	.word	0x08005159
 80051a8:	08005159 	.word	0x08005159
 80051ac:	080052a7 	.word	0x080052a7
 80051b0:	0800528d 	.word	0x0800528d
 80051b4:	0800520b 	.word	0x0800520b
 80051b8:	0800520b 	.word	0x0800520b
 80051bc:	0800520b 	.word	0x0800520b
 80051c0:	08005159 	.word	0x08005159
 80051c4:	08005249 	.word	0x08005249
 80051c8:	08005159 	.word	0x08005159
 80051cc:	08005159 	.word	0x08005159
 80051d0:	08005159 	.word	0x08005159
 80051d4:	08005159 	.word	0x08005159
 80051d8:	080052b7 	.word	0x080052b7
 80051dc:	08005285 	.word	0x08005285
 80051e0:	0800522b 	.word	0x0800522b
 80051e4:	08005159 	.word	0x08005159
 80051e8:	08005159 	.word	0x08005159
 80051ec:	080052b3 	.word	0x080052b3
 80051f0:	08005159 	.word	0x08005159
 80051f4:	0800528d 	.word	0x0800528d
 80051f8:	08005159 	.word	0x08005159
 80051fc:	08005159 	.word	0x08005159
 8005200:	08005233 	.word	0x08005233
 8005204:	3b45      	subs	r3, #69	; 0x45
 8005206:	2b02      	cmp	r3, #2
 8005208:	d8a6      	bhi.n	8005158 <__ssvfiscanf_r+0xec>
 800520a:	2305      	movs	r3, #5
 800520c:	e01f      	b.n	800524e <__ssvfiscanf_r+0x1e2>
 800520e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005210:	4621      	mov	r1, r4
 8005212:	4630      	mov	r0, r6
 8005214:	4798      	blx	r3
 8005216:	2800      	cmp	r0, #0
 8005218:	f43f af68 	beq.w	80050ec <__ssvfiscanf_r+0x80>
 800521c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800521e:	2800      	cmp	r0, #0
 8005220:	f040 808d 	bne.w	800533e <__ssvfiscanf_r+0x2d2>
 8005224:	f04f 30ff 	mov.w	r0, #4294967295
 8005228:	e08f      	b.n	800534a <__ssvfiscanf_r+0x2de>
 800522a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800522c:	f042 0220 	orr.w	r2, r2, #32
 8005230:	9241      	str	r2, [sp, #260]	; 0x104
 8005232:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005234:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005238:	9241      	str	r2, [sp, #260]	; 0x104
 800523a:	2210      	movs	r2, #16
 800523c:	2b6f      	cmp	r3, #111	; 0x6f
 800523e:	9242      	str	r2, [sp, #264]	; 0x108
 8005240:	bf34      	ite	cc
 8005242:	2303      	movcc	r3, #3
 8005244:	2304      	movcs	r3, #4
 8005246:	e002      	b.n	800524e <__ssvfiscanf_r+0x1e2>
 8005248:	2300      	movs	r3, #0
 800524a:	9342      	str	r3, [sp, #264]	; 0x108
 800524c:	2303      	movs	r3, #3
 800524e:	9347      	str	r3, [sp, #284]	; 0x11c
 8005250:	6863      	ldr	r3, [r4, #4]
 8005252:	2b00      	cmp	r3, #0
 8005254:	dd3d      	ble.n	80052d2 <__ssvfiscanf_r+0x266>
 8005256:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005258:	0659      	lsls	r1, r3, #25
 800525a:	d404      	bmi.n	8005266 <__ssvfiscanf_r+0x1fa>
 800525c:	6823      	ldr	r3, [r4, #0]
 800525e:	781a      	ldrb	r2, [r3, #0]
 8005260:	5cba      	ldrb	r2, [r7, r2]
 8005262:	0712      	lsls	r2, r2, #28
 8005264:	d43c      	bmi.n	80052e0 <__ssvfiscanf_r+0x274>
 8005266:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8005268:	2b02      	cmp	r3, #2
 800526a:	dc4b      	bgt.n	8005304 <__ssvfiscanf_r+0x298>
 800526c:	466b      	mov	r3, sp
 800526e:	4622      	mov	r2, r4
 8005270:	a941      	add	r1, sp, #260	; 0x104
 8005272:	4630      	mov	r0, r6
 8005274:	f000 f9b6 	bl	80055e4 <_scanf_chars>
 8005278:	2801      	cmp	r0, #1
 800527a:	d06a      	beq.n	8005352 <__ssvfiscanf_r+0x2e6>
 800527c:	2802      	cmp	r0, #2
 800527e:	f47f af1c 	bne.w	80050ba <__ssvfiscanf_r+0x4e>
 8005282:	e7cb      	b.n	800521c <__ssvfiscanf_r+0x1b0>
 8005284:	2308      	movs	r3, #8
 8005286:	9342      	str	r3, [sp, #264]	; 0x108
 8005288:	2304      	movs	r3, #4
 800528a:	e7e0      	b.n	800524e <__ssvfiscanf_r+0x1e2>
 800528c:	220a      	movs	r2, #10
 800528e:	e7d5      	b.n	800523c <__ssvfiscanf_r+0x1d0>
 8005290:	4629      	mov	r1, r5
 8005292:	4640      	mov	r0, r8
 8005294:	f000 faf4 	bl	8005880 <__sccl>
 8005298:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800529a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800529e:	9341      	str	r3, [sp, #260]	; 0x104
 80052a0:	4605      	mov	r5, r0
 80052a2:	2301      	movs	r3, #1
 80052a4:	e7d3      	b.n	800524e <__ssvfiscanf_r+0x1e2>
 80052a6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80052a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052ac:	9341      	str	r3, [sp, #260]	; 0x104
 80052ae:	2300      	movs	r3, #0
 80052b0:	e7cd      	b.n	800524e <__ssvfiscanf_r+0x1e2>
 80052b2:	2302      	movs	r3, #2
 80052b4:	e7cb      	b.n	800524e <__ssvfiscanf_r+0x1e2>
 80052b6:	9841      	ldr	r0, [sp, #260]	; 0x104
 80052b8:	06c3      	lsls	r3, r0, #27
 80052ba:	f53f aefe 	bmi.w	80050ba <__ssvfiscanf_r+0x4e>
 80052be:	9b00      	ldr	r3, [sp, #0]
 80052c0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80052c2:	1d19      	adds	r1, r3, #4
 80052c4:	9100      	str	r1, [sp, #0]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	07c0      	lsls	r0, r0, #31
 80052ca:	bf4c      	ite	mi
 80052cc:	801a      	strhmi	r2, [r3, #0]
 80052ce:	601a      	strpl	r2, [r3, #0]
 80052d0:	e6f3      	b.n	80050ba <__ssvfiscanf_r+0x4e>
 80052d2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80052d4:	4621      	mov	r1, r4
 80052d6:	4630      	mov	r0, r6
 80052d8:	4798      	blx	r3
 80052da:	2800      	cmp	r0, #0
 80052dc:	d0bb      	beq.n	8005256 <__ssvfiscanf_r+0x1ea>
 80052de:	e79d      	b.n	800521c <__ssvfiscanf_r+0x1b0>
 80052e0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80052e2:	3201      	adds	r2, #1
 80052e4:	9245      	str	r2, [sp, #276]	; 0x114
 80052e6:	6862      	ldr	r2, [r4, #4]
 80052e8:	3a01      	subs	r2, #1
 80052ea:	2a00      	cmp	r2, #0
 80052ec:	6062      	str	r2, [r4, #4]
 80052ee:	dd02      	ble.n	80052f6 <__ssvfiscanf_r+0x28a>
 80052f0:	3301      	adds	r3, #1
 80052f2:	6023      	str	r3, [r4, #0]
 80052f4:	e7b2      	b.n	800525c <__ssvfiscanf_r+0x1f0>
 80052f6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80052f8:	4621      	mov	r1, r4
 80052fa:	4630      	mov	r0, r6
 80052fc:	4798      	blx	r3
 80052fe:	2800      	cmp	r0, #0
 8005300:	d0ac      	beq.n	800525c <__ssvfiscanf_r+0x1f0>
 8005302:	e78b      	b.n	800521c <__ssvfiscanf_r+0x1b0>
 8005304:	2b04      	cmp	r3, #4
 8005306:	dc0f      	bgt.n	8005328 <__ssvfiscanf_r+0x2bc>
 8005308:	466b      	mov	r3, sp
 800530a:	4622      	mov	r2, r4
 800530c:	a941      	add	r1, sp, #260	; 0x104
 800530e:	4630      	mov	r0, r6
 8005310:	f000 f9c2 	bl	8005698 <_scanf_i>
 8005314:	e7b0      	b.n	8005278 <__ssvfiscanf_r+0x20c>
 8005316:	bf00      	nop
 8005318:	08004fb7 	.word	0x08004fb7
 800531c:	08005031 	.word	0x08005031
 8005320:	08006063 	.word	0x08006063
 8005324:	08006169 	.word	0x08006169
 8005328:	4b0b      	ldr	r3, [pc, #44]	; (8005358 <__ssvfiscanf_r+0x2ec>)
 800532a:	2b00      	cmp	r3, #0
 800532c:	f43f aec5 	beq.w	80050ba <__ssvfiscanf_r+0x4e>
 8005330:	466b      	mov	r3, sp
 8005332:	4622      	mov	r2, r4
 8005334:	a941      	add	r1, sp, #260	; 0x104
 8005336:	4630      	mov	r0, r6
 8005338:	f3af 8000 	nop.w
 800533c:	e79c      	b.n	8005278 <__ssvfiscanf_r+0x20c>
 800533e:	89a3      	ldrh	r3, [r4, #12]
 8005340:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005344:	bf18      	it	ne
 8005346:	f04f 30ff 	movne.w	r0, #4294967295
 800534a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800534e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005352:	9844      	ldr	r0, [sp, #272]	; 0x110
 8005354:	e7f9      	b.n	800534a <__ssvfiscanf_r+0x2de>
 8005356:	bf00      	nop
 8005358:	00000000 	.word	0x00000000

0800535c <__sfputc_r>:
 800535c:	6893      	ldr	r3, [r2, #8]
 800535e:	3b01      	subs	r3, #1
 8005360:	2b00      	cmp	r3, #0
 8005362:	b410      	push	{r4}
 8005364:	6093      	str	r3, [r2, #8]
 8005366:	da08      	bge.n	800537a <__sfputc_r+0x1e>
 8005368:	6994      	ldr	r4, [r2, #24]
 800536a:	42a3      	cmp	r3, r4
 800536c:	db01      	blt.n	8005372 <__sfputc_r+0x16>
 800536e:	290a      	cmp	r1, #10
 8005370:	d103      	bne.n	800537a <__sfputc_r+0x1e>
 8005372:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005376:	f000 baf6 	b.w	8005966 <__swbuf_r>
 800537a:	6813      	ldr	r3, [r2, #0]
 800537c:	1c58      	adds	r0, r3, #1
 800537e:	6010      	str	r0, [r2, #0]
 8005380:	7019      	strb	r1, [r3, #0]
 8005382:	4608      	mov	r0, r1
 8005384:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005388:	4770      	bx	lr

0800538a <__sfputs_r>:
 800538a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800538c:	4606      	mov	r6, r0
 800538e:	460f      	mov	r7, r1
 8005390:	4614      	mov	r4, r2
 8005392:	18d5      	adds	r5, r2, r3
 8005394:	42ac      	cmp	r4, r5
 8005396:	d101      	bne.n	800539c <__sfputs_r+0x12>
 8005398:	2000      	movs	r0, #0
 800539a:	e007      	b.n	80053ac <__sfputs_r+0x22>
 800539c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053a0:	463a      	mov	r2, r7
 80053a2:	4630      	mov	r0, r6
 80053a4:	f7ff ffda 	bl	800535c <__sfputc_r>
 80053a8:	1c43      	adds	r3, r0, #1
 80053aa:	d1f3      	bne.n	8005394 <__sfputs_r+0xa>
 80053ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080053b0 <_vfiprintf_r>:
 80053b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053b4:	460d      	mov	r5, r1
 80053b6:	b09d      	sub	sp, #116	; 0x74
 80053b8:	4614      	mov	r4, r2
 80053ba:	4698      	mov	r8, r3
 80053bc:	4606      	mov	r6, r0
 80053be:	b118      	cbz	r0, 80053c8 <_vfiprintf_r+0x18>
 80053c0:	6a03      	ldr	r3, [r0, #32]
 80053c2:	b90b      	cbnz	r3, 80053c8 <_vfiprintf_r+0x18>
 80053c4:	f7fe f9f8 	bl	80037b8 <__sinit>
 80053c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80053ca:	07d9      	lsls	r1, r3, #31
 80053cc:	d405      	bmi.n	80053da <_vfiprintf_r+0x2a>
 80053ce:	89ab      	ldrh	r3, [r5, #12]
 80053d0:	059a      	lsls	r2, r3, #22
 80053d2:	d402      	bmi.n	80053da <_vfiprintf_r+0x2a>
 80053d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80053d6:	f7fe fef0 	bl	80041ba <__retarget_lock_acquire_recursive>
 80053da:	89ab      	ldrh	r3, [r5, #12]
 80053dc:	071b      	lsls	r3, r3, #28
 80053de:	d501      	bpl.n	80053e4 <_vfiprintf_r+0x34>
 80053e0:	692b      	ldr	r3, [r5, #16]
 80053e2:	b99b      	cbnz	r3, 800540c <_vfiprintf_r+0x5c>
 80053e4:	4629      	mov	r1, r5
 80053e6:	4630      	mov	r0, r6
 80053e8:	f000 fafa 	bl	80059e0 <__swsetup_r>
 80053ec:	b170      	cbz	r0, 800540c <_vfiprintf_r+0x5c>
 80053ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80053f0:	07dc      	lsls	r4, r3, #31
 80053f2:	d504      	bpl.n	80053fe <_vfiprintf_r+0x4e>
 80053f4:	f04f 30ff 	mov.w	r0, #4294967295
 80053f8:	b01d      	add	sp, #116	; 0x74
 80053fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053fe:	89ab      	ldrh	r3, [r5, #12]
 8005400:	0598      	lsls	r0, r3, #22
 8005402:	d4f7      	bmi.n	80053f4 <_vfiprintf_r+0x44>
 8005404:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005406:	f7fe feda 	bl	80041be <__retarget_lock_release_recursive>
 800540a:	e7f3      	b.n	80053f4 <_vfiprintf_r+0x44>
 800540c:	2300      	movs	r3, #0
 800540e:	9309      	str	r3, [sp, #36]	; 0x24
 8005410:	2320      	movs	r3, #32
 8005412:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005416:	f8cd 800c 	str.w	r8, [sp, #12]
 800541a:	2330      	movs	r3, #48	; 0x30
 800541c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80055d0 <_vfiprintf_r+0x220>
 8005420:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005424:	f04f 0901 	mov.w	r9, #1
 8005428:	4623      	mov	r3, r4
 800542a:	469a      	mov	sl, r3
 800542c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005430:	b10a      	cbz	r2, 8005436 <_vfiprintf_r+0x86>
 8005432:	2a25      	cmp	r2, #37	; 0x25
 8005434:	d1f9      	bne.n	800542a <_vfiprintf_r+0x7a>
 8005436:	ebba 0b04 	subs.w	fp, sl, r4
 800543a:	d00b      	beq.n	8005454 <_vfiprintf_r+0xa4>
 800543c:	465b      	mov	r3, fp
 800543e:	4622      	mov	r2, r4
 8005440:	4629      	mov	r1, r5
 8005442:	4630      	mov	r0, r6
 8005444:	f7ff ffa1 	bl	800538a <__sfputs_r>
 8005448:	3001      	adds	r0, #1
 800544a:	f000 80a9 	beq.w	80055a0 <_vfiprintf_r+0x1f0>
 800544e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005450:	445a      	add	r2, fp
 8005452:	9209      	str	r2, [sp, #36]	; 0x24
 8005454:	f89a 3000 	ldrb.w	r3, [sl]
 8005458:	2b00      	cmp	r3, #0
 800545a:	f000 80a1 	beq.w	80055a0 <_vfiprintf_r+0x1f0>
 800545e:	2300      	movs	r3, #0
 8005460:	f04f 32ff 	mov.w	r2, #4294967295
 8005464:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005468:	f10a 0a01 	add.w	sl, sl, #1
 800546c:	9304      	str	r3, [sp, #16]
 800546e:	9307      	str	r3, [sp, #28]
 8005470:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005474:	931a      	str	r3, [sp, #104]	; 0x68
 8005476:	4654      	mov	r4, sl
 8005478:	2205      	movs	r2, #5
 800547a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800547e:	4854      	ldr	r0, [pc, #336]	; (80055d0 <_vfiprintf_r+0x220>)
 8005480:	f7fa fef6 	bl	8000270 <memchr>
 8005484:	9a04      	ldr	r2, [sp, #16]
 8005486:	b9d8      	cbnz	r0, 80054c0 <_vfiprintf_r+0x110>
 8005488:	06d1      	lsls	r1, r2, #27
 800548a:	bf44      	itt	mi
 800548c:	2320      	movmi	r3, #32
 800548e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005492:	0713      	lsls	r3, r2, #28
 8005494:	bf44      	itt	mi
 8005496:	232b      	movmi	r3, #43	; 0x2b
 8005498:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800549c:	f89a 3000 	ldrb.w	r3, [sl]
 80054a0:	2b2a      	cmp	r3, #42	; 0x2a
 80054a2:	d015      	beq.n	80054d0 <_vfiprintf_r+0x120>
 80054a4:	9a07      	ldr	r2, [sp, #28]
 80054a6:	4654      	mov	r4, sl
 80054a8:	2000      	movs	r0, #0
 80054aa:	f04f 0c0a 	mov.w	ip, #10
 80054ae:	4621      	mov	r1, r4
 80054b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80054b4:	3b30      	subs	r3, #48	; 0x30
 80054b6:	2b09      	cmp	r3, #9
 80054b8:	d94d      	bls.n	8005556 <_vfiprintf_r+0x1a6>
 80054ba:	b1b0      	cbz	r0, 80054ea <_vfiprintf_r+0x13a>
 80054bc:	9207      	str	r2, [sp, #28]
 80054be:	e014      	b.n	80054ea <_vfiprintf_r+0x13a>
 80054c0:	eba0 0308 	sub.w	r3, r0, r8
 80054c4:	fa09 f303 	lsl.w	r3, r9, r3
 80054c8:	4313      	orrs	r3, r2
 80054ca:	9304      	str	r3, [sp, #16]
 80054cc:	46a2      	mov	sl, r4
 80054ce:	e7d2      	b.n	8005476 <_vfiprintf_r+0xc6>
 80054d0:	9b03      	ldr	r3, [sp, #12]
 80054d2:	1d19      	adds	r1, r3, #4
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	9103      	str	r1, [sp, #12]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	bfbb      	ittet	lt
 80054dc:	425b      	neglt	r3, r3
 80054de:	f042 0202 	orrlt.w	r2, r2, #2
 80054e2:	9307      	strge	r3, [sp, #28]
 80054e4:	9307      	strlt	r3, [sp, #28]
 80054e6:	bfb8      	it	lt
 80054e8:	9204      	strlt	r2, [sp, #16]
 80054ea:	7823      	ldrb	r3, [r4, #0]
 80054ec:	2b2e      	cmp	r3, #46	; 0x2e
 80054ee:	d10c      	bne.n	800550a <_vfiprintf_r+0x15a>
 80054f0:	7863      	ldrb	r3, [r4, #1]
 80054f2:	2b2a      	cmp	r3, #42	; 0x2a
 80054f4:	d134      	bne.n	8005560 <_vfiprintf_r+0x1b0>
 80054f6:	9b03      	ldr	r3, [sp, #12]
 80054f8:	1d1a      	adds	r2, r3, #4
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	9203      	str	r2, [sp, #12]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	bfb8      	it	lt
 8005502:	f04f 33ff 	movlt.w	r3, #4294967295
 8005506:	3402      	adds	r4, #2
 8005508:	9305      	str	r3, [sp, #20]
 800550a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80055e0 <_vfiprintf_r+0x230>
 800550e:	7821      	ldrb	r1, [r4, #0]
 8005510:	2203      	movs	r2, #3
 8005512:	4650      	mov	r0, sl
 8005514:	f7fa feac 	bl	8000270 <memchr>
 8005518:	b138      	cbz	r0, 800552a <_vfiprintf_r+0x17a>
 800551a:	9b04      	ldr	r3, [sp, #16]
 800551c:	eba0 000a 	sub.w	r0, r0, sl
 8005520:	2240      	movs	r2, #64	; 0x40
 8005522:	4082      	lsls	r2, r0
 8005524:	4313      	orrs	r3, r2
 8005526:	3401      	adds	r4, #1
 8005528:	9304      	str	r3, [sp, #16]
 800552a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800552e:	4829      	ldr	r0, [pc, #164]	; (80055d4 <_vfiprintf_r+0x224>)
 8005530:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005534:	2206      	movs	r2, #6
 8005536:	f7fa fe9b 	bl	8000270 <memchr>
 800553a:	2800      	cmp	r0, #0
 800553c:	d03f      	beq.n	80055be <_vfiprintf_r+0x20e>
 800553e:	4b26      	ldr	r3, [pc, #152]	; (80055d8 <_vfiprintf_r+0x228>)
 8005540:	bb1b      	cbnz	r3, 800558a <_vfiprintf_r+0x1da>
 8005542:	9b03      	ldr	r3, [sp, #12]
 8005544:	3307      	adds	r3, #7
 8005546:	f023 0307 	bic.w	r3, r3, #7
 800554a:	3308      	adds	r3, #8
 800554c:	9303      	str	r3, [sp, #12]
 800554e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005550:	443b      	add	r3, r7
 8005552:	9309      	str	r3, [sp, #36]	; 0x24
 8005554:	e768      	b.n	8005428 <_vfiprintf_r+0x78>
 8005556:	fb0c 3202 	mla	r2, ip, r2, r3
 800555a:	460c      	mov	r4, r1
 800555c:	2001      	movs	r0, #1
 800555e:	e7a6      	b.n	80054ae <_vfiprintf_r+0xfe>
 8005560:	2300      	movs	r3, #0
 8005562:	3401      	adds	r4, #1
 8005564:	9305      	str	r3, [sp, #20]
 8005566:	4619      	mov	r1, r3
 8005568:	f04f 0c0a 	mov.w	ip, #10
 800556c:	4620      	mov	r0, r4
 800556e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005572:	3a30      	subs	r2, #48	; 0x30
 8005574:	2a09      	cmp	r2, #9
 8005576:	d903      	bls.n	8005580 <_vfiprintf_r+0x1d0>
 8005578:	2b00      	cmp	r3, #0
 800557a:	d0c6      	beq.n	800550a <_vfiprintf_r+0x15a>
 800557c:	9105      	str	r1, [sp, #20]
 800557e:	e7c4      	b.n	800550a <_vfiprintf_r+0x15a>
 8005580:	fb0c 2101 	mla	r1, ip, r1, r2
 8005584:	4604      	mov	r4, r0
 8005586:	2301      	movs	r3, #1
 8005588:	e7f0      	b.n	800556c <_vfiprintf_r+0x1bc>
 800558a:	ab03      	add	r3, sp, #12
 800558c:	9300      	str	r3, [sp, #0]
 800558e:	462a      	mov	r2, r5
 8005590:	4b12      	ldr	r3, [pc, #72]	; (80055dc <_vfiprintf_r+0x22c>)
 8005592:	a904      	add	r1, sp, #16
 8005594:	4630      	mov	r0, r6
 8005596:	f3af 8000 	nop.w
 800559a:	4607      	mov	r7, r0
 800559c:	1c78      	adds	r0, r7, #1
 800559e:	d1d6      	bne.n	800554e <_vfiprintf_r+0x19e>
 80055a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80055a2:	07d9      	lsls	r1, r3, #31
 80055a4:	d405      	bmi.n	80055b2 <_vfiprintf_r+0x202>
 80055a6:	89ab      	ldrh	r3, [r5, #12]
 80055a8:	059a      	lsls	r2, r3, #22
 80055aa:	d402      	bmi.n	80055b2 <_vfiprintf_r+0x202>
 80055ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80055ae:	f7fe fe06 	bl	80041be <__retarget_lock_release_recursive>
 80055b2:	89ab      	ldrh	r3, [r5, #12]
 80055b4:	065b      	lsls	r3, r3, #25
 80055b6:	f53f af1d 	bmi.w	80053f4 <_vfiprintf_r+0x44>
 80055ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80055bc:	e71c      	b.n	80053f8 <_vfiprintf_r+0x48>
 80055be:	ab03      	add	r3, sp, #12
 80055c0:	9300      	str	r3, [sp, #0]
 80055c2:	462a      	mov	r2, r5
 80055c4:	4b05      	ldr	r3, [pc, #20]	; (80055dc <_vfiprintf_r+0x22c>)
 80055c6:	a904      	add	r1, sp, #16
 80055c8:	4630      	mov	r0, r6
 80055ca:	f7ff f9af 	bl	800492c <_printf_i>
 80055ce:	e7e4      	b.n	800559a <_vfiprintf_r+0x1ea>
 80055d0:	08006163 	.word	0x08006163
 80055d4:	0800616d 	.word	0x0800616d
 80055d8:	00000000 	.word	0x00000000
 80055dc:	0800538b 	.word	0x0800538b
 80055e0:	08006169 	.word	0x08006169

080055e4 <_scanf_chars>:
 80055e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055e8:	4615      	mov	r5, r2
 80055ea:	688a      	ldr	r2, [r1, #8]
 80055ec:	4680      	mov	r8, r0
 80055ee:	460c      	mov	r4, r1
 80055f0:	b932      	cbnz	r2, 8005600 <_scanf_chars+0x1c>
 80055f2:	698a      	ldr	r2, [r1, #24]
 80055f4:	2a00      	cmp	r2, #0
 80055f6:	bf0c      	ite	eq
 80055f8:	2201      	moveq	r2, #1
 80055fa:	f04f 32ff 	movne.w	r2, #4294967295
 80055fe:	608a      	str	r2, [r1, #8]
 8005600:	6822      	ldr	r2, [r4, #0]
 8005602:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8005694 <_scanf_chars+0xb0>
 8005606:	06d1      	lsls	r1, r2, #27
 8005608:	bf5f      	itttt	pl
 800560a:	681a      	ldrpl	r2, [r3, #0]
 800560c:	1d11      	addpl	r1, r2, #4
 800560e:	6019      	strpl	r1, [r3, #0]
 8005610:	6816      	ldrpl	r6, [r2, #0]
 8005612:	2700      	movs	r7, #0
 8005614:	69a0      	ldr	r0, [r4, #24]
 8005616:	b188      	cbz	r0, 800563c <_scanf_chars+0x58>
 8005618:	2801      	cmp	r0, #1
 800561a:	d107      	bne.n	800562c <_scanf_chars+0x48>
 800561c:	682a      	ldr	r2, [r5, #0]
 800561e:	7811      	ldrb	r1, [r2, #0]
 8005620:	6962      	ldr	r2, [r4, #20]
 8005622:	5c52      	ldrb	r2, [r2, r1]
 8005624:	b952      	cbnz	r2, 800563c <_scanf_chars+0x58>
 8005626:	2f00      	cmp	r7, #0
 8005628:	d031      	beq.n	800568e <_scanf_chars+0xaa>
 800562a:	e022      	b.n	8005672 <_scanf_chars+0x8e>
 800562c:	2802      	cmp	r0, #2
 800562e:	d120      	bne.n	8005672 <_scanf_chars+0x8e>
 8005630:	682b      	ldr	r3, [r5, #0]
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	f819 3003 	ldrb.w	r3, [r9, r3]
 8005638:	071b      	lsls	r3, r3, #28
 800563a:	d41a      	bmi.n	8005672 <_scanf_chars+0x8e>
 800563c:	6823      	ldr	r3, [r4, #0]
 800563e:	06da      	lsls	r2, r3, #27
 8005640:	bf5e      	ittt	pl
 8005642:	682b      	ldrpl	r3, [r5, #0]
 8005644:	781b      	ldrbpl	r3, [r3, #0]
 8005646:	f806 3b01 	strbpl.w	r3, [r6], #1
 800564a:	682a      	ldr	r2, [r5, #0]
 800564c:	686b      	ldr	r3, [r5, #4]
 800564e:	3201      	adds	r2, #1
 8005650:	602a      	str	r2, [r5, #0]
 8005652:	68a2      	ldr	r2, [r4, #8]
 8005654:	3b01      	subs	r3, #1
 8005656:	3a01      	subs	r2, #1
 8005658:	606b      	str	r3, [r5, #4]
 800565a:	3701      	adds	r7, #1
 800565c:	60a2      	str	r2, [r4, #8]
 800565e:	b142      	cbz	r2, 8005672 <_scanf_chars+0x8e>
 8005660:	2b00      	cmp	r3, #0
 8005662:	dcd7      	bgt.n	8005614 <_scanf_chars+0x30>
 8005664:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005668:	4629      	mov	r1, r5
 800566a:	4640      	mov	r0, r8
 800566c:	4798      	blx	r3
 800566e:	2800      	cmp	r0, #0
 8005670:	d0d0      	beq.n	8005614 <_scanf_chars+0x30>
 8005672:	6823      	ldr	r3, [r4, #0]
 8005674:	f013 0310 	ands.w	r3, r3, #16
 8005678:	d105      	bne.n	8005686 <_scanf_chars+0xa2>
 800567a:	68e2      	ldr	r2, [r4, #12]
 800567c:	3201      	adds	r2, #1
 800567e:	60e2      	str	r2, [r4, #12]
 8005680:	69a2      	ldr	r2, [r4, #24]
 8005682:	b102      	cbz	r2, 8005686 <_scanf_chars+0xa2>
 8005684:	7033      	strb	r3, [r6, #0]
 8005686:	6923      	ldr	r3, [r4, #16]
 8005688:	443b      	add	r3, r7
 800568a:	6123      	str	r3, [r4, #16]
 800568c:	2000      	movs	r0, #0
 800568e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005692:	bf00      	nop
 8005694:	08006063 	.word	0x08006063

08005698 <_scanf_i>:
 8005698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800569c:	4698      	mov	r8, r3
 800569e:	4b74      	ldr	r3, [pc, #464]	; (8005870 <_scanf_i+0x1d8>)
 80056a0:	460c      	mov	r4, r1
 80056a2:	4682      	mov	sl, r0
 80056a4:	4616      	mov	r6, r2
 80056a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80056aa:	b087      	sub	sp, #28
 80056ac:	ab03      	add	r3, sp, #12
 80056ae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80056b2:	4b70      	ldr	r3, [pc, #448]	; (8005874 <_scanf_i+0x1dc>)
 80056b4:	69a1      	ldr	r1, [r4, #24]
 80056b6:	4a70      	ldr	r2, [pc, #448]	; (8005878 <_scanf_i+0x1e0>)
 80056b8:	2903      	cmp	r1, #3
 80056ba:	bf18      	it	ne
 80056bc:	461a      	movne	r2, r3
 80056be:	68a3      	ldr	r3, [r4, #8]
 80056c0:	9201      	str	r2, [sp, #4]
 80056c2:	1e5a      	subs	r2, r3, #1
 80056c4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80056c8:	bf88      	it	hi
 80056ca:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80056ce:	4627      	mov	r7, r4
 80056d0:	bf82      	ittt	hi
 80056d2:	eb03 0905 	addhi.w	r9, r3, r5
 80056d6:	f240 135d 	movwhi	r3, #349	; 0x15d
 80056da:	60a3      	strhi	r3, [r4, #8]
 80056dc:	f857 3b1c 	ldr.w	r3, [r7], #28
 80056e0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80056e4:	bf98      	it	ls
 80056e6:	f04f 0900 	movls.w	r9, #0
 80056ea:	6023      	str	r3, [r4, #0]
 80056ec:	463d      	mov	r5, r7
 80056ee:	f04f 0b00 	mov.w	fp, #0
 80056f2:	6831      	ldr	r1, [r6, #0]
 80056f4:	ab03      	add	r3, sp, #12
 80056f6:	7809      	ldrb	r1, [r1, #0]
 80056f8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80056fc:	2202      	movs	r2, #2
 80056fe:	f7fa fdb7 	bl	8000270 <memchr>
 8005702:	b328      	cbz	r0, 8005750 <_scanf_i+0xb8>
 8005704:	f1bb 0f01 	cmp.w	fp, #1
 8005708:	d159      	bne.n	80057be <_scanf_i+0x126>
 800570a:	6862      	ldr	r2, [r4, #4]
 800570c:	b92a      	cbnz	r2, 800571a <_scanf_i+0x82>
 800570e:	6822      	ldr	r2, [r4, #0]
 8005710:	2308      	movs	r3, #8
 8005712:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005716:	6063      	str	r3, [r4, #4]
 8005718:	6022      	str	r2, [r4, #0]
 800571a:	6822      	ldr	r2, [r4, #0]
 800571c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8005720:	6022      	str	r2, [r4, #0]
 8005722:	68a2      	ldr	r2, [r4, #8]
 8005724:	1e51      	subs	r1, r2, #1
 8005726:	60a1      	str	r1, [r4, #8]
 8005728:	b192      	cbz	r2, 8005750 <_scanf_i+0xb8>
 800572a:	6832      	ldr	r2, [r6, #0]
 800572c:	1c51      	adds	r1, r2, #1
 800572e:	6031      	str	r1, [r6, #0]
 8005730:	7812      	ldrb	r2, [r2, #0]
 8005732:	f805 2b01 	strb.w	r2, [r5], #1
 8005736:	6872      	ldr	r2, [r6, #4]
 8005738:	3a01      	subs	r2, #1
 800573a:	2a00      	cmp	r2, #0
 800573c:	6072      	str	r2, [r6, #4]
 800573e:	dc07      	bgt.n	8005750 <_scanf_i+0xb8>
 8005740:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8005744:	4631      	mov	r1, r6
 8005746:	4650      	mov	r0, sl
 8005748:	4790      	blx	r2
 800574a:	2800      	cmp	r0, #0
 800574c:	f040 8085 	bne.w	800585a <_scanf_i+0x1c2>
 8005750:	f10b 0b01 	add.w	fp, fp, #1
 8005754:	f1bb 0f03 	cmp.w	fp, #3
 8005758:	d1cb      	bne.n	80056f2 <_scanf_i+0x5a>
 800575a:	6863      	ldr	r3, [r4, #4]
 800575c:	b90b      	cbnz	r3, 8005762 <_scanf_i+0xca>
 800575e:	230a      	movs	r3, #10
 8005760:	6063      	str	r3, [r4, #4]
 8005762:	6863      	ldr	r3, [r4, #4]
 8005764:	4945      	ldr	r1, [pc, #276]	; (800587c <_scanf_i+0x1e4>)
 8005766:	6960      	ldr	r0, [r4, #20]
 8005768:	1ac9      	subs	r1, r1, r3
 800576a:	f000 f889 	bl	8005880 <__sccl>
 800576e:	f04f 0b00 	mov.w	fp, #0
 8005772:	68a3      	ldr	r3, [r4, #8]
 8005774:	6822      	ldr	r2, [r4, #0]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d03d      	beq.n	80057f6 <_scanf_i+0x15e>
 800577a:	6831      	ldr	r1, [r6, #0]
 800577c:	6960      	ldr	r0, [r4, #20]
 800577e:	f891 c000 	ldrb.w	ip, [r1]
 8005782:	f810 000c 	ldrb.w	r0, [r0, ip]
 8005786:	2800      	cmp	r0, #0
 8005788:	d035      	beq.n	80057f6 <_scanf_i+0x15e>
 800578a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800578e:	d124      	bne.n	80057da <_scanf_i+0x142>
 8005790:	0510      	lsls	r0, r2, #20
 8005792:	d522      	bpl.n	80057da <_scanf_i+0x142>
 8005794:	f10b 0b01 	add.w	fp, fp, #1
 8005798:	f1b9 0f00 	cmp.w	r9, #0
 800579c:	d003      	beq.n	80057a6 <_scanf_i+0x10e>
 800579e:	3301      	adds	r3, #1
 80057a0:	f109 39ff 	add.w	r9, r9, #4294967295
 80057a4:	60a3      	str	r3, [r4, #8]
 80057a6:	6873      	ldr	r3, [r6, #4]
 80057a8:	3b01      	subs	r3, #1
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	6073      	str	r3, [r6, #4]
 80057ae:	dd1b      	ble.n	80057e8 <_scanf_i+0x150>
 80057b0:	6833      	ldr	r3, [r6, #0]
 80057b2:	3301      	adds	r3, #1
 80057b4:	6033      	str	r3, [r6, #0]
 80057b6:	68a3      	ldr	r3, [r4, #8]
 80057b8:	3b01      	subs	r3, #1
 80057ba:	60a3      	str	r3, [r4, #8]
 80057bc:	e7d9      	b.n	8005772 <_scanf_i+0xda>
 80057be:	f1bb 0f02 	cmp.w	fp, #2
 80057c2:	d1ae      	bne.n	8005722 <_scanf_i+0x8a>
 80057c4:	6822      	ldr	r2, [r4, #0]
 80057c6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80057ca:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80057ce:	d1bf      	bne.n	8005750 <_scanf_i+0xb8>
 80057d0:	2310      	movs	r3, #16
 80057d2:	6063      	str	r3, [r4, #4]
 80057d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057d8:	e7a2      	b.n	8005720 <_scanf_i+0x88>
 80057da:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80057de:	6022      	str	r2, [r4, #0]
 80057e0:	780b      	ldrb	r3, [r1, #0]
 80057e2:	f805 3b01 	strb.w	r3, [r5], #1
 80057e6:	e7de      	b.n	80057a6 <_scanf_i+0x10e>
 80057e8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80057ec:	4631      	mov	r1, r6
 80057ee:	4650      	mov	r0, sl
 80057f0:	4798      	blx	r3
 80057f2:	2800      	cmp	r0, #0
 80057f4:	d0df      	beq.n	80057b6 <_scanf_i+0x11e>
 80057f6:	6823      	ldr	r3, [r4, #0]
 80057f8:	05d9      	lsls	r1, r3, #23
 80057fa:	d50d      	bpl.n	8005818 <_scanf_i+0x180>
 80057fc:	42bd      	cmp	r5, r7
 80057fe:	d909      	bls.n	8005814 <_scanf_i+0x17c>
 8005800:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8005804:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005808:	4632      	mov	r2, r6
 800580a:	4650      	mov	r0, sl
 800580c:	4798      	blx	r3
 800580e:	f105 39ff 	add.w	r9, r5, #4294967295
 8005812:	464d      	mov	r5, r9
 8005814:	42bd      	cmp	r5, r7
 8005816:	d028      	beq.n	800586a <_scanf_i+0x1d2>
 8005818:	6822      	ldr	r2, [r4, #0]
 800581a:	f012 0210 	ands.w	r2, r2, #16
 800581e:	d113      	bne.n	8005848 <_scanf_i+0x1b0>
 8005820:	702a      	strb	r2, [r5, #0]
 8005822:	6863      	ldr	r3, [r4, #4]
 8005824:	9e01      	ldr	r6, [sp, #4]
 8005826:	4639      	mov	r1, r7
 8005828:	4650      	mov	r0, sl
 800582a:	47b0      	blx	r6
 800582c:	f8d8 3000 	ldr.w	r3, [r8]
 8005830:	6821      	ldr	r1, [r4, #0]
 8005832:	1d1a      	adds	r2, r3, #4
 8005834:	f8c8 2000 	str.w	r2, [r8]
 8005838:	f011 0f20 	tst.w	r1, #32
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	d00f      	beq.n	8005860 <_scanf_i+0x1c8>
 8005840:	6018      	str	r0, [r3, #0]
 8005842:	68e3      	ldr	r3, [r4, #12]
 8005844:	3301      	adds	r3, #1
 8005846:	60e3      	str	r3, [r4, #12]
 8005848:	6923      	ldr	r3, [r4, #16]
 800584a:	1bed      	subs	r5, r5, r7
 800584c:	445d      	add	r5, fp
 800584e:	442b      	add	r3, r5
 8005850:	6123      	str	r3, [r4, #16]
 8005852:	2000      	movs	r0, #0
 8005854:	b007      	add	sp, #28
 8005856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800585a:	f04f 0b00 	mov.w	fp, #0
 800585e:	e7ca      	b.n	80057f6 <_scanf_i+0x15e>
 8005860:	07ca      	lsls	r2, r1, #31
 8005862:	bf4c      	ite	mi
 8005864:	8018      	strhmi	r0, [r3, #0]
 8005866:	6018      	strpl	r0, [r3, #0]
 8005868:	e7eb      	b.n	8005842 <_scanf_i+0x1aa>
 800586a:	2001      	movs	r0, #1
 800586c:	e7f2      	b.n	8005854 <_scanf_i+0x1bc>
 800586e:	bf00      	nop
 8005870:	08005ea8 	.word	0x08005ea8
 8005874:	08004589 	.word	0x08004589
 8005878:	08005c2d 	.word	0x08005c2d
 800587c:	080061a6 	.word	0x080061a6

08005880 <__sccl>:
 8005880:	b570      	push	{r4, r5, r6, lr}
 8005882:	780b      	ldrb	r3, [r1, #0]
 8005884:	4604      	mov	r4, r0
 8005886:	2b5e      	cmp	r3, #94	; 0x5e
 8005888:	bf0b      	itete	eq
 800588a:	784b      	ldrbeq	r3, [r1, #1]
 800588c:	1c4a      	addne	r2, r1, #1
 800588e:	1c8a      	addeq	r2, r1, #2
 8005890:	2100      	movne	r1, #0
 8005892:	bf08      	it	eq
 8005894:	2101      	moveq	r1, #1
 8005896:	3801      	subs	r0, #1
 8005898:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800589c:	f800 1f01 	strb.w	r1, [r0, #1]!
 80058a0:	42a8      	cmp	r0, r5
 80058a2:	d1fb      	bne.n	800589c <__sccl+0x1c>
 80058a4:	b90b      	cbnz	r3, 80058aa <__sccl+0x2a>
 80058a6:	1e50      	subs	r0, r2, #1
 80058a8:	bd70      	pop	{r4, r5, r6, pc}
 80058aa:	f081 0101 	eor.w	r1, r1, #1
 80058ae:	54e1      	strb	r1, [r4, r3]
 80058b0:	4610      	mov	r0, r2
 80058b2:	4602      	mov	r2, r0
 80058b4:	f812 5b01 	ldrb.w	r5, [r2], #1
 80058b8:	2d2d      	cmp	r5, #45	; 0x2d
 80058ba:	d005      	beq.n	80058c8 <__sccl+0x48>
 80058bc:	2d5d      	cmp	r5, #93	; 0x5d
 80058be:	d016      	beq.n	80058ee <__sccl+0x6e>
 80058c0:	2d00      	cmp	r5, #0
 80058c2:	d0f1      	beq.n	80058a8 <__sccl+0x28>
 80058c4:	462b      	mov	r3, r5
 80058c6:	e7f2      	b.n	80058ae <__sccl+0x2e>
 80058c8:	7846      	ldrb	r6, [r0, #1]
 80058ca:	2e5d      	cmp	r6, #93	; 0x5d
 80058cc:	d0fa      	beq.n	80058c4 <__sccl+0x44>
 80058ce:	42b3      	cmp	r3, r6
 80058d0:	dcf8      	bgt.n	80058c4 <__sccl+0x44>
 80058d2:	3002      	adds	r0, #2
 80058d4:	461a      	mov	r2, r3
 80058d6:	3201      	adds	r2, #1
 80058d8:	4296      	cmp	r6, r2
 80058da:	54a1      	strb	r1, [r4, r2]
 80058dc:	dcfb      	bgt.n	80058d6 <__sccl+0x56>
 80058de:	1af2      	subs	r2, r6, r3
 80058e0:	3a01      	subs	r2, #1
 80058e2:	1c5d      	adds	r5, r3, #1
 80058e4:	42b3      	cmp	r3, r6
 80058e6:	bfa8      	it	ge
 80058e8:	2200      	movge	r2, #0
 80058ea:	18ab      	adds	r3, r5, r2
 80058ec:	e7e1      	b.n	80058b2 <__sccl+0x32>
 80058ee:	4610      	mov	r0, r2
 80058f0:	e7da      	b.n	80058a8 <__sccl+0x28>

080058f2 <__submore>:
 80058f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058f6:	460c      	mov	r4, r1
 80058f8:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80058fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80058fe:	4299      	cmp	r1, r3
 8005900:	d11d      	bne.n	800593e <__submore+0x4c>
 8005902:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005906:	f7fe fd41 	bl	800438c <_malloc_r>
 800590a:	b918      	cbnz	r0, 8005914 <__submore+0x22>
 800590c:	f04f 30ff 	mov.w	r0, #4294967295
 8005910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005914:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005918:	63a3      	str	r3, [r4, #56]	; 0x38
 800591a:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800591e:	6360      	str	r0, [r4, #52]	; 0x34
 8005920:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8005924:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005928:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800592c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005930:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8005934:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8005938:	6020      	str	r0, [r4, #0]
 800593a:	2000      	movs	r0, #0
 800593c:	e7e8      	b.n	8005910 <__submore+0x1e>
 800593e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8005940:	0077      	lsls	r7, r6, #1
 8005942:	463a      	mov	r2, r7
 8005944:	f7ff fb08 	bl	8004f58 <_realloc_r>
 8005948:	4605      	mov	r5, r0
 800594a:	2800      	cmp	r0, #0
 800594c:	d0de      	beq.n	800590c <__submore+0x1a>
 800594e:	eb00 0806 	add.w	r8, r0, r6
 8005952:	4601      	mov	r1, r0
 8005954:	4632      	mov	r2, r6
 8005956:	4640      	mov	r0, r8
 8005958:	f7ff fadc 	bl	8004f14 <memcpy>
 800595c:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8005960:	f8c4 8000 	str.w	r8, [r4]
 8005964:	e7e9      	b.n	800593a <__submore+0x48>

08005966 <__swbuf_r>:
 8005966:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005968:	460e      	mov	r6, r1
 800596a:	4614      	mov	r4, r2
 800596c:	4605      	mov	r5, r0
 800596e:	b118      	cbz	r0, 8005978 <__swbuf_r+0x12>
 8005970:	6a03      	ldr	r3, [r0, #32]
 8005972:	b90b      	cbnz	r3, 8005978 <__swbuf_r+0x12>
 8005974:	f7fd ff20 	bl	80037b8 <__sinit>
 8005978:	69a3      	ldr	r3, [r4, #24]
 800597a:	60a3      	str	r3, [r4, #8]
 800597c:	89a3      	ldrh	r3, [r4, #12]
 800597e:	071a      	lsls	r2, r3, #28
 8005980:	d525      	bpl.n	80059ce <__swbuf_r+0x68>
 8005982:	6923      	ldr	r3, [r4, #16]
 8005984:	b31b      	cbz	r3, 80059ce <__swbuf_r+0x68>
 8005986:	6823      	ldr	r3, [r4, #0]
 8005988:	6922      	ldr	r2, [r4, #16]
 800598a:	1a98      	subs	r0, r3, r2
 800598c:	6963      	ldr	r3, [r4, #20]
 800598e:	b2f6      	uxtb	r6, r6
 8005990:	4283      	cmp	r3, r0
 8005992:	4637      	mov	r7, r6
 8005994:	dc04      	bgt.n	80059a0 <__swbuf_r+0x3a>
 8005996:	4621      	mov	r1, r4
 8005998:	4628      	mov	r0, r5
 800599a:	f7ff f96f 	bl	8004c7c <_fflush_r>
 800599e:	b9e0      	cbnz	r0, 80059da <__swbuf_r+0x74>
 80059a0:	68a3      	ldr	r3, [r4, #8]
 80059a2:	3b01      	subs	r3, #1
 80059a4:	60a3      	str	r3, [r4, #8]
 80059a6:	6823      	ldr	r3, [r4, #0]
 80059a8:	1c5a      	adds	r2, r3, #1
 80059aa:	6022      	str	r2, [r4, #0]
 80059ac:	701e      	strb	r6, [r3, #0]
 80059ae:	6962      	ldr	r2, [r4, #20]
 80059b0:	1c43      	adds	r3, r0, #1
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d004      	beq.n	80059c0 <__swbuf_r+0x5a>
 80059b6:	89a3      	ldrh	r3, [r4, #12]
 80059b8:	07db      	lsls	r3, r3, #31
 80059ba:	d506      	bpl.n	80059ca <__swbuf_r+0x64>
 80059bc:	2e0a      	cmp	r6, #10
 80059be:	d104      	bne.n	80059ca <__swbuf_r+0x64>
 80059c0:	4621      	mov	r1, r4
 80059c2:	4628      	mov	r0, r5
 80059c4:	f7ff f95a 	bl	8004c7c <_fflush_r>
 80059c8:	b938      	cbnz	r0, 80059da <__swbuf_r+0x74>
 80059ca:	4638      	mov	r0, r7
 80059cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059ce:	4621      	mov	r1, r4
 80059d0:	4628      	mov	r0, r5
 80059d2:	f000 f805 	bl	80059e0 <__swsetup_r>
 80059d6:	2800      	cmp	r0, #0
 80059d8:	d0d5      	beq.n	8005986 <__swbuf_r+0x20>
 80059da:	f04f 37ff 	mov.w	r7, #4294967295
 80059de:	e7f4      	b.n	80059ca <__swbuf_r+0x64>

080059e0 <__swsetup_r>:
 80059e0:	b538      	push	{r3, r4, r5, lr}
 80059e2:	4b2a      	ldr	r3, [pc, #168]	; (8005a8c <__swsetup_r+0xac>)
 80059e4:	4605      	mov	r5, r0
 80059e6:	6818      	ldr	r0, [r3, #0]
 80059e8:	460c      	mov	r4, r1
 80059ea:	b118      	cbz	r0, 80059f4 <__swsetup_r+0x14>
 80059ec:	6a03      	ldr	r3, [r0, #32]
 80059ee:	b90b      	cbnz	r3, 80059f4 <__swsetup_r+0x14>
 80059f0:	f7fd fee2 	bl	80037b8 <__sinit>
 80059f4:	89a3      	ldrh	r3, [r4, #12]
 80059f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80059fa:	0718      	lsls	r0, r3, #28
 80059fc:	d422      	bmi.n	8005a44 <__swsetup_r+0x64>
 80059fe:	06d9      	lsls	r1, r3, #27
 8005a00:	d407      	bmi.n	8005a12 <__swsetup_r+0x32>
 8005a02:	2309      	movs	r3, #9
 8005a04:	602b      	str	r3, [r5, #0]
 8005a06:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005a0a:	81a3      	strh	r3, [r4, #12]
 8005a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a10:	e034      	b.n	8005a7c <__swsetup_r+0x9c>
 8005a12:	0758      	lsls	r0, r3, #29
 8005a14:	d512      	bpl.n	8005a3c <__swsetup_r+0x5c>
 8005a16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a18:	b141      	cbz	r1, 8005a2c <__swsetup_r+0x4c>
 8005a1a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a1e:	4299      	cmp	r1, r3
 8005a20:	d002      	beq.n	8005a28 <__swsetup_r+0x48>
 8005a22:	4628      	mov	r0, r5
 8005a24:	f7fe fbf2 	bl	800420c <_free_r>
 8005a28:	2300      	movs	r3, #0
 8005a2a:	6363      	str	r3, [r4, #52]	; 0x34
 8005a2c:	89a3      	ldrh	r3, [r4, #12]
 8005a2e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005a32:	81a3      	strh	r3, [r4, #12]
 8005a34:	2300      	movs	r3, #0
 8005a36:	6063      	str	r3, [r4, #4]
 8005a38:	6923      	ldr	r3, [r4, #16]
 8005a3a:	6023      	str	r3, [r4, #0]
 8005a3c:	89a3      	ldrh	r3, [r4, #12]
 8005a3e:	f043 0308 	orr.w	r3, r3, #8
 8005a42:	81a3      	strh	r3, [r4, #12]
 8005a44:	6923      	ldr	r3, [r4, #16]
 8005a46:	b94b      	cbnz	r3, 8005a5c <__swsetup_r+0x7c>
 8005a48:	89a3      	ldrh	r3, [r4, #12]
 8005a4a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005a4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a52:	d003      	beq.n	8005a5c <__swsetup_r+0x7c>
 8005a54:	4621      	mov	r1, r4
 8005a56:	4628      	mov	r0, r5
 8005a58:	f000 f910 	bl	8005c7c <__smakebuf_r>
 8005a5c:	89a0      	ldrh	r0, [r4, #12]
 8005a5e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005a62:	f010 0301 	ands.w	r3, r0, #1
 8005a66:	d00a      	beq.n	8005a7e <__swsetup_r+0x9e>
 8005a68:	2300      	movs	r3, #0
 8005a6a:	60a3      	str	r3, [r4, #8]
 8005a6c:	6963      	ldr	r3, [r4, #20]
 8005a6e:	425b      	negs	r3, r3
 8005a70:	61a3      	str	r3, [r4, #24]
 8005a72:	6923      	ldr	r3, [r4, #16]
 8005a74:	b943      	cbnz	r3, 8005a88 <__swsetup_r+0xa8>
 8005a76:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005a7a:	d1c4      	bne.n	8005a06 <__swsetup_r+0x26>
 8005a7c:	bd38      	pop	{r3, r4, r5, pc}
 8005a7e:	0781      	lsls	r1, r0, #30
 8005a80:	bf58      	it	pl
 8005a82:	6963      	ldrpl	r3, [r4, #20]
 8005a84:	60a3      	str	r3, [r4, #8]
 8005a86:	e7f4      	b.n	8005a72 <__swsetup_r+0x92>
 8005a88:	2000      	movs	r0, #0
 8005a8a:	e7f7      	b.n	8005a7c <__swsetup_r+0x9c>
 8005a8c:	20000070 	.word	0x20000070

08005a90 <_raise_r>:
 8005a90:	291f      	cmp	r1, #31
 8005a92:	b538      	push	{r3, r4, r5, lr}
 8005a94:	4604      	mov	r4, r0
 8005a96:	460d      	mov	r5, r1
 8005a98:	d904      	bls.n	8005aa4 <_raise_r+0x14>
 8005a9a:	2316      	movs	r3, #22
 8005a9c:	6003      	str	r3, [r0, #0]
 8005a9e:	f04f 30ff 	mov.w	r0, #4294967295
 8005aa2:	bd38      	pop	{r3, r4, r5, pc}
 8005aa4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005aa6:	b112      	cbz	r2, 8005aae <_raise_r+0x1e>
 8005aa8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005aac:	b94b      	cbnz	r3, 8005ac2 <_raise_r+0x32>
 8005aae:	4620      	mov	r0, r4
 8005ab0:	f000 f830 	bl	8005b14 <_getpid_r>
 8005ab4:	462a      	mov	r2, r5
 8005ab6:	4601      	mov	r1, r0
 8005ab8:	4620      	mov	r0, r4
 8005aba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005abe:	f000 b817 	b.w	8005af0 <_kill_r>
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d00a      	beq.n	8005adc <_raise_r+0x4c>
 8005ac6:	1c59      	adds	r1, r3, #1
 8005ac8:	d103      	bne.n	8005ad2 <_raise_r+0x42>
 8005aca:	2316      	movs	r3, #22
 8005acc:	6003      	str	r3, [r0, #0]
 8005ace:	2001      	movs	r0, #1
 8005ad0:	e7e7      	b.n	8005aa2 <_raise_r+0x12>
 8005ad2:	2400      	movs	r4, #0
 8005ad4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005ad8:	4628      	mov	r0, r5
 8005ada:	4798      	blx	r3
 8005adc:	2000      	movs	r0, #0
 8005ade:	e7e0      	b.n	8005aa2 <_raise_r+0x12>

08005ae0 <raise>:
 8005ae0:	4b02      	ldr	r3, [pc, #8]	; (8005aec <raise+0xc>)
 8005ae2:	4601      	mov	r1, r0
 8005ae4:	6818      	ldr	r0, [r3, #0]
 8005ae6:	f7ff bfd3 	b.w	8005a90 <_raise_r>
 8005aea:	bf00      	nop
 8005aec:	20000070 	.word	0x20000070

08005af0 <_kill_r>:
 8005af0:	b538      	push	{r3, r4, r5, lr}
 8005af2:	4d07      	ldr	r5, [pc, #28]	; (8005b10 <_kill_r+0x20>)
 8005af4:	2300      	movs	r3, #0
 8005af6:	4604      	mov	r4, r0
 8005af8:	4608      	mov	r0, r1
 8005afa:	4611      	mov	r1, r2
 8005afc:	602b      	str	r3, [r5, #0]
 8005afe:	f7fb faf3 	bl	80010e8 <_kill>
 8005b02:	1c43      	adds	r3, r0, #1
 8005b04:	d102      	bne.n	8005b0c <_kill_r+0x1c>
 8005b06:	682b      	ldr	r3, [r5, #0]
 8005b08:	b103      	cbz	r3, 8005b0c <_kill_r+0x1c>
 8005b0a:	6023      	str	r3, [r4, #0]
 8005b0c:	bd38      	pop	{r3, r4, r5, pc}
 8005b0e:	bf00      	nop
 8005b10:	200002e0 	.word	0x200002e0

08005b14 <_getpid_r>:
 8005b14:	f7fb bae0 	b.w	80010d8 <_getpid>

08005b18 <_malloc_usable_size_r>:
 8005b18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b1c:	1f18      	subs	r0, r3, #4
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	bfbc      	itt	lt
 8005b22:	580b      	ldrlt	r3, [r1, r0]
 8005b24:	18c0      	addlt	r0, r0, r3
 8005b26:	4770      	bx	lr

08005b28 <_strtol_l.constprop.0>:
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b2e:	d001      	beq.n	8005b34 <_strtol_l.constprop.0+0xc>
 8005b30:	2b24      	cmp	r3, #36	; 0x24
 8005b32:	d906      	bls.n	8005b42 <_strtol_l.constprop.0+0x1a>
 8005b34:	f7fe fb16 	bl	8004164 <__errno>
 8005b38:	2316      	movs	r3, #22
 8005b3a:	6003      	str	r3, [r0, #0]
 8005b3c:	2000      	movs	r0, #0
 8005b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b42:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005c28 <_strtol_l.constprop.0+0x100>
 8005b46:	460d      	mov	r5, r1
 8005b48:	462e      	mov	r6, r5
 8005b4a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005b4e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8005b52:	f017 0708 	ands.w	r7, r7, #8
 8005b56:	d1f7      	bne.n	8005b48 <_strtol_l.constprop.0+0x20>
 8005b58:	2c2d      	cmp	r4, #45	; 0x2d
 8005b5a:	d132      	bne.n	8005bc2 <_strtol_l.constprop.0+0x9a>
 8005b5c:	782c      	ldrb	r4, [r5, #0]
 8005b5e:	2701      	movs	r7, #1
 8005b60:	1cb5      	adds	r5, r6, #2
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d05b      	beq.n	8005c1e <_strtol_l.constprop.0+0xf6>
 8005b66:	2b10      	cmp	r3, #16
 8005b68:	d109      	bne.n	8005b7e <_strtol_l.constprop.0+0x56>
 8005b6a:	2c30      	cmp	r4, #48	; 0x30
 8005b6c:	d107      	bne.n	8005b7e <_strtol_l.constprop.0+0x56>
 8005b6e:	782c      	ldrb	r4, [r5, #0]
 8005b70:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005b74:	2c58      	cmp	r4, #88	; 0x58
 8005b76:	d14d      	bne.n	8005c14 <_strtol_l.constprop.0+0xec>
 8005b78:	786c      	ldrb	r4, [r5, #1]
 8005b7a:	2310      	movs	r3, #16
 8005b7c:	3502      	adds	r5, #2
 8005b7e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005b82:	f108 38ff 	add.w	r8, r8, #4294967295
 8005b86:	f04f 0e00 	mov.w	lr, #0
 8005b8a:	fbb8 f9f3 	udiv	r9, r8, r3
 8005b8e:	4676      	mov	r6, lr
 8005b90:	fb03 8a19 	mls	sl, r3, r9, r8
 8005b94:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005b98:	f1bc 0f09 	cmp.w	ip, #9
 8005b9c:	d816      	bhi.n	8005bcc <_strtol_l.constprop.0+0xa4>
 8005b9e:	4664      	mov	r4, ip
 8005ba0:	42a3      	cmp	r3, r4
 8005ba2:	dd24      	ble.n	8005bee <_strtol_l.constprop.0+0xc6>
 8005ba4:	f1be 3fff 	cmp.w	lr, #4294967295
 8005ba8:	d008      	beq.n	8005bbc <_strtol_l.constprop.0+0x94>
 8005baa:	45b1      	cmp	r9, r6
 8005bac:	d31c      	bcc.n	8005be8 <_strtol_l.constprop.0+0xc0>
 8005bae:	d101      	bne.n	8005bb4 <_strtol_l.constprop.0+0x8c>
 8005bb0:	45a2      	cmp	sl, r4
 8005bb2:	db19      	blt.n	8005be8 <_strtol_l.constprop.0+0xc0>
 8005bb4:	fb06 4603 	mla	r6, r6, r3, r4
 8005bb8:	f04f 0e01 	mov.w	lr, #1
 8005bbc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005bc0:	e7e8      	b.n	8005b94 <_strtol_l.constprop.0+0x6c>
 8005bc2:	2c2b      	cmp	r4, #43	; 0x2b
 8005bc4:	bf04      	itt	eq
 8005bc6:	782c      	ldrbeq	r4, [r5, #0]
 8005bc8:	1cb5      	addeq	r5, r6, #2
 8005bca:	e7ca      	b.n	8005b62 <_strtol_l.constprop.0+0x3a>
 8005bcc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005bd0:	f1bc 0f19 	cmp.w	ip, #25
 8005bd4:	d801      	bhi.n	8005bda <_strtol_l.constprop.0+0xb2>
 8005bd6:	3c37      	subs	r4, #55	; 0x37
 8005bd8:	e7e2      	b.n	8005ba0 <_strtol_l.constprop.0+0x78>
 8005bda:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005bde:	f1bc 0f19 	cmp.w	ip, #25
 8005be2:	d804      	bhi.n	8005bee <_strtol_l.constprop.0+0xc6>
 8005be4:	3c57      	subs	r4, #87	; 0x57
 8005be6:	e7db      	b.n	8005ba0 <_strtol_l.constprop.0+0x78>
 8005be8:	f04f 3eff 	mov.w	lr, #4294967295
 8005bec:	e7e6      	b.n	8005bbc <_strtol_l.constprop.0+0x94>
 8005bee:	f1be 3fff 	cmp.w	lr, #4294967295
 8005bf2:	d105      	bne.n	8005c00 <_strtol_l.constprop.0+0xd8>
 8005bf4:	2322      	movs	r3, #34	; 0x22
 8005bf6:	6003      	str	r3, [r0, #0]
 8005bf8:	4646      	mov	r6, r8
 8005bfa:	b942      	cbnz	r2, 8005c0e <_strtol_l.constprop.0+0xe6>
 8005bfc:	4630      	mov	r0, r6
 8005bfe:	e79e      	b.n	8005b3e <_strtol_l.constprop.0+0x16>
 8005c00:	b107      	cbz	r7, 8005c04 <_strtol_l.constprop.0+0xdc>
 8005c02:	4276      	negs	r6, r6
 8005c04:	2a00      	cmp	r2, #0
 8005c06:	d0f9      	beq.n	8005bfc <_strtol_l.constprop.0+0xd4>
 8005c08:	f1be 0f00 	cmp.w	lr, #0
 8005c0c:	d000      	beq.n	8005c10 <_strtol_l.constprop.0+0xe8>
 8005c0e:	1e69      	subs	r1, r5, #1
 8005c10:	6011      	str	r1, [r2, #0]
 8005c12:	e7f3      	b.n	8005bfc <_strtol_l.constprop.0+0xd4>
 8005c14:	2430      	movs	r4, #48	; 0x30
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d1b1      	bne.n	8005b7e <_strtol_l.constprop.0+0x56>
 8005c1a:	2308      	movs	r3, #8
 8005c1c:	e7af      	b.n	8005b7e <_strtol_l.constprop.0+0x56>
 8005c1e:	2c30      	cmp	r4, #48	; 0x30
 8005c20:	d0a5      	beq.n	8005b6e <_strtol_l.constprop.0+0x46>
 8005c22:	230a      	movs	r3, #10
 8005c24:	e7ab      	b.n	8005b7e <_strtol_l.constprop.0+0x56>
 8005c26:	bf00      	nop
 8005c28:	08006063 	.word	0x08006063

08005c2c <_strtol_r>:
 8005c2c:	f7ff bf7c 	b.w	8005b28 <_strtol_l.constprop.0>

08005c30 <__swhatbuf_r>:
 8005c30:	b570      	push	{r4, r5, r6, lr}
 8005c32:	460c      	mov	r4, r1
 8005c34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c38:	2900      	cmp	r1, #0
 8005c3a:	b096      	sub	sp, #88	; 0x58
 8005c3c:	4615      	mov	r5, r2
 8005c3e:	461e      	mov	r6, r3
 8005c40:	da0d      	bge.n	8005c5e <__swhatbuf_r+0x2e>
 8005c42:	89a3      	ldrh	r3, [r4, #12]
 8005c44:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005c48:	f04f 0100 	mov.w	r1, #0
 8005c4c:	bf0c      	ite	eq
 8005c4e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005c52:	2340      	movne	r3, #64	; 0x40
 8005c54:	2000      	movs	r0, #0
 8005c56:	6031      	str	r1, [r6, #0]
 8005c58:	602b      	str	r3, [r5, #0]
 8005c5a:	b016      	add	sp, #88	; 0x58
 8005c5c:	bd70      	pop	{r4, r5, r6, pc}
 8005c5e:	466a      	mov	r2, sp
 8005c60:	f000 f848 	bl	8005cf4 <_fstat_r>
 8005c64:	2800      	cmp	r0, #0
 8005c66:	dbec      	blt.n	8005c42 <__swhatbuf_r+0x12>
 8005c68:	9901      	ldr	r1, [sp, #4]
 8005c6a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005c6e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005c72:	4259      	negs	r1, r3
 8005c74:	4159      	adcs	r1, r3
 8005c76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c7a:	e7eb      	b.n	8005c54 <__swhatbuf_r+0x24>

08005c7c <__smakebuf_r>:
 8005c7c:	898b      	ldrh	r3, [r1, #12]
 8005c7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005c80:	079d      	lsls	r5, r3, #30
 8005c82:	4606      	mov	r6, r0
 8005c84:	460c      	mov	r4, r1
 8005c86:	d507      	bpl.n	8005c98 <__smakebuf_r+0x1c>
 8005c88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005c8c:	6023      	str	r3, [r4, #0]
 8005c8e:	6123      	str	r3, [r4, #16]
 8005c90:	2301      	movs	r3, #1
 8005c92:	6163      	str	r3, [r4, #20]
 8005c94:	b002      	add	sp, #8
 8005c96:	bd70      	pop	{r4, r5, r6, pc}
 8005c98:	ab01      	add	r3, sp, #4
 8005c9a:	466a      	mov	r2, sp
 8005c9c:	f7ff ffc8 	bl	8005c30 <__swhatbuf_r>
 8005ca0:	9900      	ldr	r1, [sp, #0]
 8005ca2:	4605      	mov	r5, r0
 8005ca4:	4630      	mov	r0, r6
 8005ca6:	f7fe fb71 	bl	800438c <_malloc_r>
 8005caa:	b948      	cbnz	r0, 8005cc0 <__smakebuf_r+0x44>
 8005cac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cb0:	059a      	lsls	r2, r3, #22
 8005cb2:	d4ef      	bmi.n	8005c94 <__smakebuf_r+0x18>
 8005cb4:	f023 0303 	bic.w	r3, r3, #3
 8005cb8:	f043 0302 	orr.w	r3, r3, #2
 8005cbc:	81a3      	strh	r3, [r4, #12]
 8005cbe:	e7e3      	b.n	8005c88 <__smakebuf_r+0xc>
 8005cc0:	89a3      	ldrh	r3, [r4, #12]
 8005cc2:	6020      	str	r0, [r4, #0]
 8005cc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cc8:	81a3      	strh	r3, [r4, #12]
 8005cca:	9b00      	ldr	r3, [sp, #0]
 8005ccc:	6163      	str	r3, [r4, #20]
 8005cce:	9b01      	ldr	r3, [sp, #4]
 8005cd0:	6120      	str	r0, [r4, #16]
 8005cd2:	b15b      	cbz	r3, 8005cec <__smakebuf_r+0x70>
 8005cd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005cd8:	4630      	mov	r0, r6
 8005cda:	f000 f81d 	bl	8005d18 <_isatty_r>
 8005cde:	b128      	cbz	r0, 8005cec <__smakebuf_r+0x70>
 8005ce0:	89a3      	ldrh	r3, [r4, #12]
 8005ce2:	f023 0303 	bic.w	r3, r3, #3
 8005ce6:	f043 0301 	orr.w	r3, r3, #1
 8005cea:	81a3      	strh	r3, [r4, #12]
 8005cec:	89a3      	ldrh	r3, [r4, #12]
 8005cee:	431d      	orrs	r5, r3
 8005cf0:	81a5      	strh	r5, [r4, #12]
 8005cf2:	e7cf      	b.n	8005c94 <__smakebuf_r+0x18>

08005cf4 <_fstat_r>:
 8005cf4:	b538      	push	{r3, r4, r5, lr}
 8005cf6:	4d07      	ldr	r5, [pc, #28]	; (8005d14 <_fstat_r+0x20>)
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	4604      	mov	r4, r0
 8005cfc:	4608      	mov	r0, r1
 8005cfe:	4611      	mov	r1, r2
 8005d00:	602b      	str	r3, [r5, #0]
 8005d02:	f7fb fa50 	bl	80011a6 <_fstat>
 8005d06:	1c43      	adds	r3, r0, #1
 8005d08:	d102      	bne.n	8005d10 <_fstat_r+0x1c>
 8005d0a:	682b      	ldr	r3, [r5, #0]
 8005d0c:	b103      	cbz	r3, 8005d10 <_fstat_r+0x1c>
 8005d0e:	6023      	str	r3, [r4, #0]
 8005d10:	bd38      	pop	{r3, r4, r5, pc}
 8005d12:	bf00      	nop
 8005d14:	200002e0 	.word	0x200002e0

08005d18 <_isatty_r>:
 8005d18:	b538      	push	{r3, r4, r5, lr}
 8005d1a:	4d06      	ldr	r5, [pc, #24]	; (8005d34 <_isatty_r+0x1c>)
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	4604      	mov	r4, r0
 8005d20:	4608      	mov	r0, r1
 8005d22:	602b      	str	r3, [r5, #0]
 8005d24:	f7fb fa4f 	bl	80011c6 <_isatty>
 8005d28:	1c43      	adds	r3, r0, #1
 8005d2a:	d102      	bne.n	8005d32 <_isatty_r+0x1a>
 8005d2c:	682b      	ldr	r3, [r5, #0]
 8005d2e:	b103      	cbz	r3, 8005d32 <_isatty_r+0x1a>
 8005d30:	6023      	str	r3, [r4, #0]
 8005d32:	bd38      	pop	{r3, r4, r5, pc}
 8005d34:	200002e0 	.word	0x200002e0

08005d38 <_init>:
 8005d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d3a:	bf00      	nop
 8005d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d3e:	bc08      	pop	{r3}
 8005d40:	469e      	mov	lr, r3
 8005d42:	4770      	bx	lr

08005d44 <_fini>:
 8005d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d46:	bf00      	nop
 8005d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d4a:	bc08      	pop	{r3}
 8005d4c:	469e      	mov	lr, r3
 8005d4e:	4770      	bx	lr
